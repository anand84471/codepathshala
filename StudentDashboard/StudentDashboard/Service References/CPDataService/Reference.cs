//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace StudentDashboard.CPDataService {
    using System.Runtime.Serialization;
    using System;
    
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="CompositeType", Namespace="http://schemas.datacontract.org/2004/07/CPDataService")]
    [System.SerializableAttribute()]
    public partial class CompositeType : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private bool BoolValueField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string StringValueField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool BoolValue {
            get {
                return this.BoolValueField;
            }
            set {
                if ((this.BoolValueField.Equals(value) != true)) {
                    this.BoolValueField = value;
                    this.RaisePropertyChanged("BoolValue");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string StringValue {
            get {
                return this.StringValueField;
            }
            set {
                if ((object.ReferenceEquals(this.StringValueField, value) != true)) {
                    this.StringValueField = value;
                    this.RaisePropertyChanged("StringValue");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="CPDataService.ICpDataService")]
    public interface ICpDataService {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICpDataService/InsertOtpToVarifyPhoneNoOfStudent", ReplyAction="http://tempuri.org/ICpDataService/InsertOtpToVarifyPhoneNoOfStudentResponse")]
        bool InsertOtpToVarifyPhoneNoOfStudent(long StudentId, string Otp);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICpDataService/InsertOtpToVarifyPhoneNoOfStudent", ReplyAction="http://tempuri.org/ICpDataService/InsertOtpToVarifyPhoneNoOfStudentResponse")]
        System.Threading.Tasks.Task<bool> InsertOtpToVarifyPhoneNoOfStudentAsync(long StudentId, string Otp);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICpDataService/UpdatePhoneNoOfGmailRegStudent", ReplyAction="http://tempuri.org/ICpDataService/UpdatePhoneNoOfGmailRegStudentResponse")]
        bool UpdatePhoneNoOfGmailRegStudent(string UserId, string Token, string PhoneNo);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICpDataService/UpdatePhoneNoOfGmailRegStudent", ReplyAction="http://tempuri.org/ICpDataService/UpdatePhoneNoOfGmailRegStudentResponse")]
        System.Threading.Tasks.Task<bool> UpdatePhoneNoOfGmailRegStudentAsync(string UserId, string Token, string PhoneNo);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICpDataService/InsertInstructorContactUsDetail", ReplyAction="http://tempuri.org/ICpDataService/InsertInstructorContactUsDetailResponse")]
        bool InsertInstructorContactUsDetail(int InstructorId, string Email, string PhoneNo, string Subject, string Message);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICpDataService/InsertInstructorContactUsDetail", ReplyAction="http://tempuri.org/ICpDataService/InsertInstructorContactUsDetailResponse")]
        System.Threading.Tasks.Task<bool> InsertInstructorContactUsDetailAsync(int InstructorId, string Email, string PhoneNo, string Subject, string Message);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICpDataService/GetAllClassroomCategories", ReplyAction="http://tempuri.org/ICpDataService/GetAllClassroomCategoriesResponse")]
        System.Data.DataSet GetAllClassroomCategories();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICpDataService/GetAllClassroomCategories", ReplyAction="http://tempuri.org/ICpDataService/GetAllClassroomCategoriesResponse")]
        System.Threading.Tasks.Task<System.Data.DataSet> GetAllClassroomCategoriesAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICpDataService/GetStudentsJoinedToClassroomForStudent", ReplyAction="http://tempuri.org/ICpDataService/GetStudentsJoinedToClassroomForStudentResponse")]
        System.Data.DataSet GetStudentsJoinedToClassroomForStudent(long ClassroomId, long StudentId, int MaxRowsToBeFetched, int NoOfRowsFetched);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICpDataService/GetStudentsJoinedToClassroomForStudent", ReplyAction="http://tempuri.org/ICpDataService/GetStudentsJoinedToClassroomForStudentResponse")]
        System.Threading.Tasks.Task<System.Data.DataSet> GetStudentsJoinedToClassroomForStudentAsync(long ClassroomId, long StudentId, int MaxRowsToBeFetched, int NoOfRowsFetched);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICpDataService/CheckClassroomMeetingOccuredToday", ReplyAction="http://tempuri.org/ICpDataService/CheckClassroomMeetingOccuredTodayResponse")]
        System.Data.DataSet CheckClassroomMeetingOccuredToday(long ClassroomId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICpDataService/CheckClassroomMeetingOccuredToday", ReplyAction="http://tempuri.org/ICpDataService/CheckClassroomMeetingOccuredTodayResponse")]
        System.Threading.Tasks.Task<System.Data.DataSet> CheckClassroomMeetingOccuredTodayAsync(long ClassroomId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICpDataService/GetAllTrialClassroomMeetingDetailsForStudent", ReplyAction="http://tempuri.org/ICpDataService/GetAllTrialClassroomMeetingDetailsForStudentRes" +
            "ponse")]
        System.Data.DataSet GetAllTrialClassroomMeetingDetailsForStudent(long StudentId, long ClassroomId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICpDataService/GetAllTrialClassroomMeetingDetailsForStudent", ReplyAction="http://tempuri.org/ICpDataService/GetAllTrialClassroomMeetingDetailsForStudentRes" +
            "ponse")]
        System.Threading.Tasks.Task<System.Data.DataSet> GetAllTrialClassroomMeetingDetailsForStudentAsync(long StudentId, long ClassroomId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICpDataService/GetAllClassroomReviews", ReplyAction="http://tempuri.org/ICpDataService/GetAllClassroomReviewsResponse")]
        System.Data.DataSet GetAllClassroomReviews(long ClassroomId, int NoOfRowsToBeFetched, int NoOfRowsFetched);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICpDataService/GetAllClassroomReviews", ReplyAction="http://tempuri.org/ICpDataService/GetAllClassroomReviewsResponse")]
        System.Threading.Tasks.Task<System.Data.DataSet> GetAllClassroomReviewsAsync(long ClassroomId, int NoOfRowsToBeFetched, int NoOfRowsFetched);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICpDataService/GetAvgRatingForClassroom", ReplyAction="http://tempuri.org/ICpDataService/GetAvgRatingForClassroomResponse")]
        System.Data.DataSet GetAvgRatingForClassroom(long ClassroomId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICpDataService/GetAvgRatingForClassroom", ReplyAction="http://tempuri.org/ICpDataService/GetAvgRatingForClassroomResponse")]
        System.Threading.Tasks.Task<System.Data.DataSet> GetAvgRatingForClassroomAsync(long ClassroomId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICpDataService/GetClassroomHomeDetailsForStudent", ReplyAction="http://tempuri.org/ICpDataService/GetClassroomHomeDetailsForStudentResponse")]
        System.Data.DataSet GetClassroomHomeDetailsForStudent(long ClassroomId, long StudentId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICpDataService/GetClassroomHomeDetailsForStudent", ReplyAction="http://tempuri.org/ICpDataService/GetClassroomHomeDetailsForStudentResponse")]
        System.Threading.Tasks.Task<System.Data.DataSet> GetClassroomHomeDetailsForStudentAsync(long ClassroomId, long StudentId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICpDataService/GetInstructorClassroomSearchDetails", ReplyAction="http://tempuri.org/ICpDataService/GetInstructorClassroomSearchDetailsResponse")]
        System.Data.DataSet GetInstructorClassroomSearchDetails(int InstructorId, string SearchString);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICpDataService/GetInstructorClassroomSearchDetails", ReplyAction="http://tempuri.org/ICpDataService/GetInstructorClassroomSearchDetailsResponse")]
        System.Threading.Tasks.Task<System.Data.DataSet> GetInstructorClassroomSearchDetailsAsync(int InstructorId, string SearchString);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICpDataService/UpdateInstructorProfilePicture", ReplyAction="http://tempuri.org/ICpDataService/UpdateInstructorProfilePictureResponse")]
        bool UpdateInstructorProfilePicture(int InstructorId, string Url, string MediumSizeUrl, string SmallSizeUrl);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICpDataService/UpdateInstructorProfilePicture", ReplyAction="http://tempuri.org/ICpDataService/UpdateInstructorProfilePictureResponse")]
        System.Threading.Tasks.Task<bool> UpdateInstructorProfilePictureAsync(int InstructorId, string Url, string MediumSizeUrl, string SmallSizeUrl);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICpDataService/UpdateStudentProfilePicture", ReplyAction="http://tempuri.org/ICpDataService/UpdateStudentProfilePictureResponse")]
        bool UpdateStudentProfilePicture(long StudentId, string OriginalFile, string SmallThumbnailUrl, string MediumThumbnailUrl);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICpDataService/UpdateStudentProfilePicture", ReplyAction="http://tempuri.org/ICpDataService/UpdateStudentProfilePictureResponse")]
        System.Threading.Tasks.Task<bool> UpdateStudentProfilePictureAsync(long StudentId, string OriginalFile, string SmallThumbnailUrl, string MediumThumbnailUrl);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICpDataService/GetClassroomMeetingDetails", ReplyAction="http://tempuri.org/ICpDataService/GetClassroomMeetingDetailsResponse")]
        System.Data.DataSet GetClassroomMeetingDetails(long ClassroomId, long MeetingId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICpDataService/GetClassroomMeetingDetails", ReplyAction="http://tempuri.org/ICpDataService/GetClassroomMeetingDetailsResponse")]
        System.Threading.Tasks.Task<System.Data.DataSet> GetClassroomMeetingDetailsAsync(long ClassroomId, long MeetingId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICpDataService/InsertClassroomAttachment", ReplyAction="http://tempuri.org/ICpDataService/InsertClassroomAttachmentResponse")]
        bool InsertClassroomAttachment(long ClassroomId, string AttachmentName, string AttachmentDescription, string AttachmentUrl);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICpDataService/InsertClassroomAttachment", ReplyAction="http://tempuri.org/ICpDataService/InsertClassroomAttachmentResponse")]
        System.Threading.Tasks.Task<bool> InsertClassroomAttachmentAsync(long ClassroomId, string AttachmentName, string AttachmentDescription, string AttachmentUrl);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICpDataService/UpdateClassroomAttachmentDetails", ReplyAction="http://tempuri.org/ICpDataService/UpdateClassroomAttachmentDetailsResponse")]
        bool UpdateClassroomAttachmentDetails(long AttachmentId, string AttachmentName, string AttachmentDescription, string AttachmentUrl);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICpDataService/UpdateClassroomAttachmentDetails", ReplyAction="http://tempuri.org/ICpDataService/UpdateClassroomAttachmentDetailsResponse")]
        System.Threading.Tasks.Task<bool> UpdateClassroomAttachmentDetailsAsync(long AttachmentId, string AttachmentName, string AttachmentDescription, string AttachmentUrl);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICpDataService/DeleteClassroomAttachment", ReplyAction="http://tempuri.org/ICpDataService/DeleteClassroomAttachmentResponse")]
        bool DeleteClassroomAttachment(long AttachmentId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICpDataService/DeleteClassroomAttachment", ReplyAction="http://tempuri.org/ICpDataService/DeleteClassroomAttachmentResponse")]
        System.Threading.Tasks.Task<bool> DeleteClassroomAttachmentAsync(long AttachmentId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICpDataService/GetClassroomAttachments", ReplyAction="http://tempuri.org/ICpDataService/GetClassroomAttachmentsResponse")]
        System.Data.DataSet GetClassroomAttachments(long ClassroomId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICpDataService/GetClassroomAttachments", ReplyAction="http://tempuri.org/ICpDataService/GetClassroomAttachmentsResponse")]
        System.Threading.Tasks.Task<System.Data.DataSet> GetClassroomAttachmentsAsync(long ClassroomId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICpDataService/GetInstructorProfileDetailsForStudent", ReplyAction="http://tempuri.org/ICpDataService/GetInstructorProfileDetailsForStudentResponse")]
        System.Data.DataSet GetInstructorProfileDetailsForStudent(int InstructorId, long StudentId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICpDataService/GetInstructorProfileDetailsForStudent", ReplyAction="http://tempuri.org/ICpDataService/GetInstructorProfileDetailsForStudentResponse")]
        System.Threading.Tasks.Task<System.Data.DataSet> GetInstructorProfileDetailsForStudentAsync(int InstructorId, long StudentId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICpDataService/GetClassroomSchedule", ReplyAction="http://tempuri.org/ICpDataService/GetClassroomScheduleResponse")]
        System.Data.DataSet GetClassroomSchedule(long ClassroomId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICpDataService/GetClassroomSchedule", ReplyAction="http://tempuri.org/ICpDataService/GetClassroomScheduleResponse")]
        System.Threading.Tasks.Task<System.Data.DataSet> GetClassroomScheduleAsync(long ClassroomId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICpDataService/UpdateClassroomSchedule", ReplyAction="http://tempuri.org/ICpDataService/UpdateClassroomScheduleResponse")]
        bool UpdateClassroomSchedule(long ClassroomId, string ClassroomSchedule);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICpDataService/UpdateClassroomSchedule", ReplyAction="http://tempuri.org/ICpDataService/UpdateClassroomScheduleResponse")]
        System.Threading.Tasks.Task<bool> UpdateClassroomScheduleAsync(long ClassroomId, string ClassroomSchedule);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICpDataService/InsertClassroomSchedule", ReplyAction="http://tempuri.org/ICpDataService/InsertClassroomScheduleResponse")]
        bool InsertClassroomSchedule(long ClassroomId, string ClassroomSchedule);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICpDataService/InsertClassroomSchedule", ReplyAction="http://tempuri.org/ICpDataService/InsertClassroomScheduleResponse")]
        System.Threading.Tasks.Task<bool> InsertClassroomScheduleAsync(long ClassroomId, string ClassroomSchedule);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICpDataService/GetPublicClassroomDetailsForStudent", ReplyAction="http://tempuri.org/ICpDataService/GetPublicClassroomDetailsForStudentResponse")]
        System.Data.DataSet GetPublicClassroomDetailsForStudent(int NoOfRowsFetched, long StudentId, int NoOfRecordsToBeFetched, string QueryString);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICpDataService/GetPublicClassroomDetailsForStudent", ReplyAction="http://tempuri.org/ICpDataService/GetPublicClassroomDetailsForStudentResponse")]
        System.Threading.Tasks.Task<System.Data.DataSet> GetPublicClassroomDetailsForStudentAsync(int NoOfRowsFetched, long StudentId, int NoOfRecordsToBeFetched, string QueryString);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICpDataService/SearchForCourseForNotLoggedUser", ReplyAction="http://tempuri.org/ICpDataService/SearchForCourseForNotLoggedUserResponse")]
        System.Data.DataSet SearchForCourseForNotLoggedUser(string SerachString, int MaxRowToReturn, int NoOfRowsFetch, int SortType, long StudentId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICpDataService/SearchForCourseForNotLoggedUser", ReplyAction="http://tempuri.org/ICpDataService/SearchForCourseForNotLoggedUserResponse")]
        System.Threading.Tasks.Task<System.Data.DataSet> SearchForCourseForNotLoggedUserAsync(string SerachString, int MaxRowToReturn, int NoOfRowsFetch, int SortType, long StudentId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICpDataService/GetInstructorAcademicRecords", ReplyAction="http://tempuri.org/ICpDataService/GetInstructorAcademicRecordsResponse")]
        System.Data.DataSet GetInstructorAcademicRecords(int InstructorId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICpDataService/GetInstructorAcademicRecords", ReplyAction="http://tempuri.org/ICpDataService/GetInstructorAcademicRecordsResponse")]
        System.Threading.Tasks.Task<System.Data.DataSet> GetInstructorAcademicRecordsAsync(int InstructorId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICpDataService/UpdateInstructorAcademicRecord", ReplyAction="http://tempuri.org/ICpDataService/UpdateInstructorAcademicRecordResponse")]
        bool UpdateInstructorAcademicRecord(string LinkedInId, string GoogleScholarId, int InstructorId, string SchoolDetails);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICpDataService/UpdateInstructorAcademicRecord", ReplyAction="http://tempuri.org/ICpDataService/UpdateInstructorAcademicRecordResponse")]
        System.Threading.Tasks.Task<bool> UpdateInstructorAcademicRecordAsync(string LinkedInId, string GoogleScholarId, int InstructorId, string SchoolDetails);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICpDataService/UpdateInstructorBio", ReplyAction="http://tempuri.org/ICpDataService/UpdateInstructorBioResponse")]
        bool UpdateInstructorBio(int InstructorId, string InstructoBioData);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICpDataService/UpdateInstructorBio", ReplyAction="http://tempuri.org/ICpDataService/UpdateInstructorBioResponse")]
        System.Threading.Tasks.Task<bool> UpdateInstructorBioAsync(int InstructorId, string InstructoBioData);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICpDataService/GetClassroomPaymentDetails", ReplyAction="http://tempuri.org/ICpDataService/GetClassroomPaymentDetailsResponse")]
        System.Data.DataSet GetClassroomPaymentDetails(long ClassroomId, long StudentId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICpDataService/GetClassroomPaymentDetails", ReplyAction="http://tempuri.org/ICpDataService/GetClassroomPaymentDetailsResponse")]
        System.Threading.Tasks.Task<System.Data.DataSet> GetClassroomPaymentDetailsAsync(long ClassroomId, long StudentId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICpDataService/CreatePaymentOrder", ReplyAction="http://tempuri.org/ICpDataService/CreatePaymentOrderResponse")]
        bool CreatePaymentOrder(string OrederId, string CustomerName, string CustomerEmail, string CustomerPhoneNo, int AmountInPaise, string CustomerAddress);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICpDataService/CreatePaymentOrder", ReplyAction="http://tempuri.org/ICpDataService/CreatePaymentOrderResponse")]
        System.Threading.Tasks.Task<bool> CreatePaymentOrderAsync(string OrederId, string CustomerName, string CustomerEmail, string CustomerPhoneNo, int AmountInPaise, string CustomerAddress);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICpDataService/InsertRazorPayTxnDetails", ReplyAction="http://tempuri.org/ICpDataService/InsertRazorPayTxnDetailsResponse")]
        bool InsertRazorPayTxnDetails(string OrederId, string RazorPayPaymentId, string RazorPayOderId, string RazorPaySignature);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICpDataService/InsertRazorPayTxnDetails", ReplyAction="http://tempuri.org/ICpDataService/InsertRazorPayTxnDetailsResponse")]
        System.Threading.Tasks.Task<bool> InsertRazorPayTxnDetailsAsync(string OrederId, string RazorPayPaymentId, string RazorPayOderId, string RazorPaySignature);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICpDataService/GetInstructorIdByClassroomId", ReplyAction="http://tempuri.org/ICpDataService/GetInstructorIdByClassroomIdResponse")]
        StudentDashboard.CPDataService.GetInstructorIdByClassroomIdResponse GetInstructorIdByClassroomId(StudentDashboard.CPDataService.GetInstructorIdByClassroomIdRequest request);
        
        // CODEGEN: Generating message contract since the operation has multiple return values.
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICpDataService/GetInstructorIdByClassroomId", ReplyAction="http://tempuri.org/ICpDataService/GetInstructorIdByClassroomIdResponse")]
        System.Threading.Tasks.Task<StudentDashboard.CPDataService.GetInstructorIdByClassroomIdResponse> GetInstructorIdByClassroomIdAsync(StudentDashboard.CPDataService.GetInstructorIdByClassroomIdRequest request);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICpDataService/GetCoursePrice", ReplyAction="http://tempuri.org/ICpDataService/GetCoursePriceResponse")]
        StudentDashboard.CPDataService.GetCoursePriceResponse GetCoursePrice(StudentDashboard.CPDataService.GetCoursePriceRequest request);
        
        // CODEGEN: Generating message contract since the operation has multiple return values.
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICpDataService/GetCoursePrice", ReplyAction="http://tempuri.org/ICpDataService/GetCoursePriceResponse")]
        System.Threading.Tasks.Task<StudentDashboard.CPDataService.GetCoursePriceResponse> GetCoursePriceAsync(StudentDashboard.CPDataService.GetCoursePriceRequest request);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICpDataService/GetCoursePaymentDetails", ReplyAction="http://tempuri.org/ICpDataService/GetCoursePaymentDetailsResponse")]
        System.Data.DataSet GetCoursePaymentDetails(long CourseId, long StudentId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICpDataService/GetCoursePaymentDetails", ReplyAction="http://tempuri.org/ICpDataService/GetCoursePaymentDetailsResponse")]
        System.Threading.Tasks.Task<System.Data.DataSet> GetCoursePaymentDetailsAsync(long CourseId, long StudentId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICpDataService/GetInstructorEarnings", ReplyAction="http://tempuri.org/ICpDataService/GetInstructorEarningsResponse")]
        System.Data.DataSet GetInstructorEarnings(int InstructorId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICpDataService/GetInstructorEarnings", ReplyAction="http://tempuri.org/ICpDataService/GetInstructorEarningsResponse")]
        System.Threading.Tasks.Task<System.Data.DataSet> GetInstructorEarningsAsync(int InstructorId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICpDataService/GetMonthwiseInstructorClassroomEarning", ReplyAction="http://tempuri.org/ICpDataService/GetMonthwiseInstructorClassroomEarningResponse")]
        System.Data.DataSet GetMonthwiseInstructorClassroomEarning(int InstructorId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICpDataService/GetMonthwiseInstructorClassroomEarning", ReplyAction="http://tempuri.org/ICpDataService/GetMonthwiseInstructorClassroomEarningResponse")]
        System.Threading.Tasks.Task<System.Data.DataSet> GetMonthwiseInstructorClassroomEarningAsync(int InstructorId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICpDataService/GetMonthwiseInstructorCourseEarning", ReplyAction="http://tempuri.org/ICpDataService/GetMonthwiseInstructorCourseEarningResponse")]
        System.Data.DataSet GetMonthwiseInstructorCourseEarning(int InstructorId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICpDataService/GetMonthwiseInstructorCourseEarning", ReplyAction="http://tempuri.org/ICpDataService/GetMonthwiseInstructorCourseEarningResponse")]
        System.Threading.Tasks.Task<System.Data.DataSet> GetMonthwiseInstructorCourseEarningAsync(int InstructorId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICpDataService/InsertNewTestSeries", ReplyAction="http://tempuri.org/ICpDataService/InsertNewTestSeriesResponse")]
        StudentDashboard.CPDataService.InsertNewTestSeriesResponse InsertNewTestSeries(StudentDashboard.CPDataService.InsertNewTestSeriesRequest request);
        
        // CODEGEN: Generating message contract since the operation has multiple return values.
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICpDataService/InsertNewTestSeries", ReplyAction="http://tempuri.org/ICpDataService/InsertNewTestSeriesResponse")]
        System.Threading.Tasks.Task<StudentDashboard.CPDataService.InsertNewTestSeriesResponse> InsertNewTestSeriesAsync(StudentDashboard.CPDataService.InsertNewTestSeriesRequest request);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICpDataService/InsertNewTestToTestSeries", ReplyAction="http://tempuri.org/ICpDataService/InsertNewTestToTestSeriesResponse")]
        bool InsertNewTestToTestSeries(long TestSeriesId, long TestId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICpDataService/InsertNewTestToTestSeries", ReplyAction="http://tempuri.org/ICpDataService/InsertNewTestToTestSeriesResponse")]
        System.Threading.Tasks.Task<bool> InsertNewTestToTestSeriesAsync(long TestSeriesId, long TestId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICpDataService/DeletTestFromTestSeries", ReplyAction="http://tempuri.org/ICpDataService/DeletTestFromTestSeriesResponse")]
        bool DeletTestFromTestSeries(long TestSeriesContentId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICpDataService/DeletTestFromTestSeries", ReplyAction="http://tempuri.org/ICpDataService/DeletTestFromTestSeriesResponse")]
        System.Threading.Tasks.Task<bool> DeletTestFromTestSeriesAsync(long TestSeriesContentId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICpDataService/GetTestSearchResultForStudent", ReplyAction="http://tempuri.org/ICpDataService/GetTestSearchResultForStudentResponse")]
        System.Data.DataSet GetTestSearchResultForStudent(long StudentId, string SearchString, int MaxRowToFetch, long LastFetchedId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICpDataService/GetTestSearchResultForStudent", ReplyAction="http://tempuri.org/ICpDataService/GetTestSearchResultForStudentResponse")]
        System.Threading.Tasks.Task<System.Data.DataSet> GetTestSearchResultForStudentAsync(long StudentId, string SearchString, int MaxRowToFetch, long LastFetchedId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICpDataService/AddNewTestAnonymousTestSubmission", ReplyAction="http://tempuri.org/ICpDataService/AddNewTestAnonymousTestSubmissionResponse")]
        bool AddNewTestAnonymousTestSubmission(long TestId, string TestAccessCode);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICpDataService/AddNewTestAnonymousTestSubmission", ReplyAction="http://tempuri.org/ICpDataService/AddNewTestAnonymousTestSubmissionResponse")]
        System.Threading.Tasks.Task<bool> AddNewTestAnonymousTestSubmissionAsync(long TestId, string TestAccessCode);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICpDataService/UpdateClassroomSyllabus", ReplyAction="http://tempuri.org/ICpDataService/UpdateClassroomSyllabusResponse")]
        bool UpdateClassroomSyllabus(long ClassroomId, string ClassroomSyallabus);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICpDataService/UpdateClassroomSyllabus", ReplyAction="http://tempuri.org/ICpDataService/UpdateClassroomSyllabusResponse")]
        System.Threading.Tasks.Task<bool> UpdateClassroomSyllabusAsync(long ClassroomId, string ClassroomSyallabus);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICpDataService/GetClassroomsForHomePage", ReplyAction="http://tempuri.org/ICpDataService/GetClassroomsForHomePageResponse")]
        System.Data.DataSet GetClassroomsForHomePage();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICpDataService/GetClassroomsForHomePage", ReplyAction="http://tempuri.org/ICpDataService/GetClassroomsForHomePageResponse")]
        System.Threading.Tasks.Task<System.Data.DataSet> GetClassroomsForHomePageAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICpDataService/GetClassRoomDetailsForStudent", ReplyAction="http://tempuri.org/ICpDataService/GetClassRoomDetailsForStudentResponse")]
        System.Data.DataSet GetClassRoomDetailsForStudent(long ClassRoomId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICpDataService/GetClassRoomDetailsForStudent", ReplyAction="http://tempuri.org/ICpDataService/GetClassRoomDetailsForStudentResponse")]
        System.Threading.Tasks.Task<System.Data.DataSet> GetClassRoomDetailsForStudentAsync(long ClassRoomId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICpDataService/InsertEmailSubscriber", ReplyAction="http://tempuri.org/ICpDataService/InsertEmailSubscriberResponse")]
        bool InsertEmailSubscriber(string EmailId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICpDataService/InsertEmailSubscriber", ReplyAction="http://tempuri.org/ICpDataService/InsertEmailSubscriberResponse")]
        System.Threading.Tasks.Task<bool> InsertEmailSubscriberAsync(string EmailId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICpDataService/InsertStudentAlert", ReplyAction="http://tempuri.org/ICpDataService/InsertStudentAlertResponse")]
        bool InsertStudentAlert(int AlertTypeId, long StudentId, string TargetUrl);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICpDataService/InsertStudentAlert", ReplyAction="http://tempuri.org/ICpDataService/InsertStudentAlertResponse")]
        System.Threading.Tasks.Task<bool> InsertStudentAlertAsync(int AlertTypeId, long StudentId, string TargetUrl);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICpDataService/GetStudentRecentCourseJoin", ReplyAction="http://tempuri.org/ICpDataService/GetStudentRecentCourseJoinResponse")]
        System.Data.DataSet GetStudentRecentCourseJoin(long StudentId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICpDataService/GetStudentRecentCourseJoin", ReplyAction="http://tempuri.org/ICpDataService/GetStudentRecentCourseJoinResponse")]
        System.Threading.Tasks.Task<System.Data.DataSet> GetStudentRecentCourseJoinAsync(long StudentId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICpDataService/GetStudentRecentLiveClassJoin", ReplyAction="http://tempuri.org/ICpDataService/GetStudentRecentLiveClassJoinResponse")]
        System.Data.DataSet GetStudentRecentLiveClassJoin(long StudentId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICpDataService/GetStudentRecentLiveClassJoin", ReplyAction="http://tempuri.org/ICpDataService/GetStudentRecentLiveClassJoinResponse")]
        System.Threading.Tasks.Task<System.Data.DataSet> GetStudentRecentLiveClassJoinAsync(long StudentId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICpDataService/GetSearchResultForStudent", ReplyAction="http://tempuri.org/ICpDataService/GetSearchResultForStudentResponse")]
        System.Data.DataSet GetSearchResultForStudent(string SearchString, int MaxRowToReturn, int NoOfRowsFetch, long StudentId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICpDataService/GetSearchResultForStudent", ReplyAction="http://tempuri.org/ICpDataService/GetSearchResultForStudentResponse")]
        System.Threading.Tasks.Task<System.Data.DataSet> GetSearchResultForStudentAsync(string SearchString, int MaxRowToReturn, int NoOfRowsFetch, long StudentId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICpDataService/UpdateClassroomBackground", ReplyAction="http://tempuri.org/ICpDataService/UpdateClassroomBackgroundResponse")]
        bool UpdateClassroomBackground(long ClassroomId, string OriginalImagePath, string SmallIcon, string MediumIcon);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICpDataService/UpdateClassroomBackground", ReplyAction="http://tempuri.org/ICpDataService/UpdateClassroomBackgroundResponse")]
        System.Threading.Tasks.Task<bool> UpdateClassroomBackgroundAsync(long ClassroomId, string OriginalImagePath, string SmallIcon, string MediumIcon);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICpDataService/UpdateCourseBackground", ReplyAction="http://tempuri.org/ICpDataService/UpdateCourseBackgroundResponse")]
        bool UpdateCourseBackground(long CourseId, string OriginalImagePath, string SmallIcon, string MediumIcon);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICpDataService/UpdateCourseBackground", ReplyAction="http://tempuri.org/ICpDataService/UpdateCourseBackgroundResponse")]
        System.Threading.Tasks.Task<bool> UpdateCourseBackgroundAsync(long CourseId, string OriginalImagePath, string SmallIcon, string MediumIcon);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICpDataService/JoinNewStudent", ReplyAction="http://tempuri.org/ICpDataService/JoinNewStudentResponse")]
        bool JoinNewStudent(long StudentStaertedFollowingId, long StudentGettingFollowedId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICpDataService/JoinNewStudent", ReplyAction="http://tempuri.org/ICpDataService/JoinNewStudentResponse")]
        System.Threading.Tasks.Task<bool> JoinNewStudentAsync(long StudentStaertedFollowingId, long StudentGettingFollowedId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICpDataService/UnfollowStudent", ReplyAction="http://tempuri.org/ICpDataService/UnfollowStudentResponse")]
        bool UnfollowStudent(long StudentStaertedFollowingId, long StudentGettingFollowedId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICpDataService/UnfollowStudent", ReplyAction="http://tempuri.org/ICpDataService/UnfollowStudentResponse")]
        System.Threading.Tasks.Task<bool> UnfollowStudentAsync(long StudentStaertedFollowingId, long StudentGettingFollowedId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICpDataService/FollowBackStudent", ReplyAction="http://tempuri.org/ICpDataService/FollowBackStudentResponse")]
        bool FollowBackStudent(long StudentStaertedFollowingId, long StudentGettingFollowedId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICpDataService/FollowBackStudent", ReplyAction="http://tempuri.org/ICpDataService/FollowBackStudentResponse")]
        System.Threading.Tasks.Task<bool> FollowBackStudentAsync(long StudentStaertedFollowingId, long StudentGettingFollowedId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICpDataService/GetAllStudentsToFollow", ReplyAction="http://tempuri.org/ICpDataService/GetAllStudentsToFollowResponse")]
        System.Data.DataSet GetAllStudentsToFollow(long StudentId, int NoOfRowsFetched, int NoOfRowsToBeFetched, string SearchString);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICpDataService/GetAllStudentsToFollow", ReplyAction="http://tempuri.org/ICpDataService/GetAllStudentsToFollowResponse")]
        System.Threading.Tasks.Task<System.Data.DataSet> GetAllStudentsToFollowAsync(long StudentId, int NoOfRowsFetched, int NoOfRowsToBeFetched, string SearchString);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICpDataService/GetStudentPublicProfileDetails", ReplyAction="http://tempuri.org/ICpDataService/GetStudentPublicProfileDetailsResponse")]
        System.Data.DataSet GetStudentPublicProfileDetails(long StudentId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICpDataService/GetStudentPublicProfileDetails", ReplyAction="http://tempuri.org/ICpDataService/GetStudentPublicProfileDetailsResponse")]
        System.Threading.Tasks.Task<System.Data.DataSet> GetStudentPublicProfileDetailsAsync(long StudentId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICpDataService/GetAllStudentsFollowedByStudent", ReplyAction="http://tempuri.org/ICpDataService/GetAllStudentsFollowedByStudentResponse")]
        System.Data.DataSet GetAllStudentsFollowedByStudent(long StudentId, int NoOfRowsFetched, int NoOfRowsToBeFetched);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICpDataService/GetAllStudentsFollowedByStudent", ReplyAction="http://tempuri.org/ICpDataService/GetAllStudentsFollowedByStudentResponse")]
        System.Threading.Tasks.Task<System.Data.DataSet> GetAllStudentsFollowedByStudentAsync(long StudentId, int NoOfRowsFetched, int NoOfRowsToBeFetched);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICpDataService/GetStudentFriendDetails", ReplyAction="http://tempuri.org/ICpDataService/GetStudentFriendDetailsResponse")]
        System.Data.DataSet GetStudentFriendDetails(long StudentId, long FriendId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICpDataService/GetStudentFriendDetails", ReplyAction="http://tempuri.org/ICpDataService/GetStudentFriendDetailsResponse")]
        System.Threading.Tasks.Task<System.Data.DataSet> GetStudentFriendDetailsAsync(long StudentId, long FriendId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICpDataService/CheckStudentFollowingStudent", ReplyAction="http://tempuri.org/ICpDataService/CheckStudentFollowingStudentResponse")]
        System.Data.DataSet CheckStudentFollowingStudent(long StudentId, long StudentToBeFollowedId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICpDataService/CheckStudentFollowingStudent", ReplyAction="http://tempuri.org/ICpDataService/CheckStudentFollowingStudentResponse")]
        System.Threading.Tasks.Task<System.Data.DataSet> CheckStudentFollowingStudentAsync(long StudentId, long StudentToBeFollowedId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICpDataService/GetStudentSelfPublicDetails", ReplyAction="http://tempuri.org/ICpDataService/GetStudentSelfPublicDetailsResponse")]
        System.Data.DataSet GetStudentSelfPublicDetails(long StudentId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICpDataService/GetStudentSelfPublicDetails", ReplyAction="http://tempuri.org/ICpDataService/GetStudentSelfPublicDetailsResponse")]
        System.Threading.Tasks.Task<System.Data.DataSet> GetStudentSelfPublicDetailsAsync(long StudentId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICpDataService/UpdateClassroomsingleMeetingDetails", ReplyAction="http://tempuri.org/ICpDataService/UpdateClassroomsingleMeetingDetailsResponse")]
        bool UpdateClassroomsingleMeetingDetails(long MeetingId, string VideoUrl, string TopicName, string TopicNotes);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICpDataService/UpdateClassroomsingleMeetingDetails", ReplyAction="http://tempuri.org/ICpDataService/UpdateClassroomsingleMeetingDetailsResponse")]
        System.Threading.Tasks.Task<bool> UpdateClassroomsingleMeetingDetailsAsync(long MeetingId, string VideoUrl, string TopicName, string TopicNotes);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICpDataService/GetLiveClassMeetingDetails", ReplyAction="http://tempuri.org/ICpDataService/GetLiveClassMeetingDetailsResponse")]
        System.Data.DataSet GetLiveClassMeetingDetails(long MeetingId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICpDataService/GetLiveClassMeetingDetails", ReplyAction="http://tempuri.org/ICpDataService/GetLiveClassMeetingDetailsResponse")]
        System.Threading.Tasks.Task<System.Data.DataSet> GetLiveClassMeetingDetailsAsync(long MeetingId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICpDataService/GetClassroomAllMeetingDetailsForStudent", ReplyAction="http://tempuri.org/ICpDataService/GetClassroomAllMeetingDetailsForStudentResponse" +
            "")]
        System.Data.DataSet GetClassroomAllMeetingDetailsForStudent(long StudentId, long ClassroomId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICpDataService/GetClassroomAllMeetingDetailsForStudent", ReplyAction="http://tempuri.org/ICpDataService/GetClassroomAllMeetingDetailsForStudentResponse" +
            "")]
        System.Threading.Tasks.Task<System.Data.DataSet> GetClassroomAllMeetingDetailsForStudentAsync(long StudentId, long ClassroomId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICpDataService/GetClassroomMeetingDetailsForStudent", ReplyAction="http://tempuri.org/ICpDataService/GetClassroomMeetingDetailsForStudentResponse")]
        System.Data.DataSet GetClassroomMeetingDetailsForStudent(long StudentId, long MeetingId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICpDataService/GetClassroomMeetingDetailsForStudent", ReplyAction="http://tempuri.org/ICpDataService/GetClassroomMeetingDetailsForStudentResponse")]
        System.Threading.Tasks.Task<System.Data.DataSet> GetClassroomMeetingDetailsForStudentAsync(long StudentId, long MeetingId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICpDataService/GetClassroomSyllabus", ReplyAction="http://tempuri.org/ICpDataService/GetClassroomSyllabusResponse")]
        System.Data.DataSet GetClassroomSyllabus(long ClassroomId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICpDataService/GetClassroomSyllabus", ReplyAction="http://tempuri.org/ICpDataService/GetClassroomSyllabusResponse")]
        System.Threading.Tasks.Task<System.Data.DataSet> GetClassroomSyllabusAsync(long ClassroomId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICpDataService/MarkStudentClassroomPaymentSuccessful", ReplyAction="http://tempuri.org/ICpDataService/MarkStudentClassroomPaymentSuccessfulResponse")]
        bool MarkStudentClassroomPaymentSuccessful(long ClassroomId, long StudentId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICpDataService/MarkStudentClassroomPaymentSuccessful", ReplyAction="http://tempuri.org/ICpDataService/MarkStudentClassroomPaymentSuccessfulResponse")]
        System.Threading.Tasks.Task<bool> MarkStudentClassroomPaymentSuccessfulAsync(long ClassroomId, long StudentId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICpDataService/SearchInstructorByUserId", ReplyAction="http://tempuri.org/ICpDataService/SearchInstructorByUserIdResponse")]
        System.Data.DataSet SearchInstructorByUserId(string SearchString);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICpDataService/SearchInstructorByUserId", ReplyAction="http://tempuri.org/ICpDataService/SearchInstructorByUserIdResponse")]
        System.Threading.Tasks.Task<System.Data.DataSet> SearchInstructorByUserIdAsync(string SearchString);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICpDataService/InsertOrUpdateClassroomFeedbackByStudent", ReplyAction="http://tempuri.org/ICpDataService/InsertOrUpdateClassroomFeedbackByStudentRespons" +
            "e")]
        bool InsertOrUpdateClassroomFeedbackByStudent(long ClassroomId, long StudentId, string FeedbackMessage, int NoOfRatings);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICpDataService/InsertOrUpdateClassroomFeedbackByStudent", ReplyAction="http://tempuri.org/ICpDataService/InsertOrUpdateClassroomFeedbackByStudentRespons" +
            "e")]
        System.Threading.Tasks.Task<bool> InsertOrUpdateClassroomFeedbackByStudentAsync(long ClassroomId, long StudentId, string FeedbackMessage, int NoOfRatings);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICpDataService/GetAllCoupons", ReplyAction="http://tempuri.org/ICpDataService/GetAllCouponsResponse")]
        System.Data.DataSet GetAllCoupons();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICpDataService/GetAllCoupons", ReplyAction="http://tempuri.org/ICpDataService/GetAllCouponsResponse")]
        System.Threading.Tasks.Task<System.Data.DataSet> GetAllCouponsAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICpDataService/SendClassroomNotification", ReplyAction="http://tempuri.org/ICpDataService/SendClassroomNotificationResponse")]
        bool SendClassroomNotification(long ClassroomId, string NotificationMessage);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICpDataService/SendClassroomNotification", ReplyAction="http://tempuri.org/ICpDataService/SendClassroomNotificationResponse")]
        System.Threading.Tasks.Task<bool> SendClassroomNotificationAsync(long ClassroomId, string NotificationMessage);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICpDataService/RegisterNewStudentViaGmail", ReplyAction="http://tempuri.org/ICpDataService/RegisterNewStudentViaGmailResponse")]
        bool RegisterNewStudentViaGmail(string GmailId, string FirstName, string LastName, string UserId, string PhoneNo, string PhoneNoVarificationGuid, string ProfileUrl);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICpDataService/RegisterNewStudentViaGmail", ReplyAction="http://tempuri.org/ICpDataService/RegisterNewStudentViaGmailResponse")]
        System.Threading.Tasks.Task<bool> RegisterNewStudentViaGmailAsync(string GmailId, string FirstName, string LastName, string UserId, string PhoneNo, string PhoneNoVarificationGuid, string ProfileUrl);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICpDataService/CheckGmailUserAlreadyExists", ReplyAction="http://tempuri.org/ICpDataService/CheckGmailUserAlreadyExistsResponse")]
        System.Data.DataSet CheckGmailUserAlreadyExists(string GmailId, string UserId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICpDataService/CheckGmailUserAlreadyExists", ReplyAction="http://tempuri.org/ICpDataService/CheckGmailUserAlreadyExistsResponse")]
        System.Threading.Tasks.Task<System.Data.DataSet> CheckGmailUserAlreadyExistsAsync(string GmailId, string UserId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICpDataService/VarifyStudentPhoneNo", ReplyAction="http://tempuri.org/ICpDataService/VarifyStudentPhoneNoResponse")]
        bool VarifyStudentPhoneNo(string UserId, string Otp, string PhoneNoGuid);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICpDataService/VarifyStudentPhoneNo", ReplyAction="http://tempuri.org/ICpDataService/VarifyStudentPhoneNoResponse")]
        System.Threading.Tasks.Task<bool> VarifyStudentPhoneNoAsync(string UserId, string Otp, string PhoneNoGuid);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICpDataService/UpdateNotificationStatus", ReplyAction="http://tempuri.org/ICpDataService/UpdateNotificationStatusResponse")]
        bool UpdateNotificationStatus(bool Status, long NotificationId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICpDataService/UpdateNotificationStatus", ReplyAction="http://tempuri.org/ICpDataService/UpdateNotificationStatusResponse")]
        System.Threading.Tasks.Task<bool> UpdateNotificationStatusAsync(bool Status, long NotificationId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICpDataService/GetAllNotificationToPrecess", ReplyAction="http://tempuri.org/ICpDataService/GetAllNotificationToPrecessResponse")]
        System.Data.DataSet GetAllNotificationToPrecess(int MaxRetryCount);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICpDataService/GetAllNotificationToPrecess", ReplyAction="http://tempuri.org/ICpDataService/GetAllNotificationToPrecessResponse")]
        System.Threading.Tasks.Task<System.Data.DataSet> GetAllNotificationToPrecessAsync(int MaxRetryCount);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICpDataService/InsertSmsNotification", ReplyAction="http://tempuri.org/ICpDataService/InsertSmsNotificationResponse")]
        bool InsertSmsNotification(int NotificationTypeId, string SmsBody, string ReceiverPhoneNo);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICpDataService/InsertSmsNotification", ReplyAction="http://tempuri.org/ICpDataService/InsertSmsNotificationResponse")]
        System.Threading.Tasks.Task<bool> InsertSmsNotificationAsync(int NotificationTypeId, string SmsBody, string ReceiverPhoneNo);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICpDataService/InsertStudentPasswordRecoveryRequest", ReplyAction="http://tempuri.org/ICpDataService/InsertStudentPasswordRecoveryRequestResponse")]
        bool InsertStudentPasswordRecoveryRequest(string UserId, string Token, string OTP);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICpDataService/InsertStudentPasswordRecoveryRequest", ReplyAction="http://tempuri.org/ICpDataService/InsertStudentPasswordRecoveryRequestResponse")]
        System.Threading.Tasks.Task<bool> InsertStudentPasswordRecoveryRequestAsync(string UserId, string Token, string OTP);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICpDataService/ValidateStudentPasswordRecoveryRequest", ReplyAction="http://tempuri.org/ICpDataService/ValidateStudentPasswordRecoveryRequestResponse")]
        System.Data.DataSet ValidateStudentPasswordRecoveryRequest(string UserId, string Token, string OTP);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICpDataService/ValidateStudentPasswordRecoveryRequest", ReplyAction="http://tempuri.org/ICpDataService/ValidateStudentPasswordRecoveryRequestResponse")]
        System.Threading.Tasks.Task<System.Data.DataSet> ValidateStudentPasswordRecoveryRequestAsync(string UserId, string Token, string OTP);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICpDataService/ChanegPasswordAfterAuthentication", ReplyAction="http://tempuri.org/ICpDataService/ChanegPasswordAfterAuthenticationResponse")]
        bool ChanegPasswordAfterAuthentication(string UserId, string Token, string HashedPassword);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICpDataService/ChanegPasswordAfterAuthentication", ReplyAction="http://tempuri.org/ICpDataService/ChanegPasswordAfterAuthenticationResponse")]
        System.Threading.Tasks.Task<bool> ChanegPasswordAfterAuthenticationAsync(string UserId, string Token, string HashedPassword);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICpDataService/MarkOtpVarified", ReplyAction="http://tempuri.org/ICpDataService/MarkOtpVarifiedResponse")]
        bool MarkOtpVarified(string UserId, string Token);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICpDataService/MarkOtpVarified", ReplyAction="http://tempuri.org/ICpDataService/MarkOtpVarifiedResponse")]
        System.Threading.Tasks.Task<bool> MarkOtpVarifiedAsync(string UserId, string Token);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICpDataService/ValidatePhoneNoVarificationLinkForStudent", ReplyAction="http://tempuri.org/ICpDataService/ValidatePhoneNoVarificationLinkForStudentRespon" +
            "se")]
        bool ValidatePhoneNoVarificationLinkForStudent(string UserId, string guid);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICpDataService/ValidatePhoneNoVarificationLinkForStudent", ReplyAction="http://tempuri.org/ICpDataService/ValidatePhoneNoVarificationLinkForStudentRespon" +
            "se")]
        System.Threading.Tasks.Task<bool> ValidatePhoneNoVarificationLinkForStudentAsync(string UserId, string guid);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICpDataService/ValidatePhoneNoVarificationLinkForInstructor", ReplyAction="http://tempuri.org/ICpDataService/ValidatePhoneNoVarificationLinkForInstructorRes" +
            "ponse")]
        bool ValidatePhoneNoVarificationLinkForInstructor(string UserId, string guid);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICpDataService/ValidatePhoneNoVarificationLinkForInstructor", ReplyAction="http://tempuri.org/ICpDataService/ValidatePhoneNoVarificationLinkForInstructorRes" +
            "ponse")]
        System.Threading.Tasks.Task<bool> ValidatePhoneNoVarificationLinkForInstructorAsync(string UserId, string guid);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICpDataService/InsertInstructorPasswordRecoveryRequest", ReplyAction="http://tempuri.org/ICpDataService/InsertInstructorPasswordRecoveryRequestResponse" +
            "")]
        bool InsertInstructorPasswordRecoveryRequest(string UserId, string Token, string OTP);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICpDataService/InsertInstructorPasswordRecoveryRequest", ReplyAction="http://tempuri.org/ICpDataService/InsertInstructorPasswordRecoveryRequestResponse" +
            "")]
        System.Threading.Tasks.Task<bool> InsertInstructorPasswordRecoveryRequestAsync(string UserId, string Token, string OTP);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICpDataService/ValidateInstructorPasswordRecoveryRequest", ReplyAction="http://tempuri.org/ICpDataService/ValidateInstructorPasswordRecoveryRequestRespon" +
            "se")]
        System.Data.DataSet ValidateInstructorPasswordRecoveryRequest(string UserId, string Token, string OTP);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICpDataService/ValidateInstructorPasswordRecoveryRequest", ReplyAction="http://tempuri.org/ICpDataService/ValidateInstructorPasswordRecoveryRequestRespon" +
            "se")]
        System.Threading.Tasks.Task<System.Data.DataSet> ValidateInstructorPasswordRecoveryRequestAsync(string UserId, string Token, string OTP);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICpDataService/ChangePasswordAfterAuthenticationForInstructor", ReplyAction="http://tempuri.org/ICpDataService/ChangePasswordAfterAuthenticationForInstructorR" +
            "esponse")]
        bool ChangePasswordAfterAuthenticationForInstructor(string UserId, string Token, string HashedPassword);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICpDataService/ChangePasswordAfterAuthenticationForInstructor", ReplyAction="http://tempuri.org/ICpDataService/ChangePasswordAfterAuthenticationForInstructorR" +
            "esponse")]
        System.Threading.Tasks.Task<bool> ChangePasswordAfterAuthenticationForInstructorAsync(string UserId, string Token, string HashedPassword);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICpDataService/MarkPassowordVarificationOtpVarifiedForInstruct" +
            "or", ReplyAction="http://tempuri.org/ICpDataService/MarkPassowordVarificationOtpVarifiedForInstruct" +
            "orResponse")]
        bool MarkPassowordVarificationOtpVarifiedForInstructor(string UserId, string Token);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICpDataService/MarkPassowordVarificationOtpVarifiedForInstruct" +
            "or", ReplyAction="http://tempuri.org/ICpDataService/MarkPassowordVarificationOtpVarifiedForInstruct" +
            "orResponse")]
        System.Threading.Tasks.Task<bool> MarkPassowordVarificationOtpVarifiedForInstructorAsync(string UserId, string Token);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICpDataService/CheckCourseIdExsitsForInstructor", ReplyAction="http://tempuri.org/ICpDataService/CheckCourseIdExsitsForInstructorResponse")]
        System.Data.DataSet CheckCourseIdExsitsForInstructor(int InstructoId, long CourseId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICpDataService/CheckCourseIdExsitsForInstructor", ReplyAction="http://tempuri.org/ICpDataService/CheckCourseIdExsitsForInstructorResponse")]
        System.Threading.Tasks.Task<System.Data.DataSet> CheckCourseIdExsitsForInstructorAsync(int InstructoId, long CourseId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICpDataService/CheckIndexIdExsitsForInstructor", ReplyAction="http://tempuri.org/ICpDataService/CheckIndexIdExsitsForInstructorResponse")]
        System.Data.DataSet CheckIndexIdExsitsForInstructor(int InstructoId, long IndexId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICpDataService/CheckIndexIdExsitsForInstructor", ReplyAction="http://tempuri.org/ICpDataService/CheckIndexIdExsitsForInstructorResponse")]
        System.Threading.Tasks.Task<System.Data.DataSet> CheckIndexIdExsitsForInstructorAsync(int InstructoId, long IndexId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICpDataService/CheckCourseAccess", ReplyAction="http://tempuri.org/ICpDataService/CheckCourseAccessResponse")]
        System.Data.DataSet CheckCourseAccess(long CourseId, string AccessCode);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICpDataService/CheckCourseAccess", ReplyAction="http://tempuri.org/ICpDataService/CheckCourseAccessResponse")]
        System.Threading.Tasks.Task<System.Data.DataSet> CheckCourseAccessAsync(long CourseId, string AccessCode);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICpDataService/CheckTestIdExistsForAnyCourseForInstructor", ReplyAction="http://tempuri.org/ICpDataService/CheckTestIdExistsForAnyCourseForInstructorRespo" +
            "nse")]
        System.Data.DataSet CheckTestIdExistsForAnyCourseForInstructor(long Testid, int InstructorId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICpDataService/CheckTestIdExistsForAnyCourseForInstructor", ReplyAction="http://tempuri.org/ICpDataService/CheckTestIdExistsForAnyCourseForInstructorRespo" +
            "nse")]
        System.Threading.Tasks.Task<System.Data.DataSet> CheckTestIdExistsForAnyCourseForInstructorAsync(long Testid, int InstructorId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICpDataService/CheckAssignmentIdExistsForAnyCourseForInstructo" +
            "r", ReplyAction="http://tempuri.org/ICpDataService/CheckAssignmentIdExistsForAnyCourseForInstructo" +
            "rResponse")]
        System.Data.DataSet CheckAssignmentIdExistsForAnyCourseForInstructor(long AssignmentId, int InstructorId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICpDataService/CheckAssignmentIdExistsForAnyCourseForInstructo" +
            "r", ReplyAction="http://tempuri.org/ICpDataService/CheckAssignmentIdExistsForAnyCourseForInstructo" +
            "rResponse")]
        System.Threading.Tasks.Task<System.Data.DataSet> CheckAssignmentIdExistsForAnyCourseForInstructorAsync(long AssignmentId, int InstructorId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICpDataService/CheckTestIdExistsForInstructor", ReplyAction="http://tempuri.org/ICpDataService/CheckTestIdExistsForInstructorResponse")]
        System.Data.DataSet CheckTestIdExistsForInstructor(long Testid, int InstructorId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICpDataService/CheckTestIdExistsForInstructor", ReplyAction="http://tempuri.org/ICpDataService/CheckTestIdExistsForInstructorResponse")]
        System.Threading.Tasks.Task<System.Data.DataSet> CheckTestIdExistsForInstructorAsync(long Testid, int InstructorId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICpDataService/CheckAssignmentIdExistsForInstructor", ReplyAction="http://tempuri.org/ICpDataService/CheckAssignmentIdExistsForInstructorResponse")]
        System.Data.DataSet CheckAssignmentIdExistsForInstructor(long AssignmentId, int InstructorId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICpDataService/CheckAssignmentIdExistsForInstructor", ReplyAction="http://tempuri.org/ICpDataService/CheckAssignmentIdExistsForInstructorResponse")]
        System.Threading.Tasks.Task<System.Data.DataSet> CheckAssignmentIdExistsForInstructorAsync(long AssignmentId, int InstructorId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICpDataService/InsertCompletedTopicforStudent", ReplyAction="http://tempuri.org/ICpDataService/InsertCompletedTopicforStudentResponse")]
        bool InsertCompletedTopicforStudent(long TopicId, long StudentId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICpDataService/InsertCompletedTopicforStudent", ReplyAction="http://tempuri.org/ICpDataService/InsertCompletedTopicforStudentResponse")]
        System.Threading.Tasks.Task<bool> InsertCompletedTopicforStudentAsync(long TopicId, long StudentId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICpDataService/InsertCourseQuestionByStudent", ReplyAction="http://tempuri.org/ICpDataService/InsertCourseQuestionByStudentResponse")]
        bool InsertCourseQuestionByStudent(long CourseId, long StudentId, string Question);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICpDataService/InsertCourseQuestionByStudent", ReplyAction="http://tempuri.org/ICpDataService/InsertCourseQuestionByStudentResponse")]
        System.Threading.Tasks.Task<bool> InsertCourseQuestionByStudentAsync(long CourseId, long StudentId, string Question);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICpDataService/InsertAnswerForCourseQuestion", ReplyAction="http://tempuri.org/ICpDataService/InsertAnswerForCourseQuestionResponse")]
        bool InsertAnswerForCourseQuestion(long QuestionId, int InstructorId, string Answer);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICpDataService/InsertAnswerForCourseQuestion", ReplyAction="http://tempuri.org/ICpDataService/InsertAnswerForCourseQuestionResponse")]
        System.Threading.Tasks.Task<bool> InsertAnswerForCourseQuestionAsync(long QuestionId, int InstructorId, string Answer);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICpDataService/GetIndexTopicProgressForStudent", ReplyAction="http://tempuri.org/ICpDataService/GetIndexTopicProgressForStudentResponse")]
        System.Data.DataSet GetIndexTopicProgressForStudent(long IndexId, long StudentId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICpDataService/GetIndexTopicProgressForStudent", ReplyAction="http://tempuri.org/ICpDataService/GetIndexTopicProgressForStudentResponse")]
        System.Threading.Tasks.Task<System.Data.DataSet> GetIndexTopicProgressForStudentAsync(long IndexId, long StudentId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICpDataService/GetStudentCourseProgress", ReplyAction="http://tempuri.org/ICpDataService/GetStudentCourseProgressResponse")]
        System.Data.DataSet GetStudentCourseProgress(long CourseId, long StudentId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICpDataService/GetStudentCourseProgress", ReplyAction="http://tempuri.org/ICpDataService/GetStudentCourseProgressResponse")]
        System.Threading.Tasks.Task<System.Data.DataSet> GetStudentCourseProgressAsync(long CourseId, long StudentId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICpDataService/GetStudentAssignmentProgress", ReplyAction="http://tempuri.org/ICpDataService/GetStudentAssignmentProgressResponse")]
        System.Data.DataSet GetStudentAssignmentProgress(long AssignmentId, long StudentId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICpDataService/GetStudentAssignmentProgress", ReplyAction="http://tempuri.org/ICpDataService/GetStudentAssignmentProgressResponse")]
        System.Threading.Tasks.Task<System.Data.DataSet> GetStudentAssignmentProgressAsync(long AssignmentId, long StudentId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICpDataService/GetStudentTestProgress", ReplyAction="http://tempuri.org/ICpDataService/GetStudentTestProgressResponse")]
        System.Data.DataSet GetStudentTestProgress(long TestId, long StudentId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICpDataService/GetStudentTestProgress", ReplyAction="http://tempuri.org/ICpDataService/GetStudentTestProgressResponse")]
        System.Threading.Tasks.Task<System.Data.DataSet> GetStudentTestProgressAsync(long TestId, long StudentId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICpDataService/GetAllQuestionAskForCourseByStudent", ReplyAction="http://tempuri.org/ICpDataService/GetAllQuestionAskForCourseByStudentResponse")]
        System.Data.DataSet GetAllQuestionAskForCourseByStudent(long Studentid, long CourseId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICpDataService/GetAllQuestionAskForCourseByStudent", ReplyAction="http://tempuri.org/ICpDataService/GetAllQuestionAskForCourseByStudentResponse")]
        System.Threading.Tasks.Task<System.Data.DataSet> GetAllQuestionAskForCourseByStudentAsync(long Studentid, long CourseId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICpDataService/GetClassRoomDetailsForInstructor", ReplyAction="http://tempuri.org/ICpDataService/GetClassRoomDetailsForInstructorResponse")]
        System.Data.DataSet GetClassRoomDetailsForInstructor(int InstrcutorId, long ClassRoomId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICpDataService/GetClassRoomDetailsForInstructor", ReplyAction="http://tempuri.org/ICpDataService/GetClassRoomDetailsForInstructorResponse")]
        System.Threading.Tasks.Task<System.Data.DataSet> GetClassRoomDetailsForInstructorAsync(int InstrcutorId, long ClassRoomId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICpDataService/GetAllClassRoomForInstrcutor", ReplyAction="http://tempuri.org/ICpDataService/GetAllClassRoomForInstrcutorResponse")]
        System.Data.DataSet GetAllClassRoomForInstrcutor(int InstrcutorId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICpDataService/GetAllClassRoomForInstrcutor", ReplyAction="http://tempuri.org/ICpDataService/GetAllClassRoomForInstrcutorResponse")]
        System.Threading.Tasks.Task<System.Data.DataSet> GetAllClassRoomForInstrcutorAsync(int InstrcutorId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICpDataService/InsertNewClassRoomForInstructor", ReplyAction="http://tempuri.org/ICpDataService/InsertNewClassRoomForInstructorResponse")]
        long InsertNewClassRoomForInstructor(int InstrcuctorId, string ClassRoomName, string ClassRoomDescription, string BackGroundImageUrl, string ClassroomMeetingName, string ThumbnailSmall, string ThumbnailMedium, int NoOfDemoClassrooms);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICpDataService/InsertNewClassRoomForInstructor", ReplyAction="http://tempuri.org/ICpDataService/InsertNewClassRoomForInstructorResponse")]
        System.Threading.Tasks.Task<long> InsertNewClassRoomForInstructorAsync(int InstrcuctorId, string ClassRoomName, string ClassRoomDescription, string BackGroundImageUrl, string ClassroomMeetingName, string ThumbnailSmall, string ThumbnailMedium, int NoOfDemoClassrooms);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICpDataService/InertNewPostToClassroom", ReplyAction="http://tempuri.org/ICpDataService/InertNewPostToClassroomResponse")]
        bool InertNewPostToClassroom(long ClassroomId, string Post);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICpDataService/InertNewPostToClassroom", ReplyAction="http://tempuri.org/ICpDataService/InertNewPostToClassroomResponse")]
        System.Threading.Tasks.Task<bool> InertNewPostToClassroomAsync(long ClassroomId, string Post);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICpDataService/InertNewMeetingToClassroom", ReplyAction="http://tempuri.org/ICpDataService/InertNewMeetingToClassroomResponse")]
        bool InertNewMeetingToClassroom(long ClassroomId, string MeetingName, string MeetingPassword);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICpDataService/InertNewMeetingToClassroom", ReplyAction="http://tempuri.org/ICpDataService/InertNewMeetingToClassroomResponse")]
        System.Threading.Tasks.Task<bool> InertNewMeetingToClassroomAsync(long ClassroomId, string MeetingName, string MeetingPassword);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICpDataService/GetMeetingDetailsOfClassroom", ReplyAction="http://tempuri.org/ICpDataService/GetMeetingDetailsOfClassroomResponse")]
        System.Data.DataSet GetMeetingDetailsOfClassroom(long ClassRoomId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICpDataService/GetMeetingDetailsOfClassroom", ReplyAction="http://tempuri.org/ICpDataService/GetMeetingDetailsOfClassroomResponse")]
        System.Threading.Tasks.Task<System.Data.DataSet> GetMeetingDetailsOfClassroomAsync(long ClassRoomId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICpDataService/ActivateClassroom", ReplyAction="http://tempuri.org/ICpDataService/ActivateClassroomResponse")]
        bool ActivateClassroom(long ClassroomId, string ShareCode, string ShareUrl, int ClassroomPublicType, int ClassroomJoiningAmountInPaise, string StartTime, string ArrayOpeningDays, int NofDemoClasses, int Category, int Level);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICpDataService/ActivateClassroom", ReplyAction="http://tempuri.org/ICpDataService/ActivateClassroomResponse")]
        System.Threading.Tasks.Task<bool> ActivateClassroomAsync(long ClassroomId, string ShareCode, string ShareUrl, int ClassroomPublicType, int ClassroomJoiningAmountInPaise, string StartTime, string ArrayOpeningDays, int NofDemoClasses, int Category, int Level);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICpDataService/GetClasroomDetails", ReplyAction="http://tempuri.org/ICpDataService/GetClasroomDetailsResponse")]
        System.Data.DataSet GetClasroomDetails(long ClassRoomId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICpDataService/GetClasroomDetails", ReplyAction="http://tempuri.org/ICpDataService/GetClasroomDetailsResponse")]
        System.Threading.Tasks.Task<System.Data.DataSet> GetClasroomDetailsAsync(long ClassRoomId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICpDataService/JoinStudentToClassroom", ReplyAction="http://tempuri.org/ICpDataService/JoinStudentToClassroomResponse")]
        bool JoinStudentToClassroom(long ClassroomId, long StudentId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICpDataService/JoinStudentToClassroom", ReplyAction="http://tempuri.org/ICpDataService/JoinStudentToClassroomResponse")]
        System.Threading.Tasks.Task<bool> JoinStudentToClassroomAsync(long ClassroomId, long StudentId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICpDataService/GetJoinedClassroomForStudent", ReplyAction="http://tempuri.org/ICpDataService/GetJoinedClassroomForStudentResponse")]
        System.Data.DataSet GetJoinedClassroomForStudent(long StudentId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICpDataService/GetJoinedClassroomForStudent", ReplyAction="http://tempuri.org/ICpDataService/GetJoinedClassroomForStudentResponse")]
        System.Threading.Tasks.Task<System.Data.DataSet> GetJoinedClassroomForStudentAsync(long StudentId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICpDataService/JoinStudentToMeeting", ReplyAction="http://tempuri.org/ICpDataService/JoinStudentToMeetingResponse")]
        bool JoinStudentToMeeting(long MeetingId, long StudentId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICpDataService/JoinStudentToMeeting", ReplyAction="http://tempuri.org/ICpDataService/JoinStudentToMeetingResponse")]
        System.Threading.Tasks.Task<bool> JoinStudentToMeetingAsync(long MeetingId, long StudentId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICpDataService/ReportMeetingLeftForStudent", ReplyAction="http://tempuri.org/ICpDataService/ReportMeetingLeftForStudentResponse")]
        bool ReportMeetingLeftForStudent(long MeetingId, long StudentId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICpDataService/ReportMeetingLeftForStudent", ReplyAction="http://tempuri.org/ICpDataService/ReportMeetingLeftForStudentResponse")]
        System.Threading.Tasks.Task<bool> ReportMeetingLeftForStudentAsync(long MeetingId, long StudentId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICpDataService/ReportMeetingLeftForHost", ReplyAction="http://tempuri.org/ICpDataService/ReportMeetingLeftForHostResponse")]
        bool ReportMeetingLeftForHost(long MeetingId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICpDataService/ReportMeetingLeftForHost", ReplyAction="http://tempuri.org/ICpDataService/ReportMeetingLeftForHostResponse")]
        System.Threading.Tasks.Task<bool> ReportMeetingLeftForHostAsync(long MeetingId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICpDataService/GetAllMeetingForClassroom", ReplyAction="http://tempuri.org/ICpDataService/GetAllMeetingForClassroomResponse")]
        System.Data.DataSet GetAllMeetingForClassroom(long ClassroomId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICpDataService/GetAllMeetingForClassroom", ReplyAction="http://tempuri.org/ICpDataService/GetAllMeetingForClassroomResponse")]
        System.Threading.Tasks.Task<System.Data.DataSet> GetAllMeetingForClassroomAsync(long ClassroomId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICpDataService/CheckClassroomAccess", ReplyAction="http://tempuri.org/ICpDataService/CheckClassroomAccessResponse")]
        System.Data.DataSet CheckClassroomAccess(long ClassroomId, string AccessCode);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICpDataService/CheckClassroomAccess", ReplyAction="http://tempuri.org/ICpDataService/CheckClassroomAccessResponse")]
        System.Threading.Tasks.Task<System.Data.DataSet> CheckClassroomAccessAsync(long ClassroomId, string AccessCode);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICpDataService/GetAllStudentsJoinedToClassroom", ReplyAction="http://tempuri.org/ICpDataService/GetAllStudentsJoinedToClassroomResponse")]
        System.Data.DataSet GetAllStudentsJoinedToClassroom(long ClassroomId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICpDataService/GetAllStudentsJoinedToClassroom", ReplyAction="http://tempuri.org/ICpDataService/GetAllStudentsJoinedToClassroomResponse")]
        System.Threading.Tasks.Task<System.Data.DataSet> GetAllStudentsJoinedToClassroomAsync(long ClassroomId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICpDataService/CheckInstructorClassroomAccess", ReplyAction="http://tempuri.org/ICpDataService/CheckInstructorClassroomAccessResponse")]
        System.Data.DataSet CheckInstructorClassroomAccess(long ClassroomId, int InstructorId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICpDataService/CheckInstructorClassroomAccess", ReplyAction="http://tempuri.org/ICpDataService/CheckInstructorClassroomAccessResponse")]
        System.Threading.Tasks.Task<System.Data.DataSet> CheckInstructorClassroomAccessAsync(long ClassroomId, int InstructorId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICpDataService/CheckStudentClassroomAccess", ReplyAction="http://tempuri.org/ICpDataService/CheckStudentClassroomAccessResponse")]
        System.Data.DataSet CheckStudentClassroomAccess(long ClassroomId, long StudentId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICpDataService/CheckStudentClassroomAccess", ReplyAction="http://tempuri.org/ICpDataService/CheckStudentClassroomAccessResponse")]
        System.Threading.Tasks.Task<System.Data.DataSet> CheckStudentClassroomAccessAsync(long ClassroomId, long StudentId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICpDataService/GetAllStudentsJoinedToMeeting", ReplyAction="http://tempuri.org/ICpDataService/GetAllStudentsJoinedToMeetingResponse")]
        System.Data.DataSet GetAllStudentsJoinedToMeeting(long ClassroomId, long MeetingId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICpDataService/GetAllStudentsJoinedToMeeting", ReplyAction="http://tempuri.org/ICpDataService/GetAllStudentsJoinedToMeetingResponse")]
        System.Threading.Tasks.Task<System.Data.DataSet> GetAllStudentsJoinedToMeetingAsync(long ClassroomId, long MeetingId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICpDataService/InsertNewStudentClassroomMessage", ReplyAction="http://tempuri.org/ICpDataService/InsertNewStudentClassroomMessageResponse")]
        bool InsertNewStudentClassroomMessage(long ClassroomId, string Message, long StudentId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICpDataService/InsertNewStudentClassroomMessage", ReplyAction="http://tempuri.org/ICpDataService/InsertNewStudentClassroomMessageResponse")]
        System.Threading.Tasks.Task<bool> InsertNewStudentClassroomMessageAsync(long ClassroomId, string Message, long StudentId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICpDataService/InsertNewInstructorClassroomMessage", ReplyAction="http://tempuri.org/ICpDataService/InsertNewInstructorClassroomMessageResponse")]
        bool InsertNewInstructorClassroomMessage(long ClassroomId, string Message);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICpDataService/InsertNewInstructorClassroomMessage", ReplyAction="http://tempuri.org/ICpDataService/InsertNewInstructorClassroomMessageResponse")]
        System.Threading.Tasks.Task<bool> InsertNewInstructorClassroomMessageAsync(long ClassroomId, string Message);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICpDataService/GetAllClassroomMessage", ReplyAction="http://tempuri.org/ICpDataService/GetAllClassroomMessageResponse")]
        System.Data.DataSet GetAllClassroomMessage(long ClassroomId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICpDataService/GetAllClassroomMessage", ReplyAction="http://tempuri.org/ICpDataService/GetAllClassroomMessageResponse")]
        System.Threading.Tasks.Task<System.Data.DataSet> GetAllClassroomMessageAsync(long ClassroomId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICpDataService/GetAllClassroomMessageAfterLastMessage", ReplyAction="http://tempuri.org/ICpDataService/GetAllClassroomMessageAfterLastMessageResponse")]
        System.Data.DataSet GetAllClassroomMessageAfterLastMessage(long ClassroomId, long LastMessageId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICpDataService/GetAllClassroomMessageAfterLastMessage", ReplyAction="http://tempuri.org/ICpDataService/GetAllClassroomMessageAfterLastMessageResponse")]
        System.Threading.Tasks.Task<System.Data.DataSet> GetAllClassroomMessageAfterLastMessageAsync(long ClassroomId, long LastMessageId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICpDataService/UpdateClassroomDetails", ReplyAction="http://tempuri.org/ICpDataService/UpdateClassroomDetailsResponse")]
        bool UpdateClassroomDetails(long ClassroomId, string ClassroomName, string ClassroomDescription, System.Nullable<System.DateTime> classroomStartDate, System.Nullable<System.DateTime> classroomRegistrationCloseDate, int NoOfDemoSessions);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICpDataService/UpdateClassroomDetails", ReplyAction="http://tempuri.org/ICpDataService/UpdateClassroomDetailsResponse")]
        System.Threading.Tasks.Task<bool> UpdateClassroomDetailsAsync(long ClassroomId, string ClassroomName, string ClassroomDescription, System.Nullable<System.DateTime> classroomStartDate, System.Nullable<System.DateTime> classroomRegistrationCloseDate, int NoOfDemoSessions);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICpDataService/DeleteClassroom", ReplyAction="http://tempuri.org/ICpDataService/DeleteClassroomResponse")]
        bool DeleteClassroom(long ClassroomId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICpDataService/DeleteClassroom", ReplyAction="http://tempuri.org/ICpDataService/DeleteClassroomResponse")]
        System.Threading.Tasks.Task<bool> DeleteClassroomAsync(long ClassroomId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICpDataService/AddNewAssignmentToClassroom", ReplyAction="http://tempuri.org/ICpDataService/AddNewAssignmentToClassroomResponse")]
        bool AddNewAssignmentToClassroom(long ClassroomId, long AssignmentId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICpDataService/AddNewAssignmentToClassroom", ReplyAction="http://tempuri.org/ICpDataService/AddNewAssignmentToClassroomResponse")]
        System.Threading.Tasks.Task<bool> AddNewAssignmentToClassroomAsync(long ClassroomId, long AssignmentId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICpDataService/GetAllClassroomAssignments", ReplyAction="http://tempuri.org/ICpDataService/GetAllClassroomAssignmentsResponse")]
        System.Data.DataSet GetAllClassroomAssignments(long ClassroomId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICpDataService/GetAllClassroomAssignments", ReplyAction="http://tempuri.org/ICpDataService/GetAllClassroomAssignmentsResponse")]
        System.Threading.Tasks.Task<System.Data.DataSet> GetAllClassroomAssignmentsAsync(long ClassroomId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICpDataService/DeleteClassroomAssignment", ReplyAction="http://tempuri.org/ICpDataService/DeleteClassroomAssignmentResponse")]
        bool DeleteClassroomAssignment(long ClassroomId, long AssignmentId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICpDataService/DeleteClassroomAssignment", ReplyAction="http://tempuri.org/ICpDataService/DeleteClassroomAssignmentResponse")]
        System.Threading.Tasks.Task<bool> DeleteClassroomAssignmentAsync(long ClassroomId, long AssignmentId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICpDataService/DeleteClassroomTest", ReplyAction="http://tempuri.org/ICpDataService/DeleteClassroomTestResponse")]
        bool DeleteClassroomTest(long ClassroomId, long TestId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICpDataService/DeleteClassroomTest", ReplyAction="http://tempuri.org/ICpDataService/DeleteClassroomTestResponse")]
        System.Threading.Tasks.Task<bool> DeleteClassroomTestAsync(long ClassroomId, long TestId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICpDataService/AddNewTestToClassroom", ReplyAction="http://tempuri.org/ICpDataService/AddNewTestToClassroomResponse")]
        bool AddNewTestToClassroom(long ClassroomId, long TestId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICpDataService/AddNewTestToClassroom", ReplyAction="http://tempuri.org/ICpDataService/AddNewTestToClassroomResponse")]
        System.Threading.Tasks.Task<bool> AddNewTestToClassroomAsync(long ClassroomId, long TestId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICpDataService/GetAllClassroomTest", ReplyAction="http://tempuri.org/ICpDataService/GetAllClassroomTestResponse")]
        System.Data.DataSet GetAllClassroomTest(long ClassroomId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICpDataService/GetAllClassroomTest", ReplyAction="http://tempuri.org/ICpDataService/GetAllClassroomTestResponse")]
        System.Threading.Tasks.Task<System.Data.DataSet> GetAllClassroomTestAsync(long ClassroomId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICpDataService/GetAllClassroomMeetingForStudent", ReplyAction="http://tempuri.org/ICpDataService/GetAllClassroomMeetingForStudentResponse")]
        System.Data.DataSet GetAllClassroomMeetingForStudent(long ClassroomId, long StudentId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICpDataService/GetAllClassroomMeetingForStudent", ReplyAction="http://tempuri.org/ICpDataService/GetAllClassroomMeetingForStudentResponse")]
        System.Threading.Tasks.Task<System.Data.DataSet> GetAllClassroomMeetingForStudentAsync(long ClassroomId, long StudentId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICpDataService/GetAllClassroomAssignmntForStudent", ReplyAction="http://tempuri.org/ICpDataService/GetAllClassroomAssignmntForStudentResponse")]
        System.Data.DataSet GetAllClassroomAssignmntForStudent(long ClassroomId, long StudentId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICpDataService/GetAllClassroomAssignmntForStudent", ReplyAction="http://tempuri.org/ICpDataService/GetAllClassroomAssignmntForStudentResponse")]
        System.Threading.Tasks.Task<System.Data.DataSet> GetAllClassroomAssignmntForStudentAsync(long ClassroomId, long StudentId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICpDataService/GetAllClassroomAssignmentSubmissionsForStudent", ReplyAction="http://tempuri.org/ICpDataService/GetAllClassroomAssignmentSubmissionsForStudentR" +
            "esponse")]
        System.Data.DataSet GetAllClassroomAssignmentSubmissionsForStudent(long ClassroomId, long StudentId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICpDataService/GetAllClassroomAssignmentSubmissionsForStudent", ReplyAction="http://tempuri.org/ICpDataService/GetAllClassroomAssignmentSubmissionsForStudentR" +
            "esponse")]
        System.Threading.Tasks.Task<System.Data.DataSet> GetAllClassroomAssignmentSubmissionsForStudentAsync(long ClassroomId, long StudentId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICpDataService/GetAllClassroomTestSubmissionsForStudent", ReplyAction="http://tempuri.org/ICpDataService/GetAllClassroomTestSubmissionsForStudentRespons" +
            "e")]
        System.Data.DataSet GetAllClassroomTestSubmissionsForStudent(long ClassroomId, long StudentId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICpDataService/GetAllClassroomTestSubmissionsForStudent", ReplyAction="http://tempuri.org/ICpDataService/GetAllClassroomTestSubmissionsForStudentRespons" +
            "e")]
        System.Threading.Tasks.Task<System.Data.DataSet> GetAllClassroomTestSubmissionsForStudentAsync(long ClassroomId, long StudentId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICpDataService/GetAllClassroomTestForStudent", ReplyAction="http://tempuri.org/ICpDataService/GetAllClassroomTestForStudentResponse")]
        System.Data.DataSet GetAllClassroomTestForStudent(long ClassroomId, long StudentId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICpDataService/GetAllClassroomTestForStudent", ReplyAction="http://tempuri.org/ICpDataService/GetAllClassroomTestForStudentResponse")]
        System.Threading.Tasks.Task<System.Data.DataSet> GetAllClassroomTestForStudentAsync(long ClassroomId, long StudentId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICpDataService/DeleteMcqTestQuestion", ReplyAction="http://tempuri.org/ICpDataService/DeleteMcqTestQuestionResponse")]
        bool DeleteMcqTestQuestion(long QuestionId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICpDataService/DeleteMcqTestQuestion", ReplyAction="http://tempuri.org/ICpDataService/DeleteMcqTestQuestionResponse")]
        System.Threading.Tasks.Task<bool> DeleteMcqTestQuestionAsync(long QuestionId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICpDataService/GetAllAssignmentsForCourse", ReplyAction="http://tempuri.org/ICpDataService/GetAllAssignmentsForCourseResponse")]
        System.Data.DataSet GetAllAssignmentsForCourse(long CourseId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICpDataService/GetAllAssignmentsForCourse", ReplyAction="http://tempuri.org/ICpDataService/GetAllAssignmentsForCourseResponse")]
        System.Threading.Tasks.Task<System.Data.DataSet> GetAllAssignmentsForCourseAsync(long CourseId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICpDataService/DeleteTestOfCourse", ReplyAction="http://tempuri.org/ICpDataService/DeleteTestOfCourseResponse")]
        bool DeleteTestOfCourse(long TestId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICpDataService/DeleteTestOfCourse", ReplyAction="http://tempuri.org/ICpDataService/DeleteTestOfCourseResponse")]
        System.Threading.Tasks.Task<bool> DeleteTestOfCourseAsync(long TestId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICpDataService/DeleteInpependentAssignment", ReplyAction="http://tempuri.org/ICpDataService/DeleteInpependentAssignmentResponse")]
        bool DeleteInpependentAssignment(long AssignmentId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICpDataService/DeleteInpependentAssignment", ReplyAction="http://tempuri.org/ICpDataService/DeleteInpependentAssignmentResponse")]
        System.Threading.Tasks.Task<bool> DeleteInpependentAssignmentAsync(long AssignmentId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICpDataService/DeleteIndepenetTest", ReplyAction="http://tempuri.org/ICpDataService/DeleteIndepenetTestResponse")]
        bool DeleteIndepenetTest(long TestId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICpDataService/DeleteIndepenetTest", ReplyAction="http://tempuri.org/ICpDataService/DeleteIndepenetTestResponse")]
        System.Threading.Tasks.Task<bool> DeleteIndepenetTestAsync(long TestId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICpDataService/InsertSubjectiveAssignmentQuestion", ReplyAction="http://tempuri.org/ICpDataService/InsertSubjectiveAssignmentQuestionResponse")]
        bool InsertSubjectiveAssignmentQuestion(long AssignmentId, string QuestionStatement, string Hint);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICpDataService/InsertSubjectiveAssignmentQuestion", ReplyAction="http://tempuri.org/ICpDataService/InsertSubjectiveAssignmentQuestionResponse")]
        System.Threading.Tasks.Task<bool> InsertSubjectiveAssignmentQuestionAsync(long AssignmentId, string QuestionStatement, string Hint);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICpDataService/DeleteSubjectiveAssignmentQuestion", ReplyAction="http://tempuri.org/ICpDataService/DeleteSubjectiveAssignmentQuestionResponse")]
        bool DeleteSubjectiveAssignmentQuestion(long AssignmentId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICpDataService/DeleteSubjectiveAssignmentQuestion", ReplyAction="http://tempuri.org/ICpDataService/DeleteSubjectiveAssignmentQuestionResponse")]
        System.Threading.Tasks.Task<bool> DeleteSubjectiveAssignmentQuestionAsync(long AssignmentId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICpDataService/DeleteSubjectiveAssignmentOfCourse", ReplyAction="http://tempuri.org/ICpDataService/DeleteSubjectiveAssignmentOfCourseResponse")]
        bool DeleteSubjectiveAssignmentOfCourse(long AssignmentId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICpDataService/DeleteSubjectiveAssignmentOfCourse", ReplyAction="http://tempuri.org/ICpDataService/DeleteSubjectiveAssignmentOfCourseResponse")]
        System.Threading.Tasks.Task<bool> DeleteSubjectiveAssignmentOfCourseAsync(long AssignmentId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICpDataService/UpdateSubjectiveAssignmentQuestion", ReplyAction="http://tempuri.org/ICpDataService/UpdateSubjectiveAssignmentQuestionResponse")]
        bool UpdateSubjectiveAssignmentQuestion(long QuestionId, string QuestionStatement, string Hint);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICpDataService/UpdateSubjectiveAssignmentQuestion", ReplyAction="http://tempuri.org/ICpDataService/UpdateSubjectiveAssignmentQuestionResponse")]
        System.Threading.Tasks.Task<bool> UpdateSubjectiveAssignmentQuestionAsync(long QuestionId, string QuestionStatement, string Hint);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICpDataService/GetAllQuestionsOfSubjectiveAssignment", ReplyAction="http://tempuri.org/ICpDataService/GetAllQuestionsOfSubjectiveAssignmentResponse")]
        System.Data.DataSet GetAllQuestionsOfSubjectiveAssignment(long AssignmentId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICpDataService/GetAllQuestionsOfSubjectiveAssignment", ReplyAction="http://tempuri.org/ICpDataService/GetAllQuestionsOfSubjectiveAssignmentResponse")]
        System.Threading.Tasks.Task<System.Data.DataSet> GetAllQuestionsOfSubjectiveAssignmentAsync(long AssignmentId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICpDataService/RegisterNewStudent", ReplyAction="http://tempuri.org/ICpDataService/RegisterNewStudentResponse")]
        bool RegisterNewStudent(string FirstName, string LastName, string UserId, string HashedPassword, string PhoneNo, string PhoneNoVerificationGuid, string EmailIdVerificationGuid);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICpDataService/RegisterNewStudent", ReplyAction="http://tempuri.org/ICpDataService/RegisterNewStudentResponse")]
        System.Threading.Tasks.Task<bool> RegisterNewStudentAsync(string FirstName, string LastName, string UserId, string HashedPassword, string PhoneNo, string PhoneNoVerificationGuid, string EmailIdVerificationGuid);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICpDataService/ValidateStudentLogin", ReplyAction="http://tempuri.org/ICpDataService/ValidateStudentLoginResponse")]
        StudentDashboard.CPDataService.ValidateStudentLoginResponse ValidateStudentLogin(StudentDashboard.CPDataService.ValidateStudentLoginRequest request);
        
        // CODEGEN: Generating message contract since the operation has multiple return values.
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICpDataService/ValidateStudentLogin", ReplyAction="http://tempuri.org/ICpDataService/ValidateStudentLoginResponse")]
        System.Threading.Tasks.Task<StudentDashboard.CPDataService.ValidateStudentLoginResponse> ValidateStudentLoginAsync(StudentDashboard.CPDataService.ValidateStudentLoginRequest request);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICpDataService/InsertActivityForStudent", ReplyAction="http://tempuri.org/ICpDataService/InsertActivityForStudentResponse")]
        bool InsertActivityForStudent(string ActivityMessage, long StudentId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICpDataService/InsertActivityForStudent", ReplyAction="http://tempuri.org/ICpDataService/InsertActivityForStudentResponse")]
        System.Threading.Tasks.Task<bool> InsertActivityForStudentAsync(string ActivityMessage, long StudentId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICpDataService/JoinStudentToCourse", ReplyAction="http://tempuri.org/ICpDataService/JoinStudentToCourseResponse")]
        bool JoinStudentToCourse(long CourseId, long StudentId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICpDataService/JoinStudentToCourse", ReplyAction="http://tempuri.org/ICpDataService/JoinStudentToCourseResponse")]
        System.Threading.Tasks.Task<bool> JoinStudentToCourseAsync(long CourseId, long StudentId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICpDataService/SearchForCourse", ReplyAction="http://tempuri.org/ICpDataService/SearchForCourseResponse")]
        System.Data.DataSet SearchForCourse(string SerachString, int MaxRowToReturn, int NoOfRowsFetch, int SortType);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICpDataService/SearchForCourse", ReplyAction="http://tempuri.org/ICpDataService/SearchForCourseResponse")]
        System.Threading.Tasks.Task<System.Data.DataSet> SearchForCourseAsync(string SerachString, int MaxRowToReturn, int NoOfRowsFetch, int SortType);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICpDataService/GetStudentDetails", ReplyAction="http://tempuri.org/ICpDataService/GetStudentDetailsResponse")]
        System.Data.DataSet GetStudentDetails(long StudentId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICpDataService/GetStudentDetails", ReplyAction="http://tempuri.org/ICpDataService/GetStudentDetailsResponse")]
        System.Threading.Tasks.Task<System.Data.DataSet> GetStudentDetailsAsync(long StudentId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICpDataService/GetStudentIdFromUserId", ReplyAction="http://tempuri.org/ICpDataService/GetStudentIdFromUserIdResponse")]
        StudentDashboard.CPDataService.GetStudentIdFromUserIdResponse GetStudentIdFromUserId(StudentDashboard.CPDataService.GetStudentIdFromUserIdRequest request);
        
        // CODEGEN: Generating message contract since the operation has multiple return values.
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICpDataService/GetStudentIdFromUserId", ReplyAction="http://tempuri.org/ICpDataService/GetStudentIdFromUserIdResponse")]
        System.Threading.Tasks.Task<StudentDashboard.CPDataService.GetStudentIdFromUserIdResponse> GetStudentIdFromUserIdAsync(StudentDashboard.CPDataService.GetStudentIdFromUserIdRequest request);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICpDataService/UpdateStudentDetails", ReplyAction="http://tempuri.org/ICpDataService/UpdateStudentDetailsResponse")]
        bool UpdateStudentDetails(string FirstName, string LastName, string AddressLine1, string AddressLine2, string PinCode, System.Nullable<int> StateId, System.Nullable<int> CityId, string Gender, long StudentId, string PhoneNo);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICpDataService/UpdateStudentDetails", ReplyAction="http://tempuri.org/ICpDataService/UpdateStudentDetailsResponse")]
        System.Threading.Tasks.Task<bool> UpdateStudentDetailsAsync(string FirstName, string LastName, string AddressLine1, string AddressLine2, string PinCode, System.Nullable<int> StateId, System.Nullable<int> CityId, string Gender, long StudentId, string PhoneNo);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICpDataService/UpdateStudentPassword", ReplyAction="http://tempuri.org/ICpDataService/UpdateStudentPasswordResponse")]
        bool UpdateStudentPassword(long StudentId, string OldHashedPassword, string NewHashedPassword);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICpDataService/UpdateStudentPassword", ReplyAction="http://tempuri.org/ICpDataService/UpdateStudentPasswordResponse")]
        System.Threading.Tasks.Task<bool> UpdateStudentPasswordAsync(long StudentId, string OldHashedPassword, string NewHashedPassword);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICpDataService/SearchForTest", ReplyAction="http://tempuri.org/ICpDataService/SearchForTestResponse")]
        System.Data.DataSet SearchForTest(string SerachString, int MaxRowToReturn, long LastFetchedId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICpDataService/SearchForTest", ReplyAction="http://tempuri.org/ICpDataService/SearchForTestResponse")]
        System.Threading.Tasks.Task<System.Data.DataSet> SearchForTestAsync(string SerachString, int MaxRowToReturn, long LastFetchedId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICpDataService/SearchForAssignment", ReplyAction="http://tempuri.org/ICpDataService/SearchForAssignmentResponse")]
        System.Data.DataSet SearchForAssignment(string SerachString, int MaxRowToReturn, long LastFetchedId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICpDataService/SearchForAssignment", ReplyAction="http://tempuri.org/ICpDataService/SearchForAssignmentResponse")]
        System.Threading.Tasks.Task<System.Data.DataSet> SearchForAssignmentAsync(string SerachString, int MaxRowToReturn, long LastFetchedId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICpDataService/SearchForInstructor", ReplyAction="http://tempuri.org/ICpDataService/SearchForInstructorResponse")]
        System.Data.DataSet SearchForInstructor(string SerachString, int MaxRowToReturn);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICpDataService/SearchForInstructor", ReplyAction="http://tempuri.org/ICpDataService/SearchForInstructorResponse")]
        System.Threading.Tasks.Task<System.Data.DataSet> SearchForInstructorAsync(string SerachString, int MaxRowToReturn);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICpDataService/GetJoinedCoursesForStudent", ReplyAction="http://tempuri.org/ICpDataService/GetJoinedCoursesForStudentResponse")]
        System.Data.DataSet GetJoinedCoursesForStudent(long StudentId, string SearchString, int MaxRowCountToReturn);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICpDataService/GetJoinedCoursesForStudent", ReplyAction="http://tempuri.org/ICpDataService/GetJoinedCoursesForStudentResponse")]
        System.Threading.Tasks.Task<System.Data.DataSet> GetJoinedCoursesForStudentAsync(long StudentId, string SearchString, int MaxRowCountToReturn);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICpDataService/JoinStudentToInstructor", ReplyAction="http://tempuri.org/ICpDataService/JoinStudentToInstructorResponse")]
        bool JoinStudentToInstructor(long StudentId, int InstructorId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICpDataService/JoinStudentToInstructor", ReplyAction="http://tempuri.org/ICpDataService/JoinStudentToInstructorResponse")]
        System.Threading.Tasks.Task<bool> JoinStudentToInstructorAsync(long StudentId, int InstructorId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICpDataService/GetAllJoinedInstructorForStudent", ReplyAction="http://tempuri.org/ICpDataService/GetAllJoinedInstructorForStudentResponse")]
        System.Data.DataSet GetAllJoinedInstructorForStudent(long StudentId, string SearchString, int MaxRowCount);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICpDataService/GetAllJoinedInstructorForStudent", ReplyAction="http://tempuri.org/ICpDataService/GetAllJoinedInstructorForStudentResponse")]
        System.Threading.Tasks.Task<System.Data.DataSet> GetAllJoinedInstructorForStudentAsync(long StudentId, string SearchString, int MaxRowCount);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICpDataService/InsertAssignmentResponse", ReplyAction="http://tempuri.org/ICpDataService/InsertAssignmentResponseResponse")]
        StudentDashboard.CPDataService.InsertAssignmentResponseResponse InsertAssignmentResponse(StudentDashboard.CPDataService.InsertAssignmentResponseRequest request);
        
        // CODEGEN: Generating message contract since the operation has multiple return values.
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICpDataService/InsertAssignmentResponse", ReplyAction="http://tempuri.org/ICpDataService/InsertAssignmentResponseResponse")]
        System.Threading.Tasks.Task<StudentDashboard.CPDataService.InsertAssignmentResponseResponse> InsertAssignmentResponseAsync(StudentDashboard.CPDataService.InsertAssignmentResponseRequest request);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICpDataService/InsertAssignmentFeedback", ReplyAction="http://tempuri.org/ICpDataService/InsertAssignmentFeedbackResponse")]
        bool InsertAssignmentFeedback(long SubmissionId, string FeedBack, int Rating);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICpDataService/InsertAssignmentFeedback", ReplyAction="http://tempuri.org/ICpDataService/InsertAssignmentFeedbackResponse")]
        System.Threading.Tasks.Task<bool> InsertAssignmentFeedbackAsync(long SubmissionId, string FeedBack, int Rating);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICpDataService/GetAllAssignmentSubmissionsForStudent", ReplyAction="http://tempuri.org/ICpDataService/GetAllAssignmentSubmissionsForStudentResponse")]
        System.Data.DataSet GetAllAssignmentSubmissionsForStudent(long StudentId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICpDataService/GetAllAssignmentSubmissionsForStudent", ReplyAction="http://tempuri.org/ICpDataService/GetAllAssignmentSubmissionsForStudentResponse")]
        System.Threading.Tasks.Task<System.Data.DataSet> GetAllAssignmentSubmissionsForStudentAsync(long StudentId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICpDataService/GetAssignmentResponse", ReplyAction="http://tempuri.org/ICpDataService/GetAssignmentResponseResponse")]
        System.Data.DataSet GetAssignmentResponse(long SubmissionId, long StudentId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICpDataService/GetAssignmentResponse", ReplyAction="http://tempuri.org/ICpDataService/GetAssignmentResponseResponse")]
        System.Threading.Tasks.Task<System.Data.DataSet> GetAssignmentResponseAsync(long SubmissionId, long StudentId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICpDataService/InsertTestResponse", ReplyAction="http://tempuri.org/ICpDataService/InsertTestResponseResponse")]
        StudentDashboard.CPDataService.InsertTestResponseResponse InsertTestResponse(StudentDashboard.CPDataService.InsertTestResponseRequest request);
        
        // CODEGEN: Generating message contract since the operation has multiple return values.
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICpDataService/InsertTestResponse", ReplyAction="http://tempuri.org/ICpDataService/InsertTestResponseResponse")]
        System.Threading.Tasks.Task<StudentDashboard.CPDataService.InsertTestResponseResponse> InsertTestResponseAsync(StudentDashboard.CPDataService.InsertTestResponseRequest request);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICpDataService/GetTestResponse", ReplyAction="http://tempuri.org/ICpDataService/GetTestResponseResponse")]
        System.Data.DataSet GetTestResponse(long SubmissionId, long StudentId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICpDataService/GetTestResponse", ReplyAction="http://tempuri.org/ICpDataService/GetTestResponseResponse")]
        System.Threading.Tasks.Task<System.Data.DataSet> GetTestResponseAsync(long SubmissionId, long StudentId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICpDataService/GetAllTestSubmissionsForStudent", ReplyAction="http://tempuri.org/ICpDataService/GetAllTestSubmissionsForStudentResponse")]
        System.Data.DataSet GetAllTestSubmissionsForStudent(long StudentId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICpDataService/GetAllTestSubmissionsForStudent", ReplyAction="http://tempuri.org/ICpDataService/GetAllTestSubmissionsForStudentResponse")]
        System.Threading.Tasks.Task<System.Data.DataSet> GetAllTestSubmissionsForStudentAsync(long StudentId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICpDataService/GetStudentHomeDetails", ReplyAction="http://tempuri.org/ICpDataService/GetStudentHomeDetailsResponse")]
        System.Data.DataSet GetStudentHomeDetails(long StudentId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICpDataService/GetStudentHomeDetails", ReplyAction="http://tempuri.org/ICpDataService/GetStudentHomeDetailsResponse")]
        System.Threading.Tasks.Task<System.Data.DataSet> GetStudentHomeDetailsAsync(long StudentId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICpDataService/GetTestsOfCourse", ReplyAction="http://tempuri.org/ICpDataService/GetTestsOfCourseResponse")]
        System.Data.DataSet GetTestsOfCourse(long CourseId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICpDataService/GetTestsOfCourse", ReplyAction="http://tempuri.org/ICpDataService/GetTestsOfCourseResponse")]
        System.Threading.Tasks.Task<System.Data.DataSet> GetTestsOfCourseAsync(long CourseId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICpDataService/GetAllTestSubmissions", ReplyAction="http://tempuri.org/ICpDataService/GetAllTestSubmissionsResponse")]
        System.Data.DataSet GetAllTestSubmissions(long StudentId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICpDataService/GetAllTestSubmissions", ReplyAction="http://tempuri.org/ICpDataService/GetAllTestSubmissionsResponse")]
        System.Threading.Tasks.Task<System.Data.DataSet> GetAllTestSubmissionsAsync(long StudentId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICpDataService/GetAllAssignmentsSubmissions", ReplyAction="http://tempuri.org/ICpDataService/GetAllAssignmentsSubmissionsResponse")]
        System.Data.DataSet GetAllAssignmentsSubmissions(long AssignmentId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICpDataService/GetAllAssignmentsSubmissions", ReplyAction="http://tempuri.org/ICpDataService/GetAllAssignmentsSubmissionsResponse")]
        System.Threading.Tasks.Task<System.Data.DataSet> GetAllAssignmentsSubmissionsAsync(long AssignmentId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICpDataService/GetStudentJoinedToCourse", ReplyAction="http://tempuri.org/ICpDataService/GetStudentJoinedToCourseResponse")]
        System.Data.DataSet GetStudentJoinedToCourse(long CourseId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICpDataService/GetStudentJoinedToCourse", ReplyAction="http://tempuri.org/ICpDataService/GetStudentJoinedToCourseResponse")]
        System.Threading.Tasks.Task<System.Data.DataSet> GetStudentJoinedToCourseAsync(long CourseId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICpDataService/GetAllStudentsJoinedToInstructor", ReplyAction="http://tempuri.org/ICpDataService/GetAllStudentsJoinedToInstructorResponse")]
        System.Data.DataSet GetAllStudentsJoinedToInstructor(int InstructorId, int NoOfRowsFetched, string SearchString);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICpDataService/GetAllStudentsJoinedToInstructor", ReplyAction="http://tempuri.org/ICpDataService/GetAllStudentsJoinedToInstructorResponse")]
        System.Threading.Tasks.Task<System.Data.DataSet> GetAllStudentsJoinedToInstructorAsync(int InstructorId, int NoOfRowsFetched, string SearchString);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICpDataService/InsertNewCourseV2", ReplyAction="http://tempuri.org/ICpDataService/InsertNewCourseV2Response")]
        StudentDashboard.CPDataService.InsertNewCourseV2Response InsertNewCourseV2(StudentDashboard.CPDataService.InsertNewCourseV2Request request);
        
        // CODEGEN: Generating message contract since the operation has multiple return values.
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICpDataService/InsertNewCourseV2", ReplyAction="http://tempuri.org/ICpDataService/InsertNewCourseV2Response")]
        System.Threading.Tasks.Task<StudentDashboard.CPDataService.InsertNewCourseV2Response> InsertNewCourseV2Async(StudentDashboard.CPDataService.InsertNewCourseV2Request request);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICpDataService/InsertNewIndexToV2Course", ReplyAction="http://tempuri.org/ICpDataService/InsertNewIndexToV2CourseResponse")]
        StudentDashboard.CPDataService.InsertNewIndexToV2CourseResponse InsertNewIndexToV2Course(StudentDashboard.CPDataService.InsertNewIndexToV2CourseRequest request);
        
        // CODEGEN: Generating message contract since the operation has multiple return values.
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICpDataService/InsertNewIndexToV2Course", ReplyAction="http://tempuri.org/ICpDataService/InsertNewIndexToV2CourseResponse")]
        System.Threading.Tasks.Task<StudentDashboard.CPDataService.InsertNewIndexToV2CourseResponse> InsertNewIndexToV2CourseAsync(StudentDashboard.CPDataService.InsertNewIndexToV2CourseRequest request);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICpDataService/InsertNewTopicToV2Course", ReplyAction="http://tempuri.org/ICpDataService/InsertNewTopicToV2CourseResponse")]
        bool InsertNewTopicToV2Course(long IndexId, string TopicName, string TopicHtml);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICpDataService/InsertNewTopicToV2Course", ReplyAction="http://tempuri.org/ICpDataService/InsertNewTopicToV2CourseResponse")]
        System.Threading.Tasks.Task<bool> InsertNewTopicToV2CourseAsync(long IndexId, string TopicName, string TopicHtml);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICpDataService/InsertNewAlertForInstructor", ReplyAction="http://tempuri.org/ICpDataService/InsertNewAlertForInstructorResponse")]
        bool InsertNewAlertForInstructor(int InstructorId, string AlertMessage, int AlertTypeId, System.Nullable<long> EffectiveContentid, long StudentId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICpDataService/InsertNewAlertForInstructor", ReplyAction="http://tempuri.org/ICpDataService/InsertNewAlertForInstructorResponse")]
        System.Threading.Tasks.Task<bool> InsertNewAlertForInstructorAsync(int InstructorId, string AlertMessage, int AlertTypeId, System.Nullable<long> EffectiveContentid, long StudentId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICpDataService/GetAllAlertForInstructor", ReplyAction="http://tempuri.org/ICpDataService/GetAllAlertForInstructorResponse")]
        System.Data.DataSet GetAllAlertForInstructor(int InstructorId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICpDataService/GetAllAlertForInstructor", ReplyAction="http://tempuri.org/ICpDataService/GetAllAlertForInstructorResponse")]
        System.Threading.Tasks.Task<System.Data.DataSet> GetAllAlertForInstructorAsync(int InstructorId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICpDataService/MarkAlertReadForInstructor", ReplyAction="http://tempuri.org/ICpDataService/MarkAlertReadForInstructorResponse")]
        bool MarkAlertReadForInstructor(long AlertId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICpDataService/MarkAlertReadForInstructor", ReplyAction="http://tempuri.org/ICpDataService/MarkAlertReadForInstructorResponse")]
        System.Threading.Tasks.Task<bool> MarkAlertReadForInstructorAsync(long AlertId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICpDataService/GetInstructorIdByAssignmentId", ReplyAction="http://tempuri.org/ICpDataService/GetInstructorIdByAssignmentIdResponse")]
        StudentDashboard.CPDataService.GetInstructorIdByAssignmentIdResponse GetInstructorIdByAssignmentId(StudentDashboard.CPDataService.GetInstructorIdByAssignmentIdRequest request);
        
        // CODEGEN: Generating message contract since the operation has multiple return values.
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICpDataService/GetInstructorIdByAssignmentId", ReplyAction="http://tempuri.org/ICpDataService/GetInstructorIdByAssignmentIdResponse")]
        System.Threading.Tasks.Task<StudentDashboard.CPDataService.GetInstructorIdByAssignmentIdResponse> GetInstructorIdByAssignmentIdAsync(StudentDashboard.CPDataService.GetInstructorIdByAssignmentIdRequest request);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICpDataService/GetInstructorIdByTestId", ReplyAction="http://tempuri.org/ICpDataService/GetInstructorIdByTestIdResponse")]
        StudentDashboard.CPDataService.GetInstructorIdByTestIdResponse GetInstructorIdByTestId(StudentDashboard.CPDataService.GetInstructorIdByTestIdRequest request);
        
        // CODEGEN: Generating message contract since the operation has multiple return values.
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICpDataService/GetInstructorIdByTestId", ReplyAction="http://tempuri.org/ICpDataService/GetInstructorIdByTestIdResponse")]
        System.Threading.Tasks.Task<StudentDashboard.CPDataService.GetInstructorIdByTestIdResponse> GetInstructorIdByTestIdAsync(StudentDashboard.CPDataService.GetInstructorIdByTestIdRequest request);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICpDataService/GetInstructorIdByCourseId", ReplyAction="http://tempuri.org/ICpDataService/GetInstructorIdByCourseIdResponse")]
        StudentDashboard.CPDataService.GetInstructorIdByCourseIdResponse GetInstructorIdByCourseId(StudentDashboard.CPDataService.GetInstructorIdByCourseIdRequest request);
        
        // CODEGEN: Generating message contract since the operation has multiple return values.
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICpDataService/GetInstructorIdByCourseId", ReplyAction="http://tempuri.org/ICpDataService/GetInstructorIdByCourseIdResponse")]
        System.Threading.Tasks.Task<StudentDashboard.CPDataService.GetInstructorIdByCourseIdResponse> GetInstructorIdByCourseIdAsync(StudentDashboard.CPDataService.GetInstructorIdByCourseIdRequest request);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICpDataService/SearchForCourseOfInstructor", ReplyAction="http://tempuri.org/ICpDataService/SearchForCourseOfInstructorResponse")]
        System.Data.DataSet SearchForCourseOfInstructor(string SerachString, int MaxRowToReturn, int InstructorId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICpDataService/SearchForCourseOfInstructor", ReplyAction="http://tempuri.org/ICpDataService/SearchForCourseOfInstructorResponse")]
        System.Threading.Tasks.Task<System.Data.DataSet> SearchForCourseOfInstructorAsync(string SerachString, int MaxRowToReturn, int InstructorId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICpDataService/SearchForAssignmentOfInstructor", ReplyAction="http://tempuri.org/ICpDataService/SearchForAssignmentOfInstructorResponse")]
        System.Data.DataSet SearchForAssignmentOfInstructor(string SerachString, int MaxRowToReturn, int InstructorId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICpDataService/SearchForAssignmentOfInstructor", ReplyAction="http://tempuri.org/ICpDataService/SearchForAssignmentOfInstructorResponse")]
        System.Threading.Tasks.Task<System.Data.DataSet> SearchForAssignmentOfInstructorAsync(string SerachString, int MaxRowToReturn, int InstructorId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICpDataService/SearchForTestOfInstructor", ReplyAction="http://tempuri.org/ICpDataService/SearchForTestOfInstructorResponse")]
        System.Data.DataSet SearchForTestOfInstructor(string SerachString, int MaxRowToReturn, int InstructorId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICpDataService/SearchForTestOfInstructor", ReplyAction="http://tempuri.org/ICpDataService/SearchForTestOfInstructorResponse")]
        System.Threading.Tasks.Task<System.Data.DataSet> SearchForTestOfInstructorAsync(string SerachString, int MaxRowToReturn, int InstructorId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICpDataService/SearchForCourseForStudent", ReplyAction="http://tempuri.org/ICpDataService/SearchForCourseForStudentResponse")]
        System.Data.DataSet SearchForCourseForStudent(string SerachString, int MaxRowToReturn, int NoOfRowsFetch, int SortType, long StudentId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICpDataService/SearchForCourseForStudent", ReplyAction="http://tempuri.org/ICpDataService/SearchForCourseForStudentResponse")]
        System.Threading.Tasks.Task<System.Data.DataSet> SearchForCourseForStudentAsync(string SerachString, int MaxRowToReturn, int NoOfRowsFetch, int SortType, long StudentId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICpDataService/CheckStudentHasJoinedTheCourse", ReplyAction="http://tempuri.org/ICpDataService/CheckStudentHasJoinedTheCourseResponse")]
        System.Data.DataSet CheckStudentHasJoinedTheCourse(long StudentId, long CourseId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICpDataService/CheckStudentHasJoinedTheCourse", ReplyAction="http://tempuri.org/ICpDataService/CheckStudentHasJoinedTheCourseResponse")]
        System.Threading.Tasks.Task<System.Data.DataSet> CheckStudentHasJoinedTheCourseAsync(long StudentId, long CourseId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICpDataService/CheckStudentHasSubmittedTheAssignment", ReplyAction="http://tempuri.org/ICpDataService/CheckStudentHasSubmittedTheAssignmentResponse")]
        System.Data.DataSet CheckStudentHasSubmittedTheAssignment(long StudentId, long AssignmentId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICpDataService/CheckStudentHasSubmittedTheAssignment", ReplyAction="http://tempuri.org/ICpDataService/CheckStudentHasSubmittedTheAssignmentResponse")]
        System.Threading.Tasks.Task<System.Data.DataSet> CheckStudentHasSubmittedTheAssignmentAsync(long StudentId, long AssignmentId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICpDataService/CheckStudentHasSubmittedTheTest", ReplyAction="http://tempuri.org/ICpDataService/CheckStudentHasSubmittedTheTestResponse")]
        System.Data.DataSet CheckStudentHasSubmittedTheTest(long StudentId, long TestId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICpDataService/CheckStudentHasSubmittedTheTest", ReplyAction="http://tempuri.org/ICpDataService/CheckStudentHasSubmittedTheTestResponse")]
        System.Threading.Tasks.Task<System.Data.DataSet> CheckStudentHasSubmittedTheTestAsync(long StudentId, long TestId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICpDataService/CheckAssignmentResponseIdExistsForStudent", ReplyAction="http://tempuri.org/ICpDataService/CheckAssignmentResponseIdExistsForStudentRespon" +
            "se")]
        System.Data.DataSet CheckAssignmentResponseIdExistsForStudent(long StudentId, long SubmissionId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICpDataService/CheckAssignmentResponseIdExistsForStudent", ReplyAction="http://tempuri.org/ICpDataService/CheckAssignmentResponseIdExistsForStudentRespon" +
            "se")]
        System.Threading.Tasks.Task<System.Data.DataSet> CheckAssignmentResponseIdExistsForStudentAsync(long StudentId, long SubmissionId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICpDataService/CheckTestResponseIdExistsForStudent", ReplyAction="http://tempuri.org/ICpDataService/CheckTestResponseIdExistsForStudentResponse")]
        System.Data.DataSet CheckTestResponseIdExistsForStudent(long StudentId, long SubmissionId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICpDataService/CheckTestResponseIdExistsForStudent", ReplyAction="http://tempuri.org/ICpDataService/CheckTestResponseIdExistsForStudentResponse")]
        System.Threading.Tasks.Task<System.Data.DataSet> CheckTestResponseIdExistsForStudentAsync(long StudentId, long SubmissionId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICpDataService/GetInstructorProfileDetails", ReplyAction="http://tempuri.org/ICpDataService/GetInstructorProfileDetailsResponse")]
        System.Data.DataSet GetInstructorProfileDetails(int InstructorId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICpDataService/GetInstructorProfileDetails", ReplyAction="http://tempuri.org/ICpDataService/GetInstructorProfileDetailsResponse")]
        System.Threading.Tasks.Task<System.Data.DataSet> GetInstructorProfileDetailsAsync(int InstructorId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICpDataService/CheckTestAccess", ReplyAction="http://tempuri.org/ICpDataService/CheckTestAccessResponse")]
        System.Data.DataSet CheckTestAccess(long TestId, string AccessCode);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICpDataService/CheckTestAccess", ReplyAction="http://tempuri.org/ICpDataService/CheckTestAccessResponse")]
        System.Threading.Tasks.Task<System.Data.DataSet> CheckTestAccessAsync(long TestId, string AccessCode);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICpDataService/CheckAssignmentAccess", ReplyAction="http://tempuri.org/ICpDataService/CheckAssignmentAccessResponse")]
        System.Data.DataSet CheckAssignmentAccess(long AssignmentId, string AccessCode);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICpDataService/CheckAssignmentAccess", ReplyAction="http://tempuri.org/ICpDataService/CheckAssignmentAccessResponse")]
        System.Threading.Tasks.Task<System.Data.DataSet> CheckAssignmentAccessAsync(long AssignmentId, string AccessCode);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICpDataService/GetIndependentAssignmentDetails", ReplyAction="http://tempuri.org/ICpDataService/GetIndependentAssignmentDetailsResponse")]
        System.Data.DataSet GetIndependentAssignmentDetails(long AssignmentId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICpDataService/GetIndependentAssignmentDetails", ReplyAction="http://tempuri.org/ICpDataService/GetIndependentAssignmentDetailsResponse")]
        System.Threading.Tasks.Task<System.Data.DataSet> GetIndependentAssignmentDetailsAsync(long AssignmentId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICpDataService/GetIndependentTestDetails", ReplyAction="http://tempuri.org/ICpDataService/GetIndependentTestDetailsResponse")]
        System.Data.DataSet GetIndependentTestDetails(long TestId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICpDataService/GetIndependentTestDetails", ReplyAction="http://tempuri.org/ICpDataService/GetIndependentTestDetailsResponse")]
        System.Threading.Tasks.Task<System.Data.DataSet> GetIndependentTestDetailsAsync(long TestId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICpDataService/GetTestDetailsWithAccessCode", ReplyAction="http://tempuri.org/ICpDataService/GetTestDetailsWithAccessCodeResponse")]
        System.Data.DataSet GetTestDetailsWithAccessCode(long TestId, string AccessCode);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICpDataService/GetTestDetailsWithAccessCode", ReplyAction="http://tempuri.org/ICpDataService/GetTestDetailsWithAccessCodeResponse")]
        System.Threading.Tasks.Task<System.Data.DataSet> GetTestDetailsWithAccessCodeAsync(long TestId, string AccessCode);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICpDataService/GetAssignmentDetailsWithAC", ReplyAction="http://tempuri.org/ICpDataService/GetAssignmentDetailsWithACResponse")]
        System.Data.DataSet GetAssignmentDetailsWithAC(long AssignmentId, string AccessCode);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICpDataService/GetAssignmentDetailsWithAC", ReplyAction="http://tempuri.org/ICpDataService/GetAssignmentDetailsWithACResponse")]
        System.Threading.Tasks.Task<System.Data.DataSet> GetAssignmentDetailsWithACAsync(long AssignmentId, string AccessCode);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICpDataService/GetWebsiteAboutDetails", ReplyAction="http://tempuri.org/ICpDataService/GetWebsiteAboutDetailsResponse")]
        System.Data.DataSet GetWebsiteAboutDetails();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICpDataService/GetWebsiteAboutDetails", ReplyAction="http://tempuri.org/ICpDataService/GetWebsiteAboutDetailsResponse")]
        System.Threading.Tasks.Task<System.Data.DataSet> GetWebsiteAboutDetailsAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICpDataService/GetData", ReplyAction="http://tempuri.org/ICpDataService/GetDataResponse")]
        string GetData(int value);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICpDataService/GetData", ReplyAction="http://tempuri.org/ICpDataService/GetDataResponse")]
        System.Threading.Tasks.Task<string> GetDataAsync(int value);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICpDataService/GetDataUsingDataContract", ReplyAction="http://tempuri.org/ICpDataService/GetDataUsingDataContractResponse")]
        StudentDashboard.CPDataService.CompositeType GetDataUsingDataContract(StudentDashboard.CPDataService.CompositeType composite);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICpDataService/GetDataUsingDataContract", ReplyAction="http://tempuri.org/ICpDataService/GetDataUsingDataContractResponse")]
        System.Threading.Tasks.Task<StudentDashboard.CPDataService.CompositeType> GetDataUsingDataContractAsync(StudentDashboard.CPDataService.CompositeType composite);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICpDataService/RegisterNewUser", ReplyAction="http://tempuri.org/ICpDataService/RegisterNewUserResponse")]
        bool RegisterNewUser(string FirstName, string LastName, string PhoneNo, string Email, string Password);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICpDataService/RegisterNewUser", ReplyAction="http://tempuri.org/ICpDataService/RegisterNewUserResponse")]
        System.Threading.Tasks.Task<bool> RegisterNewUserAsync(string FirstName, string LastName, string PhoneNo, string Email, string Password);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICpDataService/ValidateLoginDetails", ReplyAction="http://tempuri.org/ICpDataService/ValidateLoginDetailsResponse")]
        System.Data.DataSet ValidateLoginDetails(string Email, string Password);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICpDataService/ValidateLoginDetails", ReplyAction="http://tempuri.org/ICpDataService/ValidateLoginDetailsResponse")]
        System.Threading.Tasks.Task<System.Data.DataSet> ValidateLoginDetailsAsync(string Email, string Password);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICpDataService/RegisterNewInstructor", ReplyAction="http://tempuri.org/ICpDataService/RegisterNewInstructorResponse")]
        bool RegisterNewInstructor(string FirstName, string LastName, string PhoneNo, string Email, string Password, string PhoneNoVerificationGuid, string EmailIdVerificationGuid);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICpDataService/RegisterNewInstructor", ReplyAction="http://tempuri.org/ICpDataService/RegisterNewInstructorResponse")]
        System.Threading.Tasks.Task<bool> RegisterNewInstructorAsync(string FirstName, string LastName, string PhoneNo, string Email, string Password, string PhoneNoVerificationGuid, string EmailIdVerificationGuid);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICpDataService/ValidateInstructorLoginDetails", ReplyAction="http://tempuri.org/ICpDataService/ValidateInstructorLoginDetailsResponse")]
        System.Data.DataSet ValidateInstructorLoginDetails(string Email, string Password);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICpDataService/ValidateInstructorLoginDetails", ReplyAction="http://tempuri.org/ICpDataService/ValidateInstructorLoginDetailsResponse")]
        System.Threading.Tasks.Task<System.Data.DataSet> ValidateInstructorLoginDetailsAsync(string Email, string Password);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICpDataService/GetAllCountryDetails", ReplyAction="http://tempuri.org/ICpDataService/GetAllCountryDetailsResponse")]
        System.Data.DataSet GetAllCountryDetails();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICpDataService/GetAllCountryDetails", ReplyAction="http://tempuri.org/ICpDataService/GetAllCountryDetailsResponse")]
        System.Threading.Tasks.Task<System.Data.DataSet> GetAllCountryDetailsAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICpDataService/GetAllCityDetailsOfState", ReplyAction="http://tempuri.org/ICpDataService/GetAllCityDetailsOfStateResponse")]
        System.Data.DataSet GetAllCityDetailsOfState(int StateId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICpDataService/GetAllCityDetailsOfState", ReplyAction="http://tempuri.org/ICpDataService/GetAllCityDetailsOfStateResponse")]
        System.Threading.Tasks.Task<System.Data.DataSet> GetAllCityDetailsOfStateAsync(int StateId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICpDataService/GetAllStateDetailsOfCountry", ReplyAction="http://tempuri.org/ICpDataService/GetAllStateDetailsOfCountryResponse")]
        System.Data.DataSet GetAllStateDetailsOfCountry(int CountryId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICpDataService/GetAllStateDetailsOfCountry", ReplyAction="http://tempuri.org/ICpDataService/GetAllStateDetailsOfCountryResponse")]
        System.Threading.Tasks.Task<System.Data.DataSet> GetAllStateDetailsOfCountryAsync(int CountryId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICpDataService/CheckIsSchoolUserIdAlreadyExists", ReplyAction="http://tempuri.org/ICpDataService/CheckIsSchoolUserIdAlreadyExistsResponse")]
        System.Data.DataSet CheckIsSchoolUserIdAlreadyExists(string SchoolUserIdToCheck);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICpDataService/CheckIsSchoolUserIdAlreadyExists", ReplyAction="http://tempuri.org/ICpDataService/CheckIsSchoolUserIdAlreadyExistsResponse")]
        System.Threading.Tasks.Task<System.Data.DataSet> CheckIsSchoolUserIdAlreadyExistsAsync(string SchoolUserIdToCheck);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICpDataService/InsertNewSchoolDetails", ReplyAction="http://tempuri.org/ICpDataService/InsertNewSchoolDetailsResponse")]
        bool InsertNewSchoolDetails(string SchoolName, string AddressLine1, string AddressLine2, int CityId, int PinCode, string SchoolUserId, string Password, string PhoneNo, string Email);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICpDataService/InsertNewSchoolDetails", ReplyAction="http://tempuri.org/ICpDataService/InsertNewSchoolDetailsResponse")]
        System.Threading.Tasks.Task<bool> InsertNewSchoolDetailsAsync(string SchoolName, string AddressLine1, string AddressLine2, int CityId, int PinCode, string SchoolUserId, string Password, string PhoneNo, string Email);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICpDataService/ValidateSchoolLoginDetails", ReplyAction="http://tempuri.org/ICpDataService/ValidateSchoolLoginDetailsResponse")]
        System.Data.DataSet ValidateSchoolLoginDetails(string Email, string Password);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICpDataService/ValidateSchoolLoginDetails", ReplyAction="http://tempuri.org/ICpDataService/ValidateSchoolLoginDetailsResponse")]
        System.Threading.Tasks.Task<System.Data.DataSet> ValidateSchoolLoginDetailsAsync(string Email, string Password);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICpDataService/InsertNewCourse", ReplyAction="http://tempuri.org/ICpDataService/InsertNewCourseResponse")]
        StudentDashboard.CPDataService.InsertNewCourseResponse InsertNewCourse(StudentDashboard.CPDataService.InsertNewCourseRequest request);
        
        // CODEGEN: Generating message contract since the operation has multiple return values.
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICpDataService/InsertNewCourse", ReplyAction="http://tempuri.org/ICpDataService/InsertNewCourseResponse")]
        System.Threading.Tasks.Task<StudentDashboard.CPDataService.InsertNewCourseResponse> InsertNewCourseAsync(StudentDashboard.CPDataService.InsertNewCourseRequest request);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICpDataService/InertNewCourseIndex", ReplyAction="http://tempuri.org/ICpDataService/InertNewCourseIndexResponse")]
        StudentDashboard.CPDataService.InertNewCourseIndexResponse InertNewCourseIndex(StudentDashboard.CPDataService.InertNewCourseIndexRequest request);
        
        // CODEGEN: Generating message contract since the operation has multiple return values.
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICpDataService/InertNewCourseIndex", ReplyAction="http://tempuri.org/ICpDataService/InertNewCourseIndexResponse")]
        System.Threading.Tasks.Task<StudentDashboard.CPDataService.InertNewCourseIndexResponse> InertNewCourseIndexAsync(StudentDashboard.CPDataService.InertNewCourseIndexRequest request);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICpDataService/InsertNewTopic", ReplyAction="http://tempuri.org/ICpDataService/InsertNewTopicResponse")]
        bool InsertNewTopic(string TopicName, string TopicDescription, string FileUploadPath, short FileUploadTypeId, long IndexId, string FileAttachmetPath);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICpDataService/InsertNewTopic", ReplyAction="http://tempuri.org/ICpDataService/InsertNewTopicResponse")]
        System.Threading.Tasks.Task<bool> InsertNewTopicAsync(string TopicName, string TopicDescription, string FileUploadPath, short FileUploadTypeId, long IndexId, string FileAttachmetPath);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICpDataService/InsertNewTest", ReplyAction="http://tempuri.org/ICpDataService/InsertNewTestResponse")]
        StudentDashboard.CPDataService.InsertNewTestResponse InsertNewTest(StudentDashboard.CPDataService.InsertNewTestRequest request);
        
        // CODEGEN: Generating message contract since the operation has multiple return values.
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICpDataService/InsertNewTest", ReplyAction="http://tempuri.org/ICpDataService/InsertNewTestResponse")]
        System.Threading.Tasks.Task<StudentDashboard.CPDataService.InsertNewTestResponse> InsertNewTestAsync(StudentDashboard.CPDataService.InsertNewTestRequest request);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICpDataService/InsertNewAssignment", ReplyAction="http://tempuri.org/ICpDataService/InsertNewAssignmentResponse")]
        StudentDashboard.CPDataService.InsertNewAssignmentResponse InsertNewAssignment(StudentDashboard.CPDataService.InsertNewAssignmentRequest request);
        
        // CODEGEN: Generating message contract since the operation has multiple return values.
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICpDataService/InsertNewAssignment", ReplyAction="http://tempuri.org/ICpDataService/InsertNewAssignmentResponse")]
        System.Threading.Tasks.Task<StudentDashboard.CPDataService.InsertNewAssignmentResponse> InsertNewAssignmentAsync(StudentDashboard.CPDataService.InsertNewAssignmentRequest request);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICpDataService/InsertNewMcqAssignment", ReplyAction="http://tempuri.org/ICpDataService/InsertNewMcqAssignmentResponse")]
        bool InsertNewMcqAssignment(long AssignmentId, string QuestionStatement, string Option1, string Option2, string Option3, string Option4, short CorrectOption);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICpDataService/InsertNewMcqAssignment", ReplyAction="http://tempuri.org/ICpDataService/InsertNewMcqAssignmentResponse")]
        System.Threading.Tasks.Task<bool> InsertNewMcqAssignmentAsync(long AssignmentId, string QuestionStatement, string Option1, string Option2, string Option3, string Option4, short CorrectOption);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICpDataService/InsertNewMcqTestQuestion", ReplyAction="http://tempuri.org/ICpDataService/InsertNewMcqTestQuestionResponse")]
        bool InsertNewMcqTestQuestion(long TestId, string QuestionStatement, string Option1, string Option2, string Option3, string Option4, short CorrectOption, int TimeForQuestionInSeconds, int Marks);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICpDataService/InsertNewMcqTestQuestion", ReplyAction="http://tempuri.org/ICpDataService/InsertNewMcqTestQuestionResponse")]
        System.Threading.Tasks.Task<bool> InsertNewMcqTestQuestionAsync(long TestId, string QuestionStatement, string Option1, string Option2, string Option3, string Option4, short CorrectOption, int TimeForQuestionInSeconds, int Marks);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICpDataService/InsertTestIdToIndex", ReplyAction="http://tempuri.org/ICpDataService/InsertTestIdToIndexResponse")]
        bool InsertTestIdToIndex(long TestId, long IndexId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICpDataService/InsertTestIdToIndex", ReplyAction="http://tempuri.org/ICpDataService/InsertTestIdToIndexResponse")]
        System.Threading.Tasks.Task<bool> InsertTestIdToIndexAsync(long TestId, long IndexId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICpDataService/InsertAssignmentIdToIndex", ReplyAction="http://tempuri.org/ICpDataService/InsertAssignmentIdToIndexResponse")]
        bool InsertAssignmentIdToIndex(long AssignmentId, long IndexId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICpDataService/InsertAssignmentIdToIndex", ReplyAction="http://tempuri.org/ICpDataService/InsertAssignmentIdToIndexResponse")]
        System.Threading.Tasks.Task<bool> InsertAssignmentIdToIndexAsync(long AssignmentId, long IndexId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICpDataService/GetAllCourse", ReplyAction="http://tempuri.org/ICpDataService/GetAllCourseResponse")]
        System.Data.DataSet GetAllCourse(long InstructorId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICpDataService/GetAllCourse", ReplyAction="http://tempuri.org/ICpDataService/GetAllCourseResponse")]
        System.Threading.Tasks.Task<System.Data.DataSet> GetAllCourseAsync(long InstructorId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICpDataService/GetInstructorIdFromUserId", ReplyAction="http://tempuri.org/ICpDataService/GetInstructorIdFromUserIdResponse")]
        StudentDashboard.CPDataService.GetInstructorIdFromUserIdResponse GetInstructorIdFromUserId(StudentDashboard.CPDataService.GetInstructorIdFromUserIdRequest request);
        
        // CODEGEN: Generating message contract since the operation has multiple return values.
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICpDataService/GetInstructorIdFromUserId", ReplyAction="http://tempuri.org/ICpDataService/GetInstructorIdFromUserIdResponse")]
        System.Threading.Tasks.Task<StudentDashboard.CPDataService.GetInstructorIdFromUserIdResponse> GetInstructorIdFromUserIdAsync(StudentDashboard.CPDataService.GetInstructorIdFromUserIdRequest request);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICpDataService/GetIndexDetailsOfCourse", ReplyAction="http://tempuri.org/ICpDataService/GetIndexDetailsOfCourseResponse")]
        System.Data.DataSet GetIndexDetailsOfCourse(long CourseId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICpDataService/GetIndexDetailsOfCourse", ReplyAction="http://tempuri.org/ICpDataService/GetIndexDetailsOfCourseResponse")]
        System.Threading.Tasks.Task<System.Data.DataSet> GetIndexDetailsOfCourseAsync(long CourseId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICpDataService/GetCourseDetails", ReplyAction="http://tempuri.org/ICpDataService/GetCourseDetailsResponse")]
        System.Data.DataSet GetCourseDetails(long CourseId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICpDataService/GetCourseDetails", ReplyAction="http://tempuri.org/ICpDataService/GetCourseDetailsResponse")]
        System.Threading.Tasks.Task<System.Data.DataSet> GetCourseDetailsAsync(long CourseId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICpDataService/InsertNewIndependentAssignment", ReplyAction="http://tempuri.org/ICpDataService/InsertNewIndependentAssignmentResponse")]
        StudentDashboard.CPDataService.InsertNewIndependentAssignmentResponse InsertNewIndependentAssignment(StudentDashboard.CPDataService.InsertNewIndependentAssignmentRequest request);
        
        // CODEGEN: Generating message contract since the operation has multiple return values.
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICpDataService/InsertNewIndependentAssignment", ReplyAction="http://tempuri.org/ICpDataService/InsertNewIndependentAssignmentResponse")]
        System.Threading.Tasks.Task<StudentDashboard.CPDataService.InsertNewIndependentAssignmentResponse> InsertNewIndependentAssignmentAsync(StudentDashboard.CPDataService.InsertNewIndependentAssignmentRequest request);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICpDataService/InsertActivityForInstructor", ReplyAction="http://tempuri.org/ICpDataService/InsertActivityForInstructorResponse")]
        bool InsertActivityForInstructor(int InstructorId, string ActivityMessgae);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICpDataService/InsertActivityForInstructor", ReplyAction="http://tempuri.org/ICpDataService/InsertActivityForInstructorResponse")]
        System.Threading.Tasks.Task<bool> InsertActivityForInstructorAsync(int InstructorId, string ActivityMessgae);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICpDataService/UpdateTestDetails", ReplyAction="http://tempuri.org/ICpDataService/UpdateTestDetailsResponse")]
        bool UpdateTestDetails(long TestId, string TestName, string TestDescription, string FilePath, byte FileType);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICpDataService/UpdateTestDetails", ReplyAction="http://tempuri.org/ICpDataService/UpdateTestDetailsResponse")]
        System.Threading.Tasks.Task<bool> UpdateTestDetailsAsync(long TestId, string TestName, string TestDescription, string FilePath, byte FileType);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICpDataService/UpdateAssignmentDetails", ReplyAction="http://tempuri.org/ICpDataService/UpdateAssignmentDetailsResponse")]
        bool UpdateAssignmentDetails(long AssignmentId, string AssignmentName, string AssignmentDescription, string FilePath, byte FileType);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICpDataService/UpdateAssignmentDetails", ReplyAction="http://tempuri.org/ICpDataService/UpdateAssignmentDetailsResponse")]
        System.Threading.Tasks.Task<bool> UpdateAssignmentDetailsAsync(long AssignmentId, string AssignmentName, string AssignmentDescription, string FilePath, byte FileType);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICpDataService/UpdateIndexTopicDetails", ReplyAction="http://tempuri.org/ICpDataService/UpdateIndexTopicDetailsResponse")]
        bool UpdateIndexTopicDetails(long TopicId, string TopicName, string TopicDescription, string FilePath, byte FileType, string FileAttachmentPath);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICpDataService/UpdateIndexTopicDetails", ReplyAction="http://tempuri.org/ICpDataService/UpdateIndexTopicDetailsResponse")]
        System.Threading.Tasks.Task<bool> UpdateIndexTopicDetailsAsync(long TopicId, string TopicName, string TopicDescription, string FilePath, byte FileType, string FileAttachmentPath);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICpDataService/UpdateCourseIndexDetails", ReplyAction="http://tempuri.org/ICpDataService/UpdateCourseIndexDetailsResponse")]
        bool UpdateCourseIndexDetails(long IndexId, string IndexName, string IndexDescription);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICpDataService/UpdateCourseIndexDetails", ReplyAction="http://tempuri.org/ICpDataService/UpdateCourseIndexDetailsResponse")]
        System.Threading.Tasks.Task<bool> UpdateCourseIndexDetailsAsync(long IndexId, string IndexName, string IndexDescription);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICpDataService/UpdateCourseDetails", ReplyAction="http://tempuri.org/ICpDataService/UpdateCourseDetailsResponse")]
        bool UpdateCourseDetails(long CourseId, string CourseDescription);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICpDataService/UpdateCourseDetails", ReplyAction="http://tempuri.org/ICpDataService/UpdateCourseDetailsResponse")]
        System.Threading.Tasks.Task<bool> UpdateCourseDetailsAsync(long CourseId, string CourseDescription);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICpDataService/ActivateCourse", ReplyAction="http://tempuri.org/ICpDataService/ActivateCourseResponse")]
        bool ActivateCourse(long CourseId, string ShareUrl, string AccessCode, int CourseJoiningFeeInPaise);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICpDataService/ActivateCourse", ReplyAction="http://tempuri.org/ICpDataService/ActivateCourseResponse")]
        System.Threading.Tasks.Task<bool> ActivateCourseAsync(long CourseId, string ShareUrl, string AccessCode, int CourseJoiningFeeInPaise);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICpDataService/DeleteCourse", ReplyAction="http://tempuri.org/ICpDataService/DeleteCourseResponse")]
        bool DeleteCourse(long CourseId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICpDataService/DeleteCourse", ReplyAction="http://tempuri.org/ICpDataService/DeleteCourseResponse")]
        System.Threading.Tasks.Task<bool> DeleteCourseAsync(long CourseId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICpDataService/GetAssignmentDetails", ReplyAction="http://tempuri.org/ICpDataService/GetAssignmentDetailsResponse")]
        System.Data.DataSet GetAssignmentDetails(long AssignmentId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICpDataService/GetAssignmentDetails", ReplyAction="http://tempuri.org/ICpDataService/GetAssignmentDetailsResponse")]
        System.Threading.Tasks.Task<System.Data.DataSet> GetAssignmentDetailsAsync(long AssignmentId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICpDataService/GetMcqAssignmentDetails", ReplyAction="http://tempuri.org/ICpDataService/GetMcqAssignmentDetailsResponse")]
        System.Data.DataSet GetMcqAssignmentDetails(long AssignmentId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICpDataService/GetMcqAssignmentDetails", ReplyAction="http://tempuri.org/ICpDataService/GetMcqAssignmentDetailsResponse")]
        System.Threading.Tasks.Task<System.Data.DataSet> GetMcqAssignmentDetailsAsync(long AssignmentId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICpDataService/GetInstructorDetails", ReplyAction="http://tempuri.org/ICpDataService/GetInstructorDetailsResponse")]
        System.Data.DataSet GetInstructorDetails(int Id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICpDataService/GetInstructorDetails", ReplyAction="http://tempuri.org/ICpDataService/GetInstructorDetailsResponse")]
        System.Threading.Tasks.Task<System.Data.DataSet> GetInstructorDetailsAsync(int Id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICpDataService/UpdateInstructorDetails", ReplyAction="http://tempuri.org/ICpDataService/UpdateInstructorDetailsResponse")]
        bool UpdateInstructorDetails(string FirstName, string LastName, string PhoneNo, string Gender, string AddressLine1, string AddressLine2, System.Nullable<int> CityId, System.Nullable<int> StateId, string PinCode, int InstructorId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICpDataService/UpdateInstructorDetails", ReplyAction="http://tempuri.org/ICpDataService/UpdateInstructorDetailsResponse")]
        System.Threading.Tasks.Task<bool> UpdateInstructorDetailsAsync(string FirstName, string LastName, string PhoneNo, string Gender, string AddressLine1, string AddressLine2, System.Nullable<int> CityId, System.Nullable<int> StateId, string PinCode, int InstructorId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICpDataService/UpdateInstructorPassword", ReplyAction="http://tempuri.org/ICpDataService/UpdateInstructorPasswordResponse")]
        bool UpdateInstructorPassword(string Password, int InstructorId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICpDataService/UpdateInstructorPassword", ReplyAction="http://tempuri.org/ICpDataService/UpdateInstructorPasswordResponse")]
        System.Threading.Tasks.Task<bool> UpdateInstructorPasswordAsync(string Password, int InstructorId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICpDataService/GetInstructorPostLoginDetails", ReplyAction="http://tempuri.org/ICpDataService/GetInstructorPostLoginDetailsResponse")]
        System.Data.DataSet GetInstructorPostLoginDetails(int Id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICpDataService/GetInstructorPostLoginDetails", ReplyAction="http://tempuri.org/ICpDataService/GetInstructorPostLoginDetailsResponse")]
        System.Threading.Tasks.Task<System.Data.DataSet> GetInstructorPostLoginDetailsAsync(int Id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICpDataService/InsertNewIndependentTest", ReplyAction="http://tempuri.org/ICpDataService/InsertNewIndependentTestResponse")]
        StudentDashboard.CPDataService.InsertNewIndependentTestResponse InsertNewIndependentTest(StudentDashboard.CPDataService.InsertNewIndependentTestRequest request);
        
        // CODEGEN: Generating message contract since the operation has multiple return values.
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICpDataService/InsertNewIndependentTest", ReplyAction="http://tempuri.org/ICpDataService/InsertNewIndependentTestResponse")]
        System.Threading.Tasks.Task<StudentDashboard.CPDataService.InsertNewIndependentTestResponse> InsertNewIndependentTestAsync(StudentDashboard.CPDataService.InsertNewIndependentTestRequest request);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICpDataService/GetInstructorTestDetails", ReplyAction="http://tempuri.org/ICpDataService/GetInstructorTestDetailsResponse")]
        System.Data.DataSet GetInstructorTestDetails(int Id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICpDataService/GetInstructorTestDetails", ReplyAction="http://tempuri.org/ICpDataService/GetInstructorTestDetailsResponse")]
        System.Threading.Tasks.Task<System.Data.DataSet> GetInstructorTestDetailsAsync(int Id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICpDataService/GetInstructorAssignmentDetails", ReplyAction="http://tempuri.org/ICpDataService/GetInstructorAssignmentDetailsResponse")]
        System.Data.DataSet GetInstructorAssignmentDetails(int Id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICpDataService/GetInstructorAssignmentDetails", ReplyAction="http://tempuri.org/ICpDataService/GetInstructorAssignmentDetailsResponse")]
        System.Threading.Tasks.Task<System.Data.DataSet> GetInstructorAssignmentDetailsAsync(int Id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICpDataService/GetInstructorActivityDetails", ReplyAction="http://tempuri.org/ICpDataService/GetInstructorActivityDetailsResponse")]
        System.Data.DataSet GetInstructorActivityDetails(int Id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICpDataService/GetInstructorActivityDetails", ReplyAction="http://tempuri.org/ICpDataService/GetInstructorActivityDetailsResponse")]
        System.Threading.Tasks.Task<System.Data.DataSet> GetInstructorActivityDetailsAsync(int Id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICpDataService/ActivateTest", ReplyAction="http://tempuri.org/ICpDataService/ActivateTestResponse")]
        bool ActivateTest(long TestId, string ShareCode, string TinyUrl);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICpDataService/ActivateTest", ReplyAction="http://tempuri.org/ICpDataService/ActivateTestResponse")]
        System.Threading.Tasks.Task<bool> ActivateTestAsync(long TestId, string ShareCode, string TinyUrl);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICpDataService/DeleteAssignmentOfCourse", ReplyAction="http://tempuri.org/ICpDataService/DeleteAssignmentOfCourseResponse")]
        bool DeleteAssignmentOfCourse(long AssignmentId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICpDataService/DeleteAssignmentOfCourse", ReplyAction="http://tempuri.org/ICpDataService/DeleteAssignmentOfCourseResponse")]
        System.Threading.Tasks.Task<bool> DeleteAssignmentOfCourseAsync(long AssignmentId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICpDataService/ActivateAssignment", ReplyAction="http://tempuri.org/ICpDataService/ActivateAssignmentResponse")]
        bool ActivateAssignment(long AssignmentId, string ShareCode, string TinyUrl);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICpDataService/ActivateAssignment", ReplyAction="http://tempuri.org/ICpDataService/ActivateAssignmentResponse")]
        System.Threading.Tasks.Task<bool> ActivateAssignmentAsync(long AssignmentId, string ShareCode, string TinyUrl);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICpDataService/DeleteTest", ReplyAction="http://tempuri.org/ICpDataService/DeleteTestResponse")]
        bool DeleteTest(long TestId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICpDataService/DeleteTest", ReplyAction="http://tempuri.org/ICpDataService/DeleteTestResponse")]
        System.Threading.Tasks.Task<bool> DeleteTestAsync(long TestId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICpDataService/InsertContactFormDetails", ReplyAction="http://tempuri.org/ICpDataService/InsertContactFormDetailsResponse")]
        bool InsertContactFormDetails(string Name, string Email, string PhoneNo, string Subject, string Message);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICpDataService/InsertContactFormDetails", ReplyAction="http://tempuri.org/ICpDataService/InsertContactFormDetailsResponse")]
        System.Threading.Tasks.Task<bool> InsertContactFormDetailsAsync(string Name, string Email, string PhoneNo, string Subject, string Message);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICpDataService/GetIndexTopicDetails", ReplyAction="http://tempuri.org/ICpDataService/GetIndexTopicDetailsResponse")]
        System.Data.DataSet GetIndexTopicDetails(long IndexId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICpDataService/GetIndexTopicDetails", ReplyAction="http://tempuri.org/ICpDataService/GetIndexTopicDetailsResponse")]
        System.Threading.Tasks.Task<System.Data.DataSet> GetIndexTopicDetailsAsync(long IndexId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICpDataService/GetIndexDetails", ReplyAction="http://tempuri.org/ICpDataService/GetIndexDetailsResponse")]
        System.Data.DataSet GetIndexDetails(long IndexId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICpDataService/GetIndexDetails", ReplyAction="http://tempuri.org/ICpDataService/GetIndexDetailsResponse")]
        System.Threading.Tasks.Task<System.Data.DataSet> GetIndexDetailsAsync(long IndexId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICpDataService/DeleteMcqQuestionOfAssignment", ReplyAction="http://tempuri.org/ICpDataService/DeleteMcqQuestionOfAssignmentResponse")]
        bool DeleteMcqQuestionOfAssignment(long QuestionId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICpDataService/DeleteMcqQuestionOfAssignment", ReplyAction="http://tempuri.org/ICpDataService/DeleteMcqQuestionOfAssignmentResponse")]
        System.Threading.Tasks.Task<bool> DeleteMcqQuestionOfAssignmentAsync(long QuestionId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICpDataService/UpdateMcqQuestionOfAssignment", ReplyAction="http://tempuri.org/ICpDataService/UpdateMcqQuestionOfAssignmentResponse")]
        bool UpdateMcqQuestionOfAssignment(long QuestionId, string QuestionStatement, string Option1, string Option2, string Option3, string Option4, byte CorrectOption);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICpDataService/UpdateMcqQuestionOfAssignment", ReplyAction="http://tempuri.org/ICpDataService/UpdateMcqQuestionOfAssignmentResponse")]
        System.Threading.Tasks.Task<bool> UpdateMcqQuestionOfAssignmentAsync(long QuestionId, string QuestionStatement, string Option1, string Option2, string Option3, string Option4, byte CorrectOption);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICpDataService/DeleteIndexTopic", ReplyAction="http://tempuri.org/ICpDataService/DeleteIndexTopicResponse")]
        bool DeleteIndexTopic(long TopicId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICpDataService/DeleteIndexTopic", ReplyAction="http://tempuri.org/ICpDataService/DeleteIndexTopicResponse")]
        System.Threading.Tasks.Task<bool> DeleteIndexTopicAsync(long TopicId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICpDataService/UpdateIndexTopic", ReplyAction="http://tempuri.org/ICpDataService/UpdateIndexTopicResponse")]
        bool UpdateIndexTopic(long TopicId, string TopicName, string TopicDescription, string FilePathMapToServer, System.Nullable<byte> FileTypeId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICpDataService/UpdateIndexTopic", ReplyAction="http://tempuri.org/ICpDataService/UpdateIndexTopicResponse")]
        System.Threading.Tasks.Task<bool> UpdateIndexTopicAsync(long TopicId, string TopicName, string TopicDescription, string FilePathMapToServer, System.Nullable<byte> FileTypeId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICpDataService/UpdateFullCourseDetails", ReplyAction="http://tempuri.org/ICpDataService/UpdateFullCourseDetailsResponse")]
        bool UpdateFullCourseDetails(long CourseId, string CourseName, string CourseDescription);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICpDataService/UpdateFullCourseDetails", ReplyAction="http://tempuri.org/ICpDataService/UpdateFullCourseDetailsResponse")]
        System.Threading.Tasks.Task<bool> UpdateFullCourseDetailsAsync(long CourseId, string CourseName, string CourseDescription);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICpDataService/DeleteIndex", ReplyAction="http://tempuri.org/ICpDataService/DeleteIndexResponse")]
        bool DeleteIndex(long IndexId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICpDataService/DeleteIndex", ReplyAction="http://tempuri.org/ICpDataService/DeleteIndexResponse")]
        System.Threading.Tasks.Task<bool> DeleteIndexAsync(long IndexId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICpDataService/GetMcqTestDetails", ReplyAction="http://tempuri.org/ICpDataService/GetMcqTestDetailsResponse")]
        System.Data.DataSet GetMcqTestDetails(long TestId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICpDataService/GetMcqTestDetails", ReplyAction="http://tempuri.org/ICpDataService/GetMcqTestDetailsResponse")]
        System.Threading.Tasks.Task<System.Data.DataSet> GetMcqTestDetailsAsync(long TestId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICpDataService/GetMcqtestQuestionDetails", ReplyAction="http://tempuri.org/ICpDataService/GetMcqtestQuestionDetailsResponse")]
        System.Data.DataSet GetMcqtestQuestionDetails(long TestId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICpDataService/GetMcqtestQuestionDetails", ReplyAction="http://tempuri.org/ICpDataService/GetMcqtestQuestionDetailsResponse")]
        System.Threading.Tasks.Task<System.Data.DataSet> GetMcqtestQuestionDetailsAsync(long TestId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICpDataService/UpdateMcqTestDetails", ReplyAction="http://tempuri.org/ICpDataService/UpdateMcqTestDetailsResponse")]
        bool UpdateMcqTestDetails(long TestId, string TestName, string TestDescroption);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICpDataService/UpdateMcqTestDetails", ReplyAction="http://tempuri.org/ICpDataService/UpdateMcqTestDetailsResponse")]
        System.Threading.Tasks.Task<bool> UpdateMcqTestDetailsAsync(long TestId, string TestName, string TestDescroption);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICpDataService/UpdateMcqQuestionDetails", ReplyAction="http://tempuri.org/ICpDataService/UpdateMcqQuestionDetailsResponse")]
        bool UpdateMcqQuestionDetails(long Questionid, string QuestionStatement, string Option1, string Option2, string Option3, string Option4, byte CorrectOption, int iTimeForQuestion, int iMarksForQuestion);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICpDataService/UpdateMcqQuestionDetails", ReplyAction="http://tempuri.org/ICpDataService/UpdateMcqQuestionDetailsResponse")]
        System.Threading.Tasks.Task<bool> UpdateMcqQuestionDetailsAsync(long Questionid, string QuestionStatement, string Option1, string Option2, string Option3, string Option4, byte CorrectOption, int iTimeForQuestion, int iMarksForQuestion);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICpDataService/DeleteMcqTest", ReplyAction="http://tempuri.org/ICpDataService/DeleteMcqTestResponse")]
        bool DeleteMcqTest(long TestId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICpDataService/DeleteMcqTest", ReplyAction="http://tempuri.org/ICpDataService/DeleteMcqTestResponse")]
        System.Threading.Tasks.Task<bool> DeleteMcqTestAsync(long TestId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICpDataService/InsertNewAssignmentToCourse", ReplyAction="http://tempuri.org/ICpDataService/InsertNewAssignmentToCourseResponse")]
        bool InsertNewAssignmentToCourse(string AssignmentName, string AssignmentDescription, byte AssignmentTypeId, string FilePath, System.Nullable<byte> FileTypeId, long CourseId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICpDataService/InsertNewAssignmentToCourse", ReplyAction="http://tempuri.org/ICpDataService/InsertNewAssignmentToCourseResponse")]
        System.Threading.Tasks.Task<bool> InsertNewAssignmentToCourseAsync(string AssignmentName, string AssignmentDescription, byte AssignmentTypeId, string FilePath, System.Nullable<byte> FileTypeId, long CourseId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICpDataService/InsertNewTestToCourse", ReplyAction="http://tempuri.org/ICpDataService/InsertNewTestToCourseResponse")]
        bool InsertNewTestToCourse(string TestName, string TestDescription, byte TestTypeId, string FilePath, System.Nullable<byte> FileTypeId, long CourseId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICpDataService/InsertNewTestToCourse", ReplyAction="http://tempuri.org/ICpDataService/InsertNewTestToCourseResponse")]
        System.Threading.Tasks.Task<bool> InsertNewTestToCourseAsync(string TestName, string TestDescription, byte TestTypeId, string FilePath, System.Nullable<byte> FileTypeId, long CourseId);
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.MessageContractAttribute(WrapperName="GetInstructorIdByClassroomId", WrapperNamespace="http://tempuri.org/", IsWrapped=true)]
    public partial class GetInstructorIdByClassroomIdRequest {
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://tempuri.org/", Order=0)]
        public long ClassroomId;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://tempuri.org/", Order=1)]
        public int InstructorId;
        
        public GetInstructorIdByClassroomIdRequest() {
        }
        
        public GetInstructorIdByClassroomIdRequest(long ClassroomId, int InstructorId) {
            this.ClassroomId = ClassroomId;
            this.InstructorId = InstructorId;
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.MessageContractAttribute(WrapperName="GetInstructorIdByClassroomIdResponse", WrapperNamespace="http://tempuri.org/", IsWrapped=true)]
    public partial class GetInstructorIdByClassroomIdResponse {
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://tempuri.org/", Order=0)]
        public bool GetInstructorIdByClassroomIdResult;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://tempuri.org/", Order=1)]
        public int InstructorId;
        
        public GetInstructorIdByClassroomIdResponse() {
        }
        
        public GetInstructorIdByClassroomIdResponse(bool GetInstructorIdByClassroomIdResult, int InstructorId) {
            this.GetInstructorIdByClassroomIdResult = GetInstructorIdByClassroomIdResult;
            this.InstructorId = InstructorId;
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.MessageContractAttribute(WrapperName="GetCoursePrice", WrapperNamespace="http://tempuri.org/", IsWrapped=true)]
    public partial class GetCoursePriceRequest {
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://tempuri.org/", Order=0)]
        public long CourseId;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://tempuri.org/", Order=1)]
        public int CoursePrice;
        
        public GetCoursePriceRequest() {
        }
        
        public GetCoursePriceRequest(long CourseId, int CoursePrice) {
            this.CourseId = CourseId;
            this.CoursePrice = CoursePrice;
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.MessageContractAttribute(WrapperName="GetCoursePriceResponse", WrapperNamespace="http://tempuri.org/", IsWrapped=true)]
    public partial class GetCoursePriceResponse {
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://tempuri.org/", Order=0)]
        public bool GetCoursePriceResult;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://tempuri.org/", Order=1)]
        public int CoursePrice;
        
        public GetCoursePriceResponse() {
        }
        
        public GetCoursePriceResponse(bool GetCoursePriceResult, int CoursePrice) {
            this.GetCoursePriceResult = GetCoursePriceResult;
            this.CoursePrice = CoursePrice;
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.MessageContractAttribute(WrapperName="InsertNewTestSeries", WrapperNamespace="http://tempuri.org/", IsWrapped=true)]
    public partial class InsertNewTestSeriesRequest {
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://tempuri.org/", Order=0)]
        public int InstructorId;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://tempuri.org/", Order=1)]
        public string TestSeriesName;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://tempuri.org/", Order=2)]
        public string TestSeriesDescription;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://tempuri.org/", Order=3)]
        public string TestSeriesImage;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://tempuri.org/", Order=4)]
        public long TestSeriesId;
        
        public InsertNewTestSeriesRequest() {
        }
        
        public InsertNewTestSeriesRequest(int InstructorId, string TestSeriesName, string TestSeriesDescription, string TestSeriesImage, long TestSeriesId) {
            this.InstructorId = InstructorId;
            this.TestSeriesName = TestSeriesName;
            this.TestSeriesDescription = TestSeriesDescription;
            this.TestSeriesImage = TestSeriesImage;
            this.TestSeriesId = TestSeriesId;
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.MessageContractAttribute(WrapperName="InsertNewTestSeriesResponse", WrapperNamespace="http://tempuri.org/", IsWrapped=true)]
    public partial class InsertNewTestSeriesResponse {
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://tempuri.org/", Order=0)]
        public bool InsertNewTestSeriesResult;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://tempuri.org/", Order=1)]
        public long TestSeriesId;
        
        public InsertNewTestSeriesResponse() {
        }
        
        public InsertNewTestSeriesResponse(bool InsertNewTestSeriesResult, long TestSeriesId) {
            this.InsertNewTestSeriesResult = InsertNewTestSeriesResult;
            this.TestSeriesId = TestSeriesId;
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.MessageContractAttribute(WrapperName="ValidateStudentLogin", WrapperNamespace="http://tempuri.org/", IsWrapped=true)]
    public partial class ValidateStudentLoginRequest {
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://tempuri.org/", Order=0)]
        public string UserId;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://tempuri.org/", Order=1)]
        public string HashedPassword;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://tempuri.org/", Order=2)]
        public long StudentId;
        
        public ValidateStudentLoginRequest() {
        }
        
        public ValidateStudentLoginRequest(string UserId, string HashedPassword, long StudentId) {
            this.UserId = UserId;
            this.HashedPassword = HashedPassword;
            this.StudentId = StudentId;
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.MessageContractAttribute(WrapperName="ValidateStudentLoginResponse", WrapperNamespace="http://tempuri.org/", IsWrapped=true)]
    public partial class ValidateStudentLoginResponse {
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://tempuri.org/", Order=0)]
        public bool ValidateStudentLoginResult;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://tempuri.org/", Order=1)]
        public long StudentId;
        
        public ValidateStudentLoginResponse() {
        }
        
        public ValidateStudentLoginResponse(bool ValidateStudentLoginResult, long StudentId) {
            this.ValidateStudentLoginResult = ValidateStudentLoginResult;
            this.StudentId = StudentId;
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.MessageContractAttribute(WrapperName="GetStudentIdFromUserId", WrapperNamespace="http://tempuri.org/", IsWrapped=true)]
    public partial class GetStudentIdFromUserIdRequest {
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://tempuri.org/", Order=0)]
        public string UserId;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://tempuri.org/", Order=1)]
        public long StudentId;
        
        public GetStudentIdFromUserIdRequest() {
        }
        
        public GetStudentIdFromUserIdRequest(string UserId, long StudentId) {
            this.UserId = UserId;
            this.StudentId = StudentId;
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.MessageContractAttribute(WrapperName="GetStudentIdFromUserIdResponse", WrapperNamespace="http://tempuri.org/", IsWrapped=true)]
    public partial class GetStudentIdFromUserIdResponse {
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://tempuri.org/", Order=0)]
        public bool GetStudentIdFromUserIdResult;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://tempuri.org/", Order=1)]
        public long StudentId;
        
        public GetStudentIdFromUserIdResponse() {
        }
        
        public GetStudentIdFromUserIdResponse(bool GetStudentIdFromUserIdResult, long StudentId) {
            this.GetStudentIdFromUserIdResult = GetStudentIdFromUserIdResult;
            this.StudentId = StudentId;
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.MessageContractAttribute(WrapperName="InsertAssignmentResponse", WrapperNamespace="http://tempuri.org/", IsWrapped=true)]
    public partial class InsertAssignmentResponseRequest {
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://tempuri.org/", Order=0)]
        public long StudentId;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://tempuri.org/", Order=1)]
        public long AssignmentId;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://tempuri.org/", Order=2)]
        public System.DateTime AssignmentStartTime;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://tempuri.org/", Order=3)]
        public System.DateTime AssignmentFinishTime;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://tempuri.org/", Order=4)]
        public string Response;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://tempuri.org/", Order=5)]
        public int PercentageScore;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://tempuri.org/", Order=6)]
        public int TotalNoOfQuestions;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://tempuri.org/", Order=7)]
        public long SubmissionId;
        
        public InsertAssignmentResponseRequest() {
        }
        
        public InsertAssignmentResponseRequest(long StudentId, long AssignmentId, System.DateTime AssignmentStartTime, System.DateTime AssignmentFinishTime, string Response, int PercentageScore, int TotalNoOfQuestions, long SubmissionId) {
            this.StudentId = StudentId;
            this.AssignmentId = AssignmentId;
            this.AssignmentStartTime = AssignmentStartTime;
            this.AssignmentFinishTime = AssignmentFinishTime;
            this.Response = Response;
            this.PercentageScore = PercentageScore;
            this.TotalNoOfQuestions = TotalNoOfQuestions;
            this.SubmissionId = SubmissionId;
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.MessageContractAttribute(WrapperName="InsertAssignmentResponseResponse", WrapperNamespace="http://tempuri.org/", IsWrapped=true)]
    public partial class InsertAssignmentResponseResponse {
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://tempuri.org/", Order=0)]
        public bool InsertAssignmentResponseResult;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://tempuri.org/", Order=1)]
        public long SubmissionId;
        
        public InsertAssignmentResponseResponse() {
        }
        
        public InsertAssignmentResponseResponse(bool InsertAssignmentResponseResult, long SubmissionId) {
            this.InsertAssignmentResponseResult = InsertAssignmentResponseResult;
            this.SubmissionId = SubmissionId;
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.MessageContractAttribute(WrapperName="InsertTestResponse", WrapperNamespace="http://tempuri.org/", IsWrapped=true)]
    public partial class InsertTestResponseRequest {
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://tempuri.org/", Order=0)]
        public long StudentId;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://tempuri.org/", Order=1)]
        public long TestId;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://tempuri.org/", Order=2)]
        public System.DateTime TestStartTime;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://tempuri.org/", Order=3)]
        public System.DateTime TestFinishTime;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://tempuri.org/", Order=4)]
        public string Response;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://tempuri.org/", Order=5)]
        public int PercentageScore;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://tempuri.org/", Order=6)]
        public int TotalNoOfQuestions;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://tempuri.org/", Order=7)]
        public long SubmissionId;
        
        public InsertTestResponseRequest() {
        }
        
        public InsertTestResponseRequest(long StudentId, long TestId, System.DateTime TestStartTime, System.DateTime TestFinishTime, string Response, int PercentageScore, int TotalNoOfQuestions, long SubmissionId) {
            this.StudentId = StudentId;
            this.TestId = TestId;
            this.TestStartTime = TestStartTime;
            this.TestFinishTime = TestFinishTime;
            this.Response = Response;
            this.PercentageScore = PercentageScore;
            this.TotalNoOfQuestions = TotalNoOfQuestions;
            this.SubmissionId = SubmissionId;
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.MessageContractAttribute(WrapperName="InsertTestResponseResponse", WrapperNamespace="http://tempuri.org/", IsWrapped=true)]
    public partial class InsertTestResponseResponse {
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://tempuri.org/", Order=0)]
        public bool InsertTestResponseResult;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://tempuri.org/", Order=1)]
        public long SubmissionId;
        
        public InsertTestResponseResponse() {
        }
        
        public InsertTestResponseResponse(bool InsertTestResponseResult, long SubmissionId) {
            this.InsertTestResponseResult = InsertTestResponseResult;
            this.SubmissionId = SubmissionId;
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.MessageContractAttribute(WrapperName="InsertNewCourseV2", WrapperNamespace="http://tempuri.org/", IsWrapped=true)]
    public partial class InsertNewCourseV2Request {
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://tempuri.org/", Order=0)]
        public string CourseName;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://tempuri.org/", Order=1)]
        public string CourseDescription;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://tempuri.org/", Order=2)]
        public int InstructorId;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://tempuri.org/", Order=3)]
        public string AboutCourse;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://tempuri.org/", Order=4)]
        public string CourseImagePath;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://tempuri.org/", Order=5)]
        public long CourseId;
        
        public InsertNewCourseV2Request() {
        }
        
        public InsertNewCourseV2Request(string CourseName, string CourseDescription, int InstructorId, string AboutCourse, string CourseImagePath, long CourseId) {
            this.CourseName = CourseName;
            this.CourseDescription = CourseDescription;
            this.InstructorId = InstructorId;
            this.AboutCourse = AboutCourse;
            this.CourseImagePath = CourseImagePath;
            this.CourseId = CourseId;
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.MessageContractAttribute(WrapperName="InsertNewCourseV2Response", WrapperNamespace="http://tempuri.org/", IsWrapped=true)]
    public partial class InsertNewCourseV2Response {
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://tempuri.org/", Order=0)]
        public bool InsertNewCourseV2Result;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://tempuri.org/", Order=1)]
        public long CourseId;
        
        public InsertNewCourseV2Response() {
        }
        
        public InsertNewCourseV2Response(bool InsertNewCourseV2Result, long CourseId) {
            this.InsertNewCourseV2Result = InsertNewCourseV2Result;
            this.CourseId = CourseId;
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.MessageContractAttribute(WrapperName="InsertNewIndexToV2Course", WrapperNamespace="http://tempuri.org/", IsWrapped=true)]
    public partial class InsertNewIndexToV2CourseRequest {
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://tempuri.org/", Order=0)]
        public long CourseId;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://tempuri.org/", Order=1)]
        public string IndexName;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://tempuri.org/", Order=2)]
        public string IndexContetHtml;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://tempuri.org/", Order=3)]
        public long IndexId;
        
        public InsertNewIndexToV2CourseRequest() {
        }
        
        public InsertNewIndexToV2CourseRequest(long CourseId, string IndexName, string IndexContetHtml, long IndexId) {
            this.CourseId = CourseId;
            this.IndexName = IndexName;
            this.IndexContetHtml = IndexContetHtml;
            this.IndexId = IndexId;
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.MessageContractAttribute(WrapperName="InsertNewIndexToV2CourseResponse", WrapperNamespace="http://tempuri.org/", IsWrapped=true)]
    public partial class InsertNewIndexToV2CourseResponse {
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://tempuri.org/", Order=0)]
        public bool InsertNewIndexToV2CourseResult;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://tempuri.org/", Order=1)]
        public long IndexId;
        
        public InsertNewIndexToV2CourseResponse() {
        }
        
        public InsertNewIndexToV2CourseResponse(bool InsertNewIndexToV2CourseResult, long IndexId) {
            this.InsertNewIndexToV2CourseResult = InsertNewIndexToV2CourseResult;
            this.IndexId = IndexId;
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.MessageContractAttribute(WrapperName="GetInstructorIdByAssignmentId", WrapperNamespace="http://tempuri.org/", IsWrapped=true)]
    public partial class GetInstructorIdByAssignmentIdRequest {
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://tempuri.org/", Order=0)]
        public long AssignmentId;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://tempuri.org/", Order=1)]
        public int InstructorId;
        
        public GetInstructorIdByAssignmentIdRequest() {
        }
        
        public GetInstructorIdByAssignmentIdRequest(long AssignmentId, int InstructorId) {
            this.AssignmentId = AssignmentId;
            this.InstructorId = InstructorId;
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.MessageContractAttribute(WrapperName="GetInstructorIdByAssignmentIdResponse", WrapperNamespace="http://tempuri.org/", IsWrapped=true)]
    public partial class GetInstructorIdByAssignmentIdResponse {
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://tempuri.org/", Order=0)]
        public bool GetInstructorIdByAssignmentIdResult;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://tempuri.org/", Order=1)]
        public int InstructorId;
        
        public GetInstructorIdByAssignmentIdResponse() {
        }
        
        public GetInstructorIdByAssignmentIdResponse(bool GetInstructorIdByAssignmentIdResult, int InstructorId) {
            this.GetInstructorIdByAssignmentIdResult = GetInstructorIdByAssignmentIdResult;
            this.InstructorId = InstructorId;
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.MessageContractAttribute(WrapperName="GetInstructorIdByTestId", WrapperNamespace="http://tempuri.org/", IsWrapped=true)]
    public partial class GetInstructorIdByTestIdRequest {
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://tempuri.org/", Order=0)]
        public long TestId;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://tempuri.org/", Order=1)]
        public int InstructorId;
        
        public GetInstructorIdByTestIdRequest() {
        }
        
        public GetInstructorIdByTestIdRequest(long TestId, int InstructorId) {
            this.TestId = TestId;
            this.InstructorId = InstructorId;
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.MessageContractAttribute(WrapperName="GetInstructorIdByTestIdResponse", WrapperNamespace="http://tempuri.org/", IsWrapped=true)]
    public partial class GetInstructorIdByTestIdResponse {
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://tempuri.org/", Order=0)]
        public bool GetInstructorIdByTestIdResult;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://tempuri.org/", Order=1)]
        public int InstructorId;
        
        public GetInstructorIdByTestIdResponse() {
        }
        
        public GetInstructorIdByTestIdResponse(bool GetInstructorIdByTestIdResult, int InstructorId) {
            this.GetInstructorIdByTestIdResult = GetInstructorIdByTestIdResult;
            this.InstructorId = InstructorId;
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.MessageContractAttribute(WrapperName="GetInstructorIdByCourseId", WrapperNamespace="http://tempuri.org/", IsWrapped=true)]
    public partial class GetInstructorIdByCourseIdRequest {
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://tempuri.org/", Order=0)]
        public long CourseId;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://tempuri.org/", Order=1)]
        public int InstructorId;
        
        public GetInstructorIdByCourseIdRequest() {
        }
        
        public GetInstructorIdByCourseIdRequest(long CourseId, int InstructorId) {
            this.CourseId = CourseId;
            this.InstructorId = InstructorId;
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.MessageContractAttribute(WrapperName="GetInstructorIdByCourseIdResponse", WrapperNamespace="http://tempuri.org/", IsWrapped=true)]
    public partial class GetInstructorIdByCourseIdResponse {
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://tempuri.org/", Order=0)]
        public bool GetInstructorIdByCourseIdResult;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://tempuri.org/", Order=1)]
        public int InstructorId;
        
        public GetInstructorIdByCourseIdResponse() {
        }
        
        public GetInstructorIdByCourseIdResponse(bool GetInstructorIdByCourseIdResult, int InstructorId) {
            this.GetInstructorIdByCourseIdResult = GetInstructorIdByCourseIdResult;
            this.InstructorId = InstructorId;
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.MessageContractAttribute(WrapperName="InsertNewCourse", WrapperNamespace="http://tempuri.org/", IsWrapped=true)]
    public partial class InsertNewCourseRequest {
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://tempuri.org/", Order=0)]
        public string CourseName;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://tempuri.org/", Order=1)]
        public string CourseDescription;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://tempuri.org/", Order=2)]
        public string CourseImageUrl;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://tempuri.org/", Order=3)]
        public string CourseThumbnailSmall;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://tempuri.org/", Order=4)]
        public string CoursethumbnailMedium;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://tempuri.org/", Order=5)]
        public int InstructorId;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://tempuri.org/", Order=6)]
        public long CourseId;
        
        public InsertNewCourseRequest() {
        }
        
        public InsertNewCourseRequest(string CourseName, string CourseDescription, string CourseImageUrl, string CourseThumbnailSmall, string CoursethumbnailMedium, int InstructorId, long CourseId) {
            this.CourseName = CourseName;
            this.CourseDescription = CourseDescription;
            this.CourseImageUrl = CourseImageUrl;
            this.CourseThumbnailSmall = CourseThumbnailSmall;
            this.CoursethumbnailMedium = CoursethumbnailMedium;
            this.InstructorId = InstructorId;
            this.CourseId = CourseId;
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.MessageContractAttribute(WrapperName="InsertNewCourseResponse", WrapperNamespace="http://tempuri.org/", IsWrapped=true)]
    public partial class InsertNewCourseResponse {
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://tempuri.org/", Order=0)]
        public bool InsertNewCourseResult;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://tempuri.org/", Order=1)]
        public long CourseId;
        
        public InsertNewCourseResponse() {
        }
        
        public InsertNewCourseResponse(bool InsertNewCourseResult, long CourseId) {
            this.InsertNewCourseResult = InsertNewCourseResult;
            this.CourseId = CourseId;
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.MessageContractAttribute(WrapperName="InertNewCourseIndex", WrapperNamespace="http://tempuri.org/", IsWrapped=true)]
    public partial class InertNewCourseIndexRequest {
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://tempuri.org/", Order=0)]
        public string IndexName;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://tempuri.org/", Order=1)]
        public string IndexDescription;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://tempuri.org/", Order=2)]
        public long CourseId;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://tempuri.org/", Order=3)]
        public long IndexId;
        
        public InertNewCourseIndexRequest() {
        }
        
        public InertNewCourseIndexRequest(string IndexName, string IndexDescription, long CourseId, long IndexId) {
            this.IndexName = IndexName;
            this.IndexDescription = IndexDescription;
            this.CourseId = CourseId;
            this.IndexId = IndexId;
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.MessageContractAttribute(WrapperName="InertNewCourseIndexResponse", WrapperNamespace="http://tempuri.org/", IsWrapped=true)]
    public partial class InertNewCourseIndexResponse {
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://tempuri.org/", Order=0)]
        public bool InertNewCourseIndexResult;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://tempuri.org/", Order=1)]
        public long IndexId;
        
        public InertNewCourseIndexResponse() {
        }
        
        public InertNewCourseIndexResponse(bool InertNewCourseIndexResult, long IndexId) {
            this.InertNewCourseIndexResult = InertNewCourseIndexResult;
            this.IndexId = IndexId;
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.MessageContractAttribute(WrapperName="InsertNewTest", WrapperNamespace="http://tempuri.org/", IsWrapped=true)]
    public partial class InsertNewTestRequest {
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://tempuri.org/", Order=0)]
        public string TestName;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://tempuri.org/", Order=1)]
        public string TestDescription;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://tempuri.org/", Order=2)]
        public string FilePath;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://tempuri.org/", Order=3)]
        public short FileTypeId;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://tempuri.org/", Order=4)]
        public short TestType;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://tempuri.org/", Order=5)]
        public long TestId;
        
        public InsertNewTestRequest() {
        }
        
        public InsertNewTestRequest(string TestName, string TestDescription, string FilePath, short FileTypeId, short TestType, long TestId) {
            this.TestName = TestName;
            this.TestDescription = TestDescription;
            this.FilePath = FilePath;
            this.FileTypeId = FileTypeId;
            this.TestType = TestType;
            this.TestId = TestId;
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.MessageContractAttribute(WrapperName="InsertNewTestResponse", WrapperNamespace="http://tempuri.org/", IsWrapped=true)]
    public partial class InsertNewTestResponse {
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://tempuri.org/", Order=0)]
        public bool InsertNewTestResult;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://tempuri.org/", Order=1)]
        public long TestId;
        
        public InsertNewTestResponse() {
        }
        
        public InsertNewTestResponse(bool InsertNewTestResult, long TestId) {
            this.InsertNewTestResult = InsertNewTestResult;
            this.TestId = TestId;
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.MessageContractAttribute(WrapperName="InsertNewAssignment", WrapperNamespace="http://tempuri.org/", IsWrapped=true)]
    public partial class InsertNewAssignmentRequest {
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://tempuri.org/", Order=0)]
        public string AssignmentName;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://tempuri.org/", Order=1)]
        public string FilePath;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://tempuri.org/", Order=2)]
        public short FileTypeId;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://tempuri.org/", Order=3)]
        public short AssignmentType;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://tempuri.org/", Order=4)]
        public string AssignmentDescription;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://tempuri.org/", Order=5)]
        public long AssignmentId;
        
        public InsertNewAssignmentRequest() {
        }
        
        public InsertNewAssignmentRequest(string AssignmentName, string FilePath, short FileTypeId, short AssignmentType, string AssignmentDescription, long AssignmentId) {
            this.AssignmentName = AssignmentName;
            this.FilePath = FilePath;
            this.FileTypeId = FileTypeId;
            this.AssignmentType = AssignmentType;
            this.AssignmentDescription = AssignmentDescription;
            this.AssignmentId = AssignmentId;
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.MessageContractAttribute(WrapperName="InsertNewAssignmentResponse", WrapperNamespace="http://tempuri.org/", IsWrapped=true)]
    public partial class InsertNewAssignmentResponse {
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://tempuri.org/", Order=0)]
        public bool InsertNewAssignmentResult;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://tempuri.org/", Order=1)]
        public long AssignmentId;
        
        public InsertNewAssignmentResponse() {
        }
        
        public InsertNewAssignmentResponse(bool InsertNewAssignmentResult, long AssignmentId) {
            this.InsertNewAssignmentResult = InsertNewAssignmentResult;
            this.AssignmentId = AssignmentId;
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.MessageContractAttribute(WrapperName="GetInstructorIdFromUserId", WrapperNamespace="http://tempuri.org/", IsWrapped=true)]
    public partial class GetInstructorIdFromUserIdRequest {
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://tempuri.org/", Order=0)]
        public string InstructorId;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://tempuri.org/", Order=1)]
        public int Id;
        
        public GetInstructorIdFromUserIdRequest() {
        }
        
        public GetInstructorIdFromUserIdRequest(string InstructorId, int Id) {
            this.InstructorId = InstructorId;
            this.Id = Id;
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.MessageContractAttribute(WrapperName="GetInstructorIdFromUserIdResponse", WrapperNamespace="http://tempuri.org/", IsWrapped=true)]
    public partial class GetInstructorIdFromUserIdResponse {
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://tempuri.org/", Order=0)]
        public bool GetInstructorIdFromUserIdResult;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://tempuri.org/", Order=1)]
        public int Id;
        
        public GetInstructorIdFromUserIdResponse() {
        }
        
        public GetInstructorIdFromUserIdResponse(bool GetInstructorIdFromUserIdResult, int Id) {
            this.GetInstructorIdFromUserIdResult = GetInstructorIdFromUserIdResult;
            this.Id = Id;
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.MessageContractAttribute(WrapperName="InsertNewIndependentAssignment", WrapperNamespace="http://tempuri.org/", IsWrapped=true)]
    public partial class InsertNewIndependentAssignmentRequest {
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://tempuri.org/", Order=0)]
        public int InstructorId;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://tempuri.org/", Order=1)]
        public string AssignmentName;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://tempuri.org/", Order=2)]
        public string AssignmentDescription;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://tempuri.org/", Order=3)]
        public string FilePath;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://tempuri.org/", Order=4)]
        public short FileTypeId;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://tempuri.org/", Order=5)]
        public short AssignmentType;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://tempuri.org/", Order=6)]
        public long AssignmentId;
        
        public InsertNewIndependentAssignmentRequest() {
        }
        
        public InsertNewIndependentAssignmentRequest(int InstructorId, string AssignmentName, string AssignmentDescription, string FilePath, short FileTypeId, short AssignmentType, long AssignmentId) {
            this.InstructorId = InstructorId;
            this.AssignmentName = AssignmentName;
            this.AssignmentDescription = AssignmentDescription;
            this.FilePath = FilePath;
            this.FileTypeId = FileTypeId;
            this.AssignmentType = AssignmentType;
            this.AssignmentId = AssignmentId;
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.MessageContractAttribute(WrapperName="InsertNewIndependentAssignmentResponse", WrapperNamespace="http://tempuri.org/", IsWrapped=true)]
    public partial class InsertNewIndependentAssignmentResponse {
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://tempuri.org/", Order=0)]
        public bool InsertNewIndependentAssignmentResult;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://tempuri.org/", Order=1)]
        public long AssignmentId;
        
        public InsertNewIndependentAssignmentResponse() {
        }
        
        public InsertNewIndependentAssignmentResponse(bool InsertNewIndependentAssignmentResult, long AssignmentId) {
            this.InsertNewIndependentAssignmentResult = InsertNewIndependentAssignmentResult;
            this.AssignmentId = AssignmentId;
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.MessageContractAttribute(WrapperName="InsertNewIndependentTest", WrapperNamespace="http://tempuri.org/", IsWrapped=true)]
    public partial class InsertNewIndependentTestRequest {
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://tempuri.org/", Order=0)]
        public int InstructorId;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://tempuri.org/", Order=1)]
        public string TestName;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://tempuri.org/", Order=2)]
        public string TestDescription;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://tempuri.org/", Order=3)]
        public string FilePath;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://tempuri.org/", Order=4)]
        public short FileTypeId;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://tempuri.org/", Order=5)]
        public short TestType;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://tempuri.org/", Order=6)]
        public long TestId;
        
        public InsertNewIndependentTestRequest() {
        }
        
        public InsertNewIndependentTestRequest(int InstructorId, string TestName, string TestDescription, string FilePath, short FileTypeId, short TestType, long TestId) {
            this.InstructorId = InstructorId;
            this.TestName = TestName;
            this.TestDescription = TestDescription;
            this.FilePath = FilePath;
            this.FileTypeId = FileTypeId;
            this.TestType = TestType;
            this.TestId = TestId;
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.MessageContractAttribute(WrapperName="InsertNewIndependentTestResponse", WrapperNamespace="http://tempuri.org/", IsWrapped=true)]
    public partial class InsertNewIndependentTestResponse {
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://tempuri.org/", Order=0)]
        public bool InsertNewIndependentTestResult;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://tempuri.org/", Order=1)]
        public long TestId;
        
        public InsertNewIndependentTestResponse() {
        }
        
        public InsertNewIndependentTestResponse(bool InsertNewIndependentTestResult, long TestId) {
            this.InsertNewIndependentTestResult = InsertNewIndependentTestResult;
            this.TestId = TestId;
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface ICpDataServiceChannel : StudentDashboard.CPDataService.ICpDataService, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class CpDataServiceClient : System.ServiceModel.ClientBase<StudentDashboard.CPDataService.ICpDataService>, StudentDashboard.CPDataService.ICpDataService {
        
        public CpDataServiceClient() {
        }
        
        public CpDataServiceClient(string endpointConfigurationName) : 
                base(endpointConfigurationName) {
        }
        
        public CpDataServiceClient(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public CpDataServiceClient(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public CpDataServiceClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        public bool InsertOtpToVarifyPhoneNoOfStudent(long StudentId, string Otp) {
            return base.Channel.InsertOtpToVarifyPhoneNoOfStudent(StudentId, Otp);
        }
        
        public System.Threading.Tasks.Task<bool> InsertOtpToVarifyPhoneNoOfStudentAsync(long StudentId, string Otp) {
            return base.Channel.InsertOtpToVarifyPhoneNoOfStudentAsync(StudentId, Otp);
        }
        
        public bool UpdatePhoneNoOfGmailRegStudent(string UserId, string Token, string PhoneNo) {
            return base.Channel.UpdatePhoneNoOfGmailRegStudent(UserId, Token, PhoneNo);
        }
        
        public System.Threading.Tasks.Task<bool> UpdatePhoneNoOfGmailRegStudentAsync(string UserId, string Token, string PhoneNo) {
            return base.Channel.UpdatePhoneNoOfGmailRegStudentAsync(UserId, Token, PhoneNo);
        }
        
        public bool InsertInstructorContactUsDetail(int InstructorId, string Email, string PhoneNo, string Subject, string Message) {
            return base.Channel.InsertInstructorContactUsDetail(InstructorId, Email, PhoneNo, Subject, Message);
        }
        
        public System.Threading.Tasks.Task<bool> InsertInstructorContactUsDetailAsync(int InstructorId, string Email, string PhoneNo, string Subject, string Message) {
            return base.Channel.InsertInstructorContactUsDetailAsync(InstructorId, Email, PhoneNo, Subject, Message);
        }
        
        public System.Data.DataSet GetAllClassroomCategories() {
            return base.Channel.GetAllClassroomCategories();
        }
        
        public System.Threading.Tasks.Task<System.Data.DataSet> GetAllClassroomCategoriesAsync() {
            return base.Channel.GetAllClassroomCategoriesAsync();
        }
        
        public System.Data.DataSet GetStudentsJoinedToClassroomForStudent(long ClassroomId, long StudentId, int MaxRowsToBeFetched, int NoOfRowsFetched) {
            return base.Channel.GetStudentsJoinedToClassroomForStudent(ClassroomId, StudentId, MaxRowsToBeFetched, NoOfRowsFetched);
        }
        
        public System.Threading.Tasks.Task<System.Data.DataSet> GetStudentsJoinedToClassroomForStudentAsync(long ClassroomId, long StudentId, int MaxRowsToBeFetched, int NoOfRowsFetched) {
            return base.Channel.GetStudentsJoinedToClassroomForStudentAsync(ClassroomId, StudentId, MaxRowsToBeFetched, NoOfRowsFetched);
        }
        
        public System.Data.DataSet CheckClassroomMeetingOccuredToday(long ClassroomId) {
            return base.Channel.CheckClassroomMeetingOccuredToday(ClassroomId);
        }
        
        public System.Threading.Tasks.Task<System.Data.DataSet> CheckClassroomMeetingOccuredTodayAsync(long ClassroomId) {
            return base.Channel.CheckClassroomMeetingOccuredTodayAsync(ClassroomId);
        }
        
        public System.Data.DataSet GetAllTrialClassroomMeetingDetailsForStudent(long StudentId, long ClassroomId) {
            return base.Channel.GetAllTrialClassroomMeetingDetailsForStudent(StudentId, ClassroomId);
        }
        
        public System.Threading.Tasks.Task<System.Data.DataSet> GetAllTrialClassroomMeetingDetailsForStudentAsync(long StudentId, long ClassroomId) {
            return base.Channel.GetAllTrialClassroomMeetingDetailsForStudentAsync(StudentId, ClassroomId);
        }
        
        public System.Data.DataSet GetAllClassroomReviews(long ClassroomId, int NoOfRowsToBeFetched, int NoOfRowsFetched) {
            return base.Channel.GetAllClassroomReviews(ClassroomId, NoOfRowsToBeFetched, NoOfRowsFetched);
        }
        
        public System.Threading.Tasks.Task<System.Data.DataSet> GetAllClassroomReviewsAsync(long ClassroomId, int NoOfRowsToBeFetched, int NoOfRowsFetched) {
            return base.Channel.GetAllClassroomReviewsAsync(ClassroomId, NoOfRowsToBeFetched, NoOfRowsFetched);
        }
        
        public System.Data.DataSet GetAvgRatingForClassroom(long ClassroomId) {
            return base.Channel.GetAvgRatingForClassroom(ClassroomId);
        }
        
        public System.Threading.Tasks.Task<System.Data.DataSet> GetAvgRatingForClassroomAsync(long ClassroomId) {
            return base.Channel.GetAvgRatingForClassroomAsync(ClassroomId);
        }
        
        public System.Data.DataSet GetClassroomHomeDetailsForStudent(long ClassroomId, long StudentId) {
            return base.Channel.GetClassroomHomeDetailsForStudent(ClassroomId, StudentId);
        }
        
        public System.Threading.Tasks.Task<System.Data.DataSet> GetClassroomHomeDetailsForStudentAsync(long ClassroomId, long StudentId) {
            return base.Channel.GetClassroomHomeDetailsForStudentAsync(ClassroomId, StudentId);
        }
        
        public System.Data.DataSet GetInstructorClassroomSearchDetails(int InstructorId, string SearchString) {
            return base.Channel.GetInstructorClassroomSearchDetails(InstructorId, SearchString);
        }
        
        public System.Threading.Tasks.Task<System.Data.DataSet> GetInstructorClassroomSearchDetailsAsync(int InstructorId, string SearchString) {
            return base.Channel.GetInstructorClassroomSearchDetailsAsync(InstructorId, SearchString);
        }
        
        public bool UpdateInstructorProfilePicture(int InstructorId, string Url, string MediumSizeUrl, string SmallSizeUrl) {
            return base.Channel.UpdateInstructorProfilePicture(InstructorId, Url, MediumSizeUrl, SmallSizeUrl);
        }
        
        public System.Threading.Tasks.Task<bool> UpdateInstructorProfilePictureAsync(int InstructorId, string Url, string MediumSizeUrl, string SmallSizeUrl) {
            return base.Channel.UpdateInstructorProfilePictureAsync(InstructorId, Url, MediumSizeUrl, SmallSizeUrl);
        }
        
        public bool UpdateStudentProfilePicture(long StudentId, string OriginalFile, string SmallThumbnailUrl, string MediumThumbnailUrl) {
            return base.Channel.UpdateStudentProfilePicture(StudentId, OriginalFile, SmallThumbnailUrl, MediumThumbnailUrl);
        }
        
        public System.Threading.Tasks.Task<bool> UpdateStudentProfilePictureAsync(long StudentId, string OriginalFile, string SmallThumbnailUrl, string MediumThumbnailUrl) {
            return base.Channel.UpdateStudentProfilePictureAsync(StudentId, OriginalFile, SmallThumbnailUrl, MediumThumbnailUrl);
        }
        
        public System.Data.DataSet GetClassroomMeetingDetails(long ClassroomId, long MeetingId) {
            return base.Channel.GetClassroomMeetingDetails(ClassroomId, MeetingId);
        }
        
        public System.Threading.Tasks.Task<System.Data.DataSet> GetClassroomMeetingDetailsAsync(long ClassroomId, long MeetingId) {
            return base.Channel.GetClassroomMeetingDetailsAsync(ClassroomId, MeetingId);
        }
        
        public bool InsertClassroomAttachment(long ClassroomId, string AttachmentName, string AttachmentDescription, string AttachmentUrl) {
            return base.Channel.InsertClassroomAttachment(ClassroomId, AttachmentName, AttachmentDescription, AttachmentUrl);
        }
        
        public System.Threading.Tasks.Task<bool> InsertClassroomAttachmentAsync(long ClassroomId, string AttachmentName, string AttachmentDescription, string AttachmentUrl) {
            return base.Channel.InsertClassroomAttachmentAsync(ClassroomId, AttachmentName, AttachmentDescription, AttachmentUrl);
        }
        
        public bool UpdateClassroomAttachmentDetails(long AttachmentId, string AttachmentName, string AttachmentDescription, string AttachmentUrl) {
            return base.Channel.UpdateClassroomAttachmentDetails(AttachmentId, AttachmentName, AttachmentDescription, AttachmentUrl);
        }
        
        public System.Threading.Tasks.Task<bool> UpdateClassroomAttachmentDetailsAsync(long AttachmentId, string AttachmentName, string AttachmentDescription, string AttachmentUrl) {
            return base.Channel.UpdateClassroomAttachmentDetailsAsync(AttachmentId, AttachmentName, AttachmentDescription, AttachmentUrl);
        }
        
        public bool DeleteClassroomAttachment(long AttachmentId) {
            return base.Channel.DeleteClassroomAttachment(AttachmentId);
        }
        
        public System.Threading.Tasks.Task<bool> DeleteClassroomAttachmentAsync(long AttachmentId) {
            return base.Channel.DeleteClassroomAttachmentAsync(AttachmentId);
        }
        
        public System.Data.DataSet GetClassroomAttachments(long ClassroomId) {
            return base.Channel.GetClassroomAttachments(ClassroomId);
        }
        
        public System.Threading.Tasks.Task<System.Data.DataSet> GetClassroomAttachmentsAsync(long ClassroomId) {
            return base.Channel.GetClassroomAttachmentsAsync(ClassroomId);
        }
        
        public System.Data.DataSet GetInstructorProfileDetailsForStudent(int InstructorId, long StudentId) {
            return base.Channel.GetInstructorProfileDetailsForStudent(InstructorId, StudentId);
        }
        
        public System.Threading.Tasks.Task<System.Data.DataSet> GetInstructorProfileDetailsForStudentAsync(int InstructorId, long StudentId) {
            return base.Channel.GetInstructorProfileDetailsForStudentAsync(InstructorId, StudentId);
        }
        
        public System.Data.DataSet GetClassroomSchedule(long ClassroomId) {
            return base.Channel.GetClassroomSchedule(ClassroomId);
        }
        
        public System.Threading.Tasks.Task<System.Data.DataSet> GetClassroomScheduleAsync(long ClassroomId) {
            return base.Channel.GetClassroomScheduleAsync(ClassroomId);
        }
        
        public bool UpdateClassroomSchedule(long ClassroomId, string ClassroomSchedule) {
            return base.Channel.UpdateClassroomSchedule(ClassroomId, ClassroomSchedule);
        }
        
        public System.Threading.Tasks.Task<bool> UpdateClassroomScheduleAsync(long ClassroomId, string ClassroomSchedule) {
            return base.Channel.UpdateClassroomScheduleAsync(ClassroomId, ClassroomSchedule);
        }
        
        public bool InsertClassroomSchedule(long ClassroomId, string ClassroomSchedule) {
            return base.Channel.InsertClassroomSchedule(ClassroomId, ClassroomSchedule);
        }
        
        public System.Threading.Tasks.Task<bool> InsertClassroomScheduleAsync(long ClassroomId, string ClassroomSchedule) {
            return base.Channel.InsertClassroomScheduleAsync(ClassroomId, ClassroomSchedule);
        }
        
        public System.Data.DataSet GetPublicClassroomDetailsForStudent(int NoOfRowsFetched, long StudentId, int NoOfRecordsToBeFetched, string QueryString) {
            return base.Channel.GetPublicClassroomDetailsForStudent(NoOfRowsFetched, StudentId, NoOfRecordsToBeFetched, QueryString);
        }
        
        public System.Threading.Tasks.Task<System.Data.DataSet> GetPublicClassroomDetailsForStudentAsync(int NoOfRowsFetched, long StudentId, int NoOfRecordsToBeFetched, string QueryString) {
            return base.Channel.GetPublicClassroomDetailsForStudentAsync(NoOfRowsFetched, StudentId, NoOfRecordsToBeFetched, QueryString);
        }
        
        public System.Data.DataSet SearchForCourseForNotLoggedUser(string SerachString, int MaxRowToReturn, int NoOfRowsFetch, int SortType, long StudentId) {
            return base.Channel.SearchForCourseForNotLoggedUser(SerachString, MaxRowToReturn, NoOfRowsFetch, SortType, StudentId);
        }
        
        public System.Threading.Tasks.Task<System.Data.DataSet> SearchForCourseForNotLoggedUserAsync(string SerachString, int MaxRowToReturn, int NoOfRowsFetch, int SortType, long StudentId) {
            return base.Channel.SearchForCourseForNotLoggedUserAsync(SerachString, MaxRowToReturn, NoOfRowsFetch, SortType, StudentId);
        }
        
        public System.Data.DataSet GetInstructorAcademicRecords(int InstructorId) {
            return base.Channel.GetInstructorAcademicRecords(InstructorId);
        }
        
        public System.Threading.Tasks.Task<System.Data.DataSet> GetInstructorAcademicRecordsAsync(int InstructorId) {
            return base.Channel.GetInstructorAcademicRecordsAsync(InstructorId);
        }
        
        public bool UpdateInstructorAcademicRecord(string LinkedInId, string GoogleScholarId, int InstructorId, string SchoolDetails) {
            return base.Channel.UpdateInstructorAcademicRecord(LinkedInId, GoogleScholarId, InstructorId, SchoolDetails);
        }
        
        public System.Threading.Tasks.Task<bool> UpdateInstructorAcademicRecordAsync(string LinkedInId, string GoogleScholarId, int InstructorId, string SchoolDetails) {
            return base.Channel.UpdateInstructorAcademicRecordAsync(LinkedInId, GoogleScholarId, InstructorId, SchoolDetails);
        }
        
        public bool UpdateInstructorBio(int InstructorId, string InstructoBioData) {
            return base.Channel.UpdateInstructorBio(InstructorId, InstructoBioData);
        }
        
        public System.Threading.Tasks.Task<bool> UpdateInstructorBioAsync(int InstructorId, string InstructoBioData) {
            return base.Channel.UpdateInstructorBioAsync(InstructorId, InstructoBioData);
        }
        
        public System.Data.DataSet GetClassroomPaymentDetails(long ClassroomId, long StudentId) {
            return base.Channel.GetClassroomPaymentDetails(ClassroomId, StudentId);
        }
        
        public System.Threading.Tasks.Task<System.Data.DataSet> GetClassroomPaymentDetailsAsync(long ClassroomId, long StudentId) {
            return base.Channel.GetClassroomPaymentDetailsAsync(ClassroomId, StudentId);
        }
        
        public bool CreatePaymentOrder(string OrederId, string CustomerName, string CustomerEmail, string CustomerPhoneNo, int AmountInPaise, string CustomerAddress) {
            return base.Channel.CreatePaymentOrder(OrederId, CustomerName, CustomerEmail, CustomerPhoneNo, AmountInPaise, CustomerAddress);
        }
        
        public System.Threading.Tasks.Task<bool> CreatePaymentOrderAsync(string OrederId, string CustomerName, string CustomerEmail, string CustomerPhoneNo, int AmountInPaise, string CustomerAddress) {
            return base.Channel.CreatePaymentOrderAsync(OrederId, CustomerName, CustomerEmail, CustomerPhoneNo, AmountInPaise, CustomerAddress);
        }
        
        public bool InsertRazorPayTxnDetails(string OrederId, string RazorPayPaymentId, string RazorPayOderId, string RazorPaySignature) {
            return base.Channel.InsertRazorPayTxnDetails(OrederId, RazorPayPaymentId, RazorPayOderId, RazorPaySignature);
        }
        
        public System.Threading.Tasks.Task<bool> InsertRazorPayTxnDetailsAsync(string OrederId, string RazorPayPaymentId, string RazorPayOderId, string RazorPaySignature) {
            return base.Channel.InsertRazorPayTxnDetailsAsync(OrederId, RazorPayPaymentId, RazorPayOderId, RazorPaySignature);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        StudentDashboard.CPDataService.GetInstructorIdByClassroomIdResponse StudentDashboard.CPDataService.ICpDataService.GetInstructorIdByClassroomId(StudentDashboard.CPDataService.GetInstructorIdByClassroomIdRequest request) {
            return base.Channel.GetInstructorIdByClassroomId(request);
        }
        
        public bool GetInstructorIdByClassroomId(long ClassroomId, ref int InstructorId) {
            StudentDashboard.CPDataService.GetInstructorIdByClassroomIdRequest inValue = new StudentDashboard.CPDataService.GetInstructorIdByClassroomIdRequest();
            inValue.ClassroomId = ClassroomId;
            inValue.InstructorId = InstructorId;
            StudentDashboard.CPDataService.GetInstructorIdByClassroomIdResponse retVal = ((StudentDashboard.CPDataService.ICpDataService)(this)).GetInstructorIdByClassroomId(inValue);
            InstructorId = retVal.InstructorId;
            return retVal.GetInstructorIdByClassroomIdResult;
        }
        
        public System.Threading.Tasks.Task<StudentDashboard.CPDataService.GetInstructorIdByClassroomIdResponse> GetInstructorIdByClassroomIdAsync(StudentDashboard.CPDataService.GetInstructorIdByClassroomIdRequest request) {
            return base.Channel.GetInstructorIdByClassroomIdAsync(request);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        StudentDashboard.CPDataService.GetCoursePriceResponse StudentDashboard.CPDataService.ICpDataService.GetCoursePrice(StudentDashboard.CPDataService.GetCoursePriceRequest request) {
            return base.Channel.GetCoursePrice(request);
        }
        
        public bool GetCoursePrice(long CourseId, ref int CoursePrice) {
            StudentDashboard.CPDataService.GetCoursePriceRequest inValue = new StudentDashboard.CPDataService.GetCoursePriceRequest();
            inValue.CourseId = CourseId;
            inValue.CoursePrice = CoursePrice;
            StudentDashboard.CPDataService.GetCoursePriceResponse retVal = ((StudentDashboard.CPDataService.ICpDataService)(this)).GetCoursePrice(inValue);
            CoursePrice = retVal.CoursePrice;
            return retVal.GetCoursePriceResult;
        }
        
        public System.Threading.Tasks.Task<StudentDashboard.CPDataService.GetCoursePriceResponse> GetCoursePriceAsync(StudentDashboard.CPDataService.GetCoursePriceRequest request) {
            return base.Channel.GetCoursePriceAsync(request);
        }
        
        public System.Data.DataSet GetCoursePaymentDetails(long CourseId, long StudentId) {
            return base.Channel.GetCoursePaymentDetails(CourseId, StudentId);
        }
        
        public System.Threading.Tasks.Task<System.Data.DataSet> GetCoursePaymentDetailsAsync(long CourseId, long StudentId) {
            return base.Channel.GetCoursePaymentDetailsAsync(CourseId, StudentId);
        }
        
        public System.Data.DataSet GetInstructorEarnings(int InstructorId) {
            return base.Channel.GetInstructorEarnings(InstructorId);
        }
        
        public System.Threading.Tasks.Task<System.Data.DataSet> GetInstructorEarningsAsync(int InstructorId) {
            return base.Channel.GetInstructorEarningsAsync(InstructorId);
        }
        
        public System.Data.DataSet GetMonthwiseInstructorClassroomEarning(int InstructorId) {
            return base.Channel.GetMonthwiseInstructorClassroomEarning(InstructorId);
        }
        
        public System.Threading.Tasks.Task<System.Data.DataSet> GetMonthwiseInstructorClassroomEarningAsync(int InstructorId) {
            return base.Channel.GetMonthwiseInstructorClassroomEarningAsync(InstructorId);
        }
        
        public System.Data.DataSet GetMonthwiseInstructorCourseEarning(int InstructorId) {
            return base.Channel.GetMonthwiseInstructorCourseEarning(InstructorId);
        }
        
        public System.Threading.Tasks.Task<System.Data.DataSet> GetMonthwiseInstructorCourseEarningAsync(int InstructorId) {
            return base.Channel.GetMonthwiseInstructorCourseEarningAsync(InstructorId);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        StudentDashboard.CPDataService.InsertNewTestSeriesResponse StudentDashboard.CPDataService.ICpDataService.InsertNewTestSeries(StudentDashboard.CPDataService.InsertNewTestSeriesRequest request) {
            return base.Channel.InsertNewTestSeries(request);
        }
        
        public bool InsertNewTestSeries(int InstructorId, string TestSeriesName, string TestSeriesDescription, string TestSeriesImage, ref long TestSeriesId) {
            StudentDashboard.CPDataService.InsertNewTestSeriesRequest inValue = new StudentDashboard.CPDataService.InsertNewTestSeriesRequest();
            inValue.InstructorId = InstructorId;
            inValue.TestSeriesName = TestSeriesName;
            inValue.TestSeriesDescription = TestSeriesDescription;
            inValue.TestSeriesImage = TestSeriesImage;
            inValue.TestSeriesId = TestSeriesId;
            StudentDashboard.CPDataService.InsertNewTestSeriesResponse retVal = ((StudentDashboard.CPDataService.ICpDataService)(this)).InsertNewTestSeries(inValue);
            TestSeriesId = retVal.TestSeriesId;
            return retVal.InsertNewTestSeriesResult;
        }
        
        public System.Threading.Tasks.Task<StudentDashboard.CPDataService.InsertNewTestSeriesResponse> InsertNewTestSeriesAsync(StudentDashboard.CPDataService.InsertNewTestSeriesRequest request) {
            return base.Channel.InsertNewTestSeriesAsync(request);
        }
        
        public bool InsertNewTestToTestSeries(long TestSeriesId, long TestId) {
            return base.Channel.InsertNewTestToTestSeries(TestSeriesId, TestId);
        }
        
        public System.Threading.Tasks.Task<bool> InsertNewTestToTestSeriesAsync(long TestSeriesId, long TestId) {
            return base.Channel.InsertNewTestToTestSeriesAsync(TestSeriesId, TestId);
        }
        
        public bool DeletTestFromTestSeries(long TestSeriesContentId) {
            return base.Channel.DeletTestFromTestSeries(TestSeriesContentId);
        }
        
        public System.Threading.Tasks.Task<bool> DeletTestFromTestSeriesAsync(long TestSeriesContentId) {
            return base.Channel.DeletTestFromTestSeriesAsync(TestSeriesContentId);
        }
        
        public System.Data.DataSet GetTestSearchResultForStudent(long StudentId, string SearchString, int MaxRowToFetch, long LastFetchedId) {
            return base.Channel.GetTestSearchResultForStudent(StudentId, SearchString, MaxRowToFetch, LastFetchedId);
        }
        
        public System.Threading.Tasks.Task<System.Data.DataSet> GetTestSearchResultForStudentAsync(long StudentId, string SearchString, int MaxRowToFetch, long LastFetchedId) {
            return base.Channel.GetTestSearchResultForStudentAsync(StudentId, SearchString, MaxRowToFetch, LastFetchedId);
        }
        
        public bool AddNewTestAnonymousTestSubmission(long TestId, string TestAccessCode) {
            return base.Channel.AddNewTestAnonymousTestSubmission(TestId, TestAccessCode);
        }
        
        public System.Threading.Tasks.Task<bool> AddNewTestAnonymousTestSubmissionAsync(long TestId, string TestAccessCode) {
            return base.Channel.AddNewTestAnonymousTestSubmissionAsync(TestId, TestAccessCode);
        }
        
        public bool UpdateClassroomSyllabus(long ClassroomId, string ClassroomSyallabus) {
            return base.Channel.UpdateClassroomSyllabus(ClassroomId, ClassroomSyallabus);
        }
        
        public System.Threading.Tasks.Task<bool> UpdateClassroomSyllabusAsync(long ClassroomId, string ClassroomSyallabus) {
            return base.Channel.UpdateClassroomSyllabusAsync(ClassroomId, ClassroomSyallabus);
        }
        
        public System.Data.DataSet GetClassroomsForHomePage() {
            return base.Channel.GetClassroomsForHomePage();
        }
        
        public System.Threading.Tasks.Task<System.Data.DataSet> GetClassroomsForHomePageAsync() {
            return base.Channel.GetClassroomsForHomePageAsync();
        }
        
        public System.Data.DataSet GetClassRoomDetailsForStudent(long ClassRoomId) {
            return base.Channel.GetClassRoomDetailsForStudent(ClassRoomId);
        }
        
        public System.Threading.Tasks.Task<System.Data.DataSet> GetClassRoomDetailsForStudentAsync(long ClassRoomId) {
            return base.Channel.GetClassRoomDetailsForStudentAsync(ClassRoomId);
        }
        
        public bool InsertEmailSubscriber(string EmailId) {
            return base.Channel.InsertEmailSubscriber(EmailId);
        }
        
        public System.Threading.Tasks.Task<bool> InsertEmailSubscriberAsync(string EmailId) {
            return base.Channel.InsertEmailSubscriberAsync(EmailId);
        }
        
        public bool InsertStudentAlert(int AlertTypeId, long StudentId, string TargetUrl) {
            return base.Channel.InsertStudentAlert(AlertTypeId, StudentId, TargetUrl);
        }
        
        public System.Threading.Tasks.Task<bool> InsertStudentAlertAsync(int AlertTypeId, long StudentId, string TargetUrl) {
            return base.Channel.InsertStudentAlertAsync(AlertTypeId, StudentId, TargetUrl);
        }
        
        public System.Data.DataSet GetStudentRecentCourseJoin(long StudentId) {
            return base.Channel.GetStudentRecentCourseJoin(StudentId);
        }
        
        public System.Threading.Tasks.Task<System.Data.DataSet> GetStudentRecentCourseJoinAsync(long StudentId) {
            return base.Channel.GetStudentRecentCourseJoinAsync(StudentId);
        }
        
        public System.Data.DataSet GetStudentRecentLiveClassJoin(long StudentId) {
            return base.Channel.GetStudentRecentLiveClassJoin(StudentId);
        }
        
        public System.Threading.Tasks.Task<System.Data.DataSet> GetStudentRecentLiveClassJoinAsync(long StudentId) {
            return base.Channel.GetStudentRecentLiveClassJoinAsync(StudentId);
        }
        
        public System.Data.DataSet GetSearchResultForStudent(string SearchString, int MaxRowToReturn, int NoOfRowsFetch, long StudentId) {
            return base.Channel.GetSearchResultForStudent(SearchString, MaxRowToReturn, NoOfRowsFetch, StudentId);
        }
        
        public System.Threading.Tasks.Task<System.Data.DataSet> GetSearchResultForStudentAsync(string SearchString, int MaxRowToReturn, int NoOfRowsFetch, long StudentId) {
            return base.Channel.GetSearchResultForStudentAsync(SearchString, MaxRowToReturn, NoOfRowsFetch, StudentId);
        }
        
        public bool UpdateClassroomBackground(long ClassroomId, string OriginalImagePath, string SmallIcon, string MediumIcon) {
            return base.Channel.UpdateClassroomBackground(ClassroomId, OriginalImagePath, SmallIcon, MediumIcon);
        }
        
        public System.Threading.Tasks.Task<bool> UpdateClassroomBackgroundAsync(long ClassroomId, string OriginalImagePath, string SmallIcon, string MediumIcon) {
            return base.Channel.UpdateClassroomBackgroundAsync(ClassroomId, OriginalImagePath, SmallIcon, MediumIcon);
        }
        
        public bool UpdateCourseBackground(long CourseId, string OriginalImagePath, string SmallIcon, string MediumIcon) {
            return base.Channel.UpdateCourseBackground(CourseId, OriginalImagePath, SmallIcon, MediumIcon);
        }
        
        public System.Threading.Tasks.Task<bool> UpdateCourseBackgroundAsync(long CourseId, string OriginalImagePath, string SmallIcon, string MediumIcon) {
            return base.Channel.UpdateCourseBackgroundAsync(CourseId, OriginalImagePath, SmallIcon, MediumIcon);
        }
        
        public bool JoinNewStudent(long StudentStaertedFollowingId, long StudentGettingFollowedId) {
            return base.Channel.JoinNewStudent(StudentStaertedFollowingId, StudentGettingFollowedId);
        }
        
        public System.Threading.Tasks.Task<bool> JoinNewStudentAsync(long StudentStaertedFollowingId, long StudentGettingFollowedId) {
            return base.Channel.JoinNewStudentAsync(StudentStaertedFollowingId, StudentGettingFollowedId);
        }
        
        public bool UnfollowStudent(long StudentStaertedFollowingId, long StudentGettingFollowedId) {
            return base.Channel.UnfollowStudent(StudentStaertedFollowingId, StudentGettingFollowedId);
        }
        
        public System.Threading.Tasks.Task<bool> UnfollowStudentAsync(long StudentStaertedFollowingId, long StudentGettingFollowedId) {
            return base.Channel.UnfollowStudentAsync(StudentStaertedFollowingId, StudentGettingFollowedId);
        }
        
        public bool FollowBackStudent(long StudentStaertedFollowingId, long StudentGettingFollowedId) {
            return base.Channel.FollowBackStudent(StudentStaertedFollowingId, StudentGettingFollowedId);
        }
        
        public System.Threading.Tasks.Task<bool> FollowBackStudentAsync(long StudentStaertedFollowingId, long StudentGettingFollowedId) {
            return base.Channel.FollowBackStudentAsync(StudentStaertedFollowingId, StudentGettingFollowedId);
        }
        
        public System.Data.DataSet GetAllStudentsToFollow(long StudentId, int NoOfRowsFetched, int NoOfRowsToBeFetched, string SearchString) {
            return base.Channel.GetAllStudentsToFollow(StudentId, NoOfRowsFetched, NoOfRowsToBeFetched, SearchString);
        }
        
        public System.Threading.Tasks.Task<System.Data.DataSet> GetAllStudentsToFollowAsync(long StudentId, int NoOfRowsFetched, int NoOfRowsToBeFetched, string SearchString) {
            return base.Channel.GetAllStudentsToFollowAsync(StudentId, NoOfRowsFetched, NoOfRowsToBeFetched, SearchString);
        }
        
        public System.Data.DataSet GetStudentPublicProfileDetails(long StudentId) {
            return base.Channel.GetStudentPublicProfileDetails(StudentId);
        }
        
        public System.Threading.Tasks.Task<System.Data.DataSet> GetStudentPublicProfileDetailsAsync(long StudentId) {
            return base.Channel.GetStudentPublicProfileDetailsAsync(StudentId);
        }
        
        public System.Data.DataSet GetAllStudentsFollowedByStudent(long StudentId, int NoOfRowsFetched, int NoOfRowsToBeFetched) {
            return base.Channel.GetAllStudentsFollowedByStudent(StudentId, NoOfRowsFetched, NoOfRowsToBeFetched);
        }
        
        public System.Threading.Tasks.Task<System.Data.DataSet> GetAllStudentsFollowedByStudentAsync(long StudentId, int NoOfRowsFetched, int NoOfRowsToBeFetched) {
            return base.Channel.GetAllStudentsFollowedByStudentAsync(StudentId, NoOfRowsFetched, NoOfRowsToBeFetched);
        }
        
        public System.Data.DataSet GetStudentFriendDetails(long StudentId, long FriendId) {
            return base.Channel.GetStudentFriendDetails(StudentId, FriendId);
        }
        
        public System.Threading.Tasks.Task<System.Data.DataSet> GetStudentFriendDetailsAsync(long StudentId, long FriendId) {
            return base.Channel.GetStudentFriendDetailsAsync(StudentId, FriendId);
        }
        
        public System.Data.DataSet CheckStudentFollowingStudent(long StudentId, long StudentToBeFollowedId) {
            return base.Channel.CheckStudentFollowingStudent(StudentId, StudentToBeFollowedId);
        }
        
        public System.Threading.Tasks.Task<System.Data.DataSet> CheckStudentFollowingStudentAsync(long StudentId, long StudentToBeFollowedId) {
            return base.Channel.CheckStudentFollowingStudentAsync(StudentId, StudentToBeFollowedId);
        }
        
        public System.Data.DataSet GetStudentSelfPublicDetails(long StudentId) {
            return base.Channel.GetStudentSelfPublicDetails(StudentId);
        }
        
        public System.Threading.Tasks.Task<System.Data.DataSet> GetStudentSelfPublicDetailsAsync(long StudentId) {
            return base.Channel.GetStudentSelfPublicDetailsAsync(StudentId);
        }
        
        public bool UpdateClassroomsingleMeetingDetails(long MeetingId, string VideoUrl, string TopicName, string TopicNotes) {
            return base.Channel.UpdateClassroomsingleMeetingDetails(MeetingId, VideoUrl, TopicName, TopicNotes);
        }
        
        public System.Threading.Tasks.Task<bool> UpdateClassroomsingleMeetingDetailsAsync(long MeetingId, string VideoUrl, string TopicName, string TopicNotes) {
            return base.Channel.UpdateClassroomsingleMeetingDetailsAsync(MeetingId, VideoUrl, TopicName, TopicNotes);
        }
        
        public System.Data.DataSet GetLiveClassMeetingDetails(long MeetingId) {
            return base.Channel.GetLiveClassMeetingDetails(MeetingId);
        }
        
        public System.Threading.Tasks.Task<System.Data.DataSet> GetLiveClassMeetingDetailsAsync(long MeetingId) {
            return base.Channel.GetLiveClassMeetingDetailsAsync(MeetingId);
        }
        
        public System.Data.DataSet GetClassroomAllMeetingDetailsForStudent(long StudentId, long ClassroomId) {
            return base.Channel.GetClassroomAllMeetingDetailsForStudent(StudentId, ClassroomId);
        }
        
        public System.Threading.Tasks.Task<System.Data.DataSet> GetClassroomAllMeetingDetailsForStudentAsync(long StudentId, long ClassroomId) {
            return base.Channel.GetClassroomAllMeetingDetailsForStudentAsync(StudentId, ClassroomId);
        }
        
        public System.Data.DataSet GetClassroomMeetingDetailsForStudent(long StudentId, long MeetingId) {
            return base.Channel.GetClassroomMeetingDetailsForStudent(StudentId, MeetingId);
        }
        
        public System.Threading.Tasks.Task<System.Data.DataSet> GetClassroomMeetingDetailsForStudentAsync(long StudentId, long MeetingId) {
            return base.Channel.GetClassroomMeetingDetailsForStudentAsync(StudentId, MeetingId);
        }
        
        public System.Data.DataSet GetClassroomSyllabus(long ClassroomId) {
            return base.Channel.GetClassroomSyllabus(ClassroomId);
        }
        
        public System.Threading.Tasks.Task<System.Data.DataSet> GetClassroomSyllabusAsync(long ClassroomId) {
            return base.Channel.GetClassroomSyllabusAsync(ClassroomId);
        }
        
        public bool MarkStudentClassroomPaymentSuccessful(long ClassroomId, long StudentId) {
            return base.Channel.MarkStudentClassroomPaymentSuccessful(ClassroomId, StudentId);
        }
        
        public System.Threading.Tasks.Task<bool> MarkStudentClassroomPaymentSuccessfulAsync(long ClassroomId, long StudentId) {
            return base.Channel.MarkStudentClassroomPaymentSuccessfulAsync(ClassroomId, StudentId);
        }
        
        public System.Data.DataSet SearchInstructorByUserId(string SearchString) {
            return base.Channel.SearchInstructorByUserId(SearchString);
        }
        
        public System.Threading.Tasks.Task<System.Data.DataSet> SearchInstructorByUserIdAsync(string SearchString) {
            return base.Channel.SearchInstructorByUserIdAsync(SearchString);
        }
        
        public bool InsertOrUpdateClassroomFeedbackByStudent(long ClassroomId, long StudentId, string FeedbackMessage, int NoOfRatings) {
            return base.Channel.InsertOrUpdateClassroomFeedbackByStudent(ClassroomId, StudentId, FeedbackMessage, NoOfRatings);
        }
        
        public System.Threading.Tasks.Task<bool> InsertOrUpdateClassroomFeedbackByStudentAsync(long ClassroomId, long StudentId, string FeedbackMessage, int NoOfRatings) {
            return base.Channel.InsertOrUpdateClassroomFeedbackByStudentAsync(ClassroomId, StudentId, FeedbackMessage, NoOfRatings);
        }
        
        public System.Data.DataSet GetAllCoupons() {
            return base.Channel.GetAllCoupons();
        }
        
        public System.Threading.Tasks.Task<System.Data.DataSet> GetAllCouponsAsync() {
            return base.Channel.GetAllCouponsAsync();
        }
        
        public bool SendClassroomNotification(long ClassroomId, string NotificationMessage) {
            return base.Channel.SendClassroomNotification(ClassroomId, NotificationMessage);
        }
        
        public System.Threading.Tasks.Task<bool> SendClassroomNotificationAsync(long ClassroomId, string NotificationMessage) {
            return base.Channel.SendClassroomNotificationAsync(ClassroomId, NotificationMessage);
        }
        
        public bool RegisterNewStudentViaGmail(string GmailId, string FirstName, string LastName, string UserId, string PhoneNo, string PhoneNoVarificationGuid, string ProfileUrl) {
            return base.Channel.RegisterNewStudentViaGmail(GmailId, FirstName, LastName, UserId, PhoneNo, PhoneNoVarificationGuid, ProfileUrl);
        }
        
        public System.Threading.Tasks.Task<bool> RegisterNewStudentViaGmailAsync(string GmailId, string FirstName, string LastName, string UserId, string PhoneNo, string PhoneNoVarificationGuid, string ProfileUrl) {
            return base.Channel.RegisterNewStudentViaGmailAsync(GmailId, FirstName, LastName, UserId, PhoneNo, PhoneNoVarificationGuid, ProfileUrl);
        }
        
        public System.Data.DataSet CheckGmailUserAlreadyExists(string GmailId, string UserId) {
            return base.Channel.CheckGmailUserAlreadyExists(GmailId, UserId);
        }
        
        public System.Threading.Tasks.Task<System.Data.DataSet> CheckGmailUserAlreadyExistsAsync(string GmailId, string UserId) {
            return base.Channel.CheckGmailUserAlreadyExistsAsync(GmailId, UserId);
        }
        
        public bool VarifyStudentPhoneNo(string UserId, string Otp, string PhoneNoGuid) {
            return base.Channel.VarifyStudentPhoneNo(UserId, Otp, PhoneNoGuid);
        }
        
        public System.Threading.Tasks.Task<bool> VarifyStudentPhoneNoAsync(string UserId, string Otp, string PhoneNoGuid) {
            return base.Channel.VarifyStudentPhoneNoAsync(UserId, Otp, PhoneNoGuid);
        }
        
        public bool UpdateNotificationStatus(bool Status, long NotificationId) {
            return base.Channel.UpdateNotificationStatus(Status, NotificationId);
        }
        
        public System.Threading.Tasks.Task<bool> UpdateNotificationStatusAsync(bool Status, long NotificationId) {
            return base.Channel.UpdateNotificationStatusAsync(Status, NotificationId);
        }
        
        public System.Data.DataSet GetAllNotificationToPrecess(int MaxRetryCount) {
            return base.Channel.GetAllNotificationToPrecess(MaxRetryCount);
        }
        
        public System.Threading.Tasks.Task<System.Data.DataSet> GetAllNotificationToPrecessAsync(int MaxRetryCount) {
            return base.Channel.GetAllNotificationToPrecessAsync(MaxRetryCount);
        }
        
        public bool InsertSmsNotification(int NotificationTypeId, string SmsBody, string ReceiverPhoneNo) {
            return base.Channel.InsertSmsNotification(NotificationTypeId, SmsBody, ReceiverPhoneNo);
        }
        
        public System.Threading.Tasks.Task<bool> InsertSmsNotificationAsync(int NotificationTypeId, string SmsBody, string ReceiverPhoneNo) {
            return base.Channel.InsertSmsNotificationAsync(NotificationTypeId, SmsBody, ReceiverPhoneNo);
        }
        
        public bool InsertStudentPasswordRecoveryRequest(string UserId, string Token, string OTP) {
            return base.Channel.InsertStudentPasswordRecoveryRequest(UserId, Token, OTP);
        }
        
        public System.Threading.Tasks.Task<bool> InsertStudentPasswordRecoveryRequestAsync(string UserId, string Token, string OTP) {
            return base.Channel.InsertStudentPasswordRecoveryRequestAsync(UserId, Token, OTP);
        }
        
        public System.Data.DataSet ValidateStudentPasswordRecoveryRequest(string UserId, string Token, string OTP) {
            return base.Channel.ValidateStudentPasswordRecoveryRequest(UserId, Token, OTP);
        }
        
        public System.Threading.Tasks.Task<System.Data.DataSet> ValidateStudentPasswordRecoveryRequestAsync(string UserId, string Token, string OTP) {
            return base.Channel.ValidateStudentPasswordRecoveryRequestAsync(UserId, Token, OTP);
        }
        
        public bool ChanegPasswordAfterAuthentication(string UserId, string Token, string HashedPassword) {
            return base.Channel.ChanegPasswordAfterAuthentication(UserId, Token, HashedPassword);
        }
        
        public System.Threading.Tasks.Task<bool> ChanegPasswordAfterAuthenticationAsync(string UserId, string Token, string HashedPassword) {
            return base.Channel.ChanegPasswordAfterAuthenticationAsync(UserId, Token, HashedPassword);
        }
        
        public bool MarkOtpVarified(string UserId, string Token) {
            return base.Channel.MarkOtpVarified(UserId, Token);
        }
        
        public System.Threading.Tasks.Task<bool> MarkOtpVarifiedAsync(string UserId, string Token) {
            return base.Channel.MarkOtpVarifiedAsync(UserId, Token);
        }
        
        public bool ValidatePhoneNoVarificationLinkForStudent(string UserId, string guid) {
            return base.Channel.ValidatePhoneNoVarificationLinkForStudent(UserId, guid);
        }
        
        public System.Threading.Tasks.Task<bool> ValidatePhoneNoVarificationLinkForStudentAsync(string UserId, string guid) {
            return base.Channel.ValidatePhoneNoVarificationLinkForStudentAsync(UserId, guid);
        }
        
        public bool ValidatePhoneNoVarificationLinkForInstructor(string UserId, string guid) {
            return base.Channel.ValidatePhoneNoVarificationLinkForInstructor(UserId, guid);
        }
        
        public System.Threading.Tasks.Task<bool> ValidatePhoneNoVarificationLinkForInstructorAsync(string UserId, string guid) {
            return base.Channel.ValidatePhoneNoVarificationLinkForInstructorAsync(UserId, guid);
        }
        
        public bool InsertInstructorPasswordRecoveryRequest(string UserId, string Token, string OTP) {
            return base.Channel.InsertInstructorPasswordRecoveryRequest(UserId, Token, OTP);
        }
        
        public System.Threading.Tasks.Task<bool> InsertInstructorPasswordRecoveryRequestAsync(string UserId, string Token, string OTP) {
            return base.Channel.InsertInstructorPasswordRecoveryRequestAsync(UserId, Token, OTP);
        }
        
        public System.Data.DataSet ValidateInstructorPasswordRecoveryRequest(string UserId, string Token, string OTP) {
            return base.Channel.ValidateInstructorPasswordRecoveryRequest(UserId, Token, OTP);
        }
        
        public System.Threading.Tasks.Task<System.Data.DataSet> ValidateInstructorPasswordRecoveryRequestAsync(string UserId, string Token, string OTP) {
            return base.Channel.ValidateInstructorPasswordRecoveryRequestAsync(UserId, Token, OTP);
        }
        
        public bool ChangePasswordAfterAuthenticationForInstructor(string UserId, string Token, string HashedPassword) {
            return base.Channel.ChangePasswordAfterAuthenticationForInstructor(UserId, Token, HashedPassword);
        }
        
        public System.Threading.Tasks.Task<bool> ChangePasswordAfterAuthenticationForInstructorAsync(string UserId, string Token, string HashedPassword) {
            return base.Channel.ChangePasswordAfterAuthenticationForInstructorAsync(UserId, Token, HashedPassword);
        }
        
        public bool MarkPassowordVarificationOtpVarifiedForInstructor(string UserId, string Token) {
            return base.Channel.MarkPassowordVarificationOtpVarifiedForInstructor(UserId, Token);
        }
        
        public System.Threading.Tasks.Task<bool> MarkPassowordVarificationOtpVarifiedForInstructorAsync(string UserId, string Token) {
            return base.Channel.MarkPassowordVarificationOtpVarifiedForInstructorAsync(UserId, Token);
        }
        
        public System.Data.DataSet CheckCourseIdExsitsForInstructor(int InstructoId, long CourseId) {
            return base.Channel.CheckCourseIdExsitsForInstructor(InstructoId, CourseId);
        }
        
        public System.Threading.Tasks.Task<System.Data.DataSet> CheckCourseIdExsitsForInstructorAsync(int InstructoId, long CourseId) {
            return base.Channel.CheckCourseIdExsitsForInstructorAsync(InstructoId, CourseId);
        }
        
        public System.Data.DataSet CheckIndexIdExsitsForInstructor(int InstructoId, long IndexId) {
            return base.Channel.CheckIndexIdExsitsForInstructor(InstructoId, IndexId);
        }
        
        public System.Threading.Tasks.Task<System.Data.DataSet> CheckIndexIdExsitsForInstructorAsync(int InstructoId, long IndexId) {
            return base.Channel.CheckIndexIdExsitsForInstructorAsync(InstructoId, IndexId);
        }
        
        public System.Data.DataSet CheckCourseAccess(long CourseId, string AccessCode) {
            return base.Channel.CheckCourseAccess(CourseId, AccessCode);
        }
        
        public System.Threading.Tasks.Task<System.Data.DataSet> CheckCourseAccessAsync(long CourseId, string AccessCode) {
            return base.Channel.CheckCourseAccessAsync(CourseId, AccessCode);
        }
        
        public System.Data.DataSet CheckTestIdExistsForAnyCourseForInstructor(long Testid, int InstructorId) {
            return base.Channel.CheckTestIdExistsForAnyCourseForInstructor(Testid, InstructorId);
        }
        
        public System.Threading.Tasks.Task<System.Data.DataSet> CheckTestIdExistsForAnyCourseForInstructorAsync(long Testid, int InstructorId) {
            return base.Channel.CheckTestIdExistsForAnyCourseForInstructorAsync(Testid, InstructorId);
        }
        
        public System.Data.DataSet CheckAssignmentIdExistsForAnyCourseForInstructor(long AssignmentId, int InstructorId) {
            return base.Channel.CheckAssignmentIdExistsForAnyCourseForInstructor(AssignmentId, InstructorId);
        }
        
        public System.Threading.Tasks.Task<System.Data.DataSet> CheckAssignmentIdExistsForAnyCourseForInstructorAsync(long AssignmentId, int InstructorId) {
            return base.Channel.CheckAssignmentIdExistsForAnyCourseForInstructorAsync(AssignmentId, InstructorId);
        }
        
        public System.Data.DataSet CheckTestIdExistsForInstructor(long Testid, int InstructorId) {
            return base.Channel.CheckTestIdExistsForInstructor(Testid, InstructorId);
        }
        
        public System.Threading.Tasks.Task<System.Data.DataSet> CheckTestIdExistsForInstructorAsync(long Testid, int InstructorId) {
            return base.Channel.CheckTestIdExistsForInstructorAsync(Testid, InstructorId);
        }
        
        public System.Data.DataSet CheckAssignmentIdExistsForInstructor(long AssignmentId, int InstructorId) {
            return base.Channel.CheckAssignmentIdExistsForInstructor(AssignmentId, InstructorId);
        }
        
        public System.Threading.Tasks.Task<System.Data.DataSet> CheckAssignmentIdExistsForInstructorAsync(long AssignmentId, int InstructorId) {
            return base.Channel.CheckAssignmentIdExistsForInstructorAsync(AssignmentId, InstructorId);
        }
        
        public bool InsertCompletedTopicforStudent(long TopicId, long StudentId) {
            return base.Channel.InsertCompletedTopicforStudent(TopicId, StudentId);
        }
        
        public System.Threading.Tasks.Task<bool> InsertCompletedTopicforStudentAsync(long TopicId, long StudentId) {
            return base.Channel.InsertCompletedTopicforStudentAsync(TopicId, StudentId);
        }
        
        public bool InsertCourseQuestionByStudent(long CourseId, long StudentId, string Question) {
            return base.Channel.InsertCourseQuestionByStudent(CourseId, StudentId, Question);
        }
        
        public System.Threading.Tasks.Task<bool> InsertCourseQuestionByStudentAsync(long CourseId, long StudentId, string Question) {
            return base.Channel.InsertCourseQuestionByStudentAsync(CourseId, StudentId, Question);
        }
        
        public bool InsertAnswerForCourseQuestion(long QuestionId, int InstructorId, string Answer) {
            return base.Channel.InsertAnswerForCourseQuestion(QuestionId, InstructorId, Answer);
        }
        
        public System.Threading.Tasks.Task<bool> InsertAnswerForCourseQuestionAsync(long QuestionId, int InstructorId, string Answer) {
            return base.Channel.InsertAnswerForCourseQuestionAsync(QuestionId, InstructorId, Answer);
        }
        
        public System.Data.DataSet GetIndexTopicProgressForStudent(long IndexId, long StudentId) {
            return base.Channel.GetIndexTopicProgressForStudent(IndexId, StudentId);
        }
        
        public System.Threading.Tasks.Task<System.Data.DataSet> GetIndexTopicProgressForStudentAsync(long IndexId, long StudentId) {
            return base.Channel.GetIndexTopicProgressForStudentAsync(IndexId, StudentId);
        }
        
        public System.Data.DataSet GetStudentCourseProgress(long CourseId, long StudentId) {
            return base.Channel.GetStudentCourseProgress(CourseId, StudentId);
        }
        
        public System.Threading.Tasks.Task<System.Data.DataSet> GetStudentCourseProgressAsync(long CourseId, long StudentId) {
            return base.Channel.GetStudentCourseProgressAsync(CourseId, StudentId);
        }
        
        public System.Data.DataSet GetStudentAssignmentProgress(long AssignmentId, long StudentId) {
            return base.Channel.GetStudentAssignmentProgress(AssignmentId, StudentId);
        }
        
        public System.Threading.Tasks.Task<System.Data.DataSet> GetStudentAssignmentProgressAsync(long AssignmentId, long StudentId) {
            return base.Channel.GetStudentAssignmentProgressAsync(AssignmentId, StudentId);
        }
        
        public System.Data.DataSet GetStudentTestProgress(long TestId, long StudentId) {
            return base.Channel.GetStudentTestProgress(TestId, StudentId);
        }
        
        public System.Threading.Tasks.Task<System.Data.DataSet> GetStudentTestProgressAsync(long TestId, long StudentId) {
            return base.Channel.GetStudentTestProgressAsync(TestId, StudentId);
        }
        
        public System.Data.DataSet GetAllQuestionAskForCourseByStudent(long Studentid, long CourseId) {
            return base.Channel.GetAllQuestionAskForCourseByStudent(Studentid, CourseId);
        }
        
        public System.Threading.Tasks.Task<System.Data.DataSet> GetAllQuestionAskForCourseByStudentAsync(long Studentid, long CourseId) {
            return base.Channel.GetAllQuestionAskForCourseByStudentAsync(Studentid, CourseId);
        }
        
        public System.Data.DataSet GetClassRoomDetailsForInstructor(int InstrcutorId, long ClassRoomId) {
            return base.Channel.GetClassRoomDetailsForInstructor(InstrcutorId, ClassRoomId);
        }
        
        public System.Threading.Tasks.Task<System.Data.DataSet> GetClassRoomDetailsForInstructorAsync(int InstrcutorId, long ClassRoomId) {
            return base.Channel.GetClassRoomDetailsForInstructorAsync(InstrcutorId, ClassRoomId);
        }
        
        public System.Data.DataSet GetAllClassRoomForInstrcutor(int InstrcutorId) {
            return base.Channel.GetAllClassRoomForInstrcutor(InstrcutorId);
        }
        
        public System.Threading.Tasks.Task<System.Data.DataSet> GetAllClassRoomForInstrcutorAsync(int InstrcutorId) {
            return base.Channel.GetAllClassRoomForInstrcutorAsync(InstrcutorId);
        }
        
        public long InsertNewClassRoomForInstructor(int InstrcuctorId, string ClassRoomName, string ClassRoomDescription, string BackGroundImageUrl, string ClassroomMeetingName, string ThumbnailSmall, string ThumbnailMedium, int NoOfDemoClassrooms) {
            return base.Channel.InsertNewClassRoomForInstructor(InstrcuctorId, ClassRoomName, ClassRoomDescription, BackGroundImageUrl, ClassroomMeetingName, ThumbnailSmall, ThumbnailMedium, NoOfDemoClassrooms);
        }
        
        public System.Threading.Tasks.Task<long> InsertNewClassRoomForInstructorAsync(int InstrcuctorId, string ClassRoomName, string ClassRoomDescription, string BackGroundImageUrl, string ClassroomMeetingName, string ThumbnailSmall, string ThumbnailMedium, int NoOfDemoClassrooms) {
            return base.Channel.InsertNewClassRoomForInstructorAsync(InstrcuctorId, ClassRoomName, ClassRoomDescription, BackGroundImageUrl, ClassroomMeetingName, ThumbnailSmall, ThumbnailMedium, NoOfDemoClassrooms);
        }
        
        public bool InertNewPostToClassroom(long ClassroomId, string Post) {
            return base.Channel.InertNewPostToClassroom(ClassroomId, Post);
        }
        
        public System.Threading.Tasks.Task<bool> InertNewPostToClassroomAsync(long ClassroomId, string Post) {
            return base.Channel.InertNewPostToClassroomAsync(ClassroomId, Post);
        }
        
        public bool InertNewMeetingToClassroom(long ClassroomId, string MeetingName, string MeetingPassword) {
            return base.Channel.InertNewMeetingToClassroom(ClassroomId, MeetingName, MeetingPassword);
        }
        
        public System.Threading.Tasks.Task<bool> InertNewMeetingToClassroomAsync(long ClassroomId, string MeetingName, string MeetingPassword) {
            return base.Channel.InertNewMeetingToClassroomAsync(ClassroomId, MeetingName, MeetingPassword);
        }
        
        public System.Data.DataSet GetMeetingDetailsOfClassroom(long ClassRoomId) {
            return base.Channel.GetMeetingDetailsOfClassroom(ClassRoomId);
        }
        
        public System.Threading.Tasks.Task<System.Data.DataSet> GetMeetingDetailsOfClassroomAsync(long ClassRoomId) {
            return base.Channel.GetMeetingDetailsOfClassroomAsync(ClassRoomId);
        }
        
        public bool ActivateClassroom(long ClassroomId, string ShareCode, string ShareUrl, int ClassroomPublicType, int ClassroomJoiningAmountInPaise, string StartTime, string ArrayOpeningDays, int NofDemoClasses, int Category, int Level) {
            return base.Channel.ActivateClassroom(ClassroomId, ShareCode, ShareUrl, ClassroomPublicType, ClassroomJoiningAmountInPaise, StartTime, ArrayOpeningDays, NofDemoClasses, Category, Level);
        }
        
        public System.Threading.Tasks.Task<bool> ActivateClassroomAsync(long ClassroomId, string ShareCode, string ShareUrl, int ClassroomPublicType, int ClassroomJoiningAmountInPaise, string StartTime, string ArrayOpeningDays, int NofDemoClasses, int Category, int Level) {
            return base.Channel.ActivateClassroomAsync(ClassroomId, ShareCode, ShareUrl, ClassroomPublicType, ClassroomJoiningAmountInPaise, StartTime, ArrayOpeningDays, NofDemoClasses, Category, Level);
        }
        
        public System.Data.DataSet GetClasroomDetails(long ClassRoomId) {
            return base.Channel.GetClasroomDetails(ClassRoomId);
        }
        
        public System.Threading.Tasks.Task<System.Data.DataSet> GetClasroomDetailsAsync(long ClassRoomId) {
            return base.Channel.GetClasroomDetailsAsync(ClassRoomId);
        }
        
        public bool JoinStudentToClassroom(long ClassroomId, long StudentId) {
            return base.Channel.JoinStudentToClassroom(ClassroomId, StudentId);
        }
        
        public System.Threading.Tasks.Task<bool> JoinStudentToClassroomAsync(long ClassroomId, long StudentId) {
            return base.Channel.JoinStudentToClassroomAsync(ClassroomId, StudentId);
        }
        
        public System.Data.DataSet GetJoinedClassroomForStudent(long StudentId) {
            return base.Channel.GetJoinedClassroomForStudent(StudentId);
        }
        
        public System.Threading.Tasks.Task<System.Data.DataSet> GetJoinedClassroomForStudentAsync(long StudentId) {
            return base.Channel.GetJoinedClassroomForStudentAsync(StudentId);
        }
        
        public bool JoinStudentToMeeting(long MeetingId, long StudentId) {
            return base.Channel.JoinStudentToMeeting(MeetingId, StudentId);
        }
        
        public System.Threading.Tasks.Task<bool> JoinStudentToMeetingAsync(long MeetingId, long StudentId) {
            return base.Channel.JoinStudentToMeetingAsync(MeetingId, StudentId);
        }
        
        public bool ReportMeetingLeftForStudent(long MeetingId, long StudentId) {
            return base.Channel.ReportMeetingLeftForStudent(MeetingId, StudentId);
        }
        
        public System.Threading.Tasks.Task<bool> ReportMeetingLeftForStudentAsync(long MeetingId, long StudentId) {
            return base.Channel.ReportMeetingLeftForStudentAsync(MeetingId, StudentId);
        }
        
        public bool ReportMeetingLeftForHost(long MeetingId) {
            return base.Channel.ReportMeetingLeftForHost(MeetingId);
        }
        
        public System.Threading.Tasks.Task<bool> ReportMeetingLeftForHostAsync(long MeetingId) {
            return base.Channel.ReportMeetingLeftForHostAsync(MeetingId);
        }
        
        public System.Data.DataSet GetAllMeetingForClassroom(long ClassroomId) {
            return base.Channel.GetAllMeetingForClassroom(ClassroomId);
        }
        
        public System.Threading.Tasks.Task<System.Data.DataSet> GetAllMeetingForClassroomAsync(long ClassroomId) {
            return base.Channel.GetAllMeetingForClassroomAsync(ClassroomId);
        }
        
        public System.Data.DataSet CheckClassroomAccess(long ClassroomId, string AccessCode) {
            return base.Channel.CheckClassroomAccess(ClassroomId, AccessCode);
        }
        
        public System.Threading.Tasks.Task<System.Data.DataSet> CheckClassroomAccessAsync(long ClassroomId, string AccessCode) {
            return base.Channel.CheckClassroomAccessAsync(ClassroomId, AccessCode);
        }
        
        public System.Data.DataSet GetAllStudentsJoinedToClassroom(long ClassroomId) {
            return base.Channel.GetAllStudentsJoinedToClassroom(ClassroomId);
        }
        
        public System.Threading.Tasks.Task<System.Data.DataSet> GetAllStudentsJoinedToClassroomAsync(long ClassroomId) {
            return base.Channel.GetAllStudentsJoinedToClassroomAsync(ClassroomId);
        }
        
        public System.Data.DataSet CheckInstructorClassroomAccess(long ClassroomId, int InstructorId) {
            return base.Channel.CheckInstructorClassroomAccess(ClassroomId, InstructorId);
        }
        
        public System.Threading.Tasks.Task<System.Data.DataSet> CheckInstructorClassroomAccessAsync(long ClassroomId, int InstructorId) {
            return base.Channel.CheckInstructorClassroomAccessAsync(ClassroomId, InstructorId);
        }
        
        public System.Data.DataSet CheckStudentClassroomAccess(long ClassroomId, long StudentId) {
            return base.Channel.CheckStudentClassroomAccess(ClassroomId, StudentId);
        }
        
        public System.Threading.Tasks.Task<System.Data.DataSet> CheckStudentClassroomAccessAsync(long ClassroomId, long StudentId) {
            return base.Channel.CheckStudentClassroomAccessAsync(ClassroomId, StudentId);
        }
        
        public System.Data.DataSet GetAllStudentsJoinedToMeeting(long ClassroomId, long MeetingId) {
            return base.Channel.GetAllStudentsJoinedToMeeting(ClassroomId, MeetingId);
        }
        
        public System.Threading.Tasks.Task<System.Data.DataSet> GetAllStudentsJoinedToMeetingAsync(long ClassroomId, long MeetingId) {
            return base.Channel.GetAllStudentsJoinedToMeetingAsync(ClassroomId, MeetingId);
        }
        
        public bool InsertNewStudentClassroomMessage(long ClassroomId, string Message, long StudentId) {
            return base.Channel.InsertNewStudentClassroomMessage(ClassroomId, Message, StudentId);
        }
        
        public System.Threading.Tasks.Task<bool> InsertNewStudentClassroomMessageAsync(long ClassroomId, string Message, long StudentId) {
            return base.Channel.InsertNewStudentClassroomMessageAsync(ClassroomId, Message, StudentId);
        }
        
        public bool InsertNewInstructorClassroomMessage(long ClassroomId, string Message) {
            return base.Channel.InsertNewInstructorClassroomMessage(ClassroomId, Message);
        }
        
        public System.Threading.Tasks.Task<bool> InsertNewInstructorClassroomMessageAsync(long ClassroomId, string Message) {
            return base.Channel.InsertNewInstructorClassroomMessageAsync(ClassroomId, Message);
        }
        
        public System.Data.DataSet GetAllClassroomMessage(long ClassroomId) {
            return base.Channel.GetAllClassroomMessage(ClassroomId);
        }
        
        public System.Threading.Tasks.Task<System.Data.DataSet> GetAllClassroomMessageAsync(long ClassroomId) {
            return base.Channel.GetAllClassroomMessageAsync(ClassroomId);
        }
        
        public System.Data.DataSet GetAllClassroomMessageAfterLastMessage(long ClassroomId, long LastMessageId) {
            return base.Channel.GetAllClassroomMessageAfterLastMessage(ClassroomId, LastMessageId);
        }
        
        public System.Threading.Tasks.Task<System.Data.DataSet> GetAllClassroomMessageAfterLastMessageAsync(long ClassroomId, long LastMessageId) {
            return base.Channel.GetAllClassroomMessageAfterLastMessageAsync(ClassroomId, LastMessageId);
        }
        
        public bool UpdateClassroomDetails(long ClassroomId, string ClassroomName, string ClassroomDescription, System.Nullable<System.DateTime> classroomStartDate, System.Nullable<System.DateTime> classroomRegistrationCloseDate, int NoOfDemoSessions) {
            return base.Channel.UpdateClassroomDetails(ClassroomId, ClassroomName, ClassroomDescription, classroomStartDate, classroomRegistrationCloseDate, NoOfDemoSessions);
        }
        
        public System.Threading.Tasks.Task<bool> UpdateClassroomDetailsAsync(long ClassroomId, string ClassroomName, string ClassroomDescription, System.Nullable<System.DateTime> classroomStartDate, System.Nullable<System.DateTime> classroomRegistrationCloseDate, int NoOfDemoSessions) {
            return base.Channel.UpdateClassroomDetailsAsync(ClassroomId, ClassroomName, ClassroomDescription, classroomStartDate, classroomRegistrationCloseDate, NoOfDemoSessions);
        }
        
        public bool DeleteClassroom(long ClassroomId) {
            return base.Channel.DeleteClassroom(ClassroomId);
        }
        
        public System.Threading.Tasks.Task<bool> DeleteClassroomAsync(long ClassroomId) {
            return base.Channel.DeleteClassroomAsync(ClassroomId);
        }
        
        public bool AddNewAssignmentToClassroom(long ClassroomId, long AssignmentId) {
            return base.Channel.AddNewAssignmentToClassroom(ClassroomId, AssignmentId);
        }
        
        public System.Threading.Tasks.Task<bool> AddNewAssignmentToClassroomAsync(long ClassroomId, long AssignmentId) {
            return base.Channel.AddNewAssignmentToClassroomAsync(ClassroomId, AssignmentId);
        }
        
        public System.Data.DataSet GetAllClassroomAssignments(long ClassroomId) {
            return base.Channel.GetAllClassroomAssignments(ClassroomId);
        }
        
        public System.Threading.Tasks.Task<System.Data.DataSet> GetAllClassroomAssignmentsAsync(long ClassroomId) {
            return base.Channel.GetAllClassroomAssignmentsAsync(ClassroomId);
        }
        
        public bool DeleteClassroomAssignment(long ClassroomId, long AssignmentId) {
            return base.Channel.DeleteClassroomAssignment(ClassroomId, AssignmentId);
        }
        
        public System.Threading.Tasks.Task<bool> DeleteClassroomAssignmentAsync(long ClassroomId, long AssignmentId) {
            return base.Channel.DeleteClassroomAssignmentAsync(ClassroomId, AssignmentId);
        }
        
        public bool DeleteClassroomTest(long ClassroomId, long TestId) {
            return base.Channel.DeleteClassroomTest(ClassroomId, TestId);
        }
        
        public System.Threading.Tasks.Task<bool> DeleteClassroomTestAsync(long ClassroomId, long TestId) {
            return base.Channel.DeleteClassroomTestAsync(ClassroomId, TestId);
        }
        
        public bool AddNewTestToClassroom(long ClassroomId, long TestId) {
            return base.Channel.AddNewTestToClassroom(ClassroomId, TestId);
        }
        
        public System.Threading.Tasks.Task<bool> AddNewTestToClassroomAsync(long ClassroomId, long TestId) {
            return base.Channel.AddNewTestToClassroomAsync(ClassroomId, TestId);
        }
        
        public System.Data.DataSet GetAllClassroomTest(long ClassroomId) {
            return base.Channel.GetAllClassroomTest(ClassroomId);
        }
        
        public System.Threading.Tasks.Task<System.Data.DataSet> GetAllClassroomTestAsync(long ClassroomId) {
            return base.Channel.GetAllClassroomTestAsync(ClassroomId);
        }
        
        public System.Data.DataSet GetAllClassroomMeetingForStudent(long ClassroomId, long StudentId) {
            return base.Channel.GetAllClassroomMeetingForStudent(ClassroomId, StudentId);
        }
        
        public System.Threading.Tasks.Task<System.Data.DataSet> GetAllClassroomMeetingForStudentAsync(long ClassroomId, long StudentId) {
            return base.Channel.GetAllClassroomMeetingForStudentAsync(ClassroomId, StudentId);
        }
        
        public System.Data.DataSet GetAllClassroomAssignmntForStudent(long ClassroomId, long StudentId) {
            return base.Channel.GetAllClassroomAssignmntForStudent(ClassroomId, StudentId);
        }
        
        public System.Threading.Tasks.Task<System.Data.DataSet> GetAllClassroomAssignmntForStudentAsync(long ClassroomId, long StudentId) {
            return base.Channel.GetAllClassroomAssignmntForStudentAsync(ClassroomId, StudentId);
        }
        
        public System.Data.DataSet GetAllClassroomAssignmentSubmissionsForStudent(long ClassroomId, long StudentId) {
            return base.Channel.GetAllClassroomAssignmentSubmissionsForStudent(ClassroomId, StudentId);
        }
        
        public System.Threading.Tasks.Task<System.Data.DataSet> GetAllClassroomAssignmentSubmissionsForStudentAsync(long ClassroomId, long StudentId) {
            return base.Channel.GetAllClassroomAssignmentSubmissionsForStudentAsync(ClassroomId, StudentId);
        }
        
        public System.Data.DataSet GetAllClassroomTestSubmissionsForStudent(long ClassroomId, long StudentId) {
            return base.Channel.GetAllClassroomTestSubmissionsForStudent(ClassroomId, StudentId);
        }
        
        public System.Threading.Tasks.Task<System.Data.DataSet> GetAllClassroomTestSubmissionsForStudentAsync(long ClassroomId, long StudentId) {
            return base.Channel.GetAllClassroomTestSubmissionsForStudentAsync(ClassroomId, StudentId);
        }
        
        public System.Data.DataSet GetAllClassroomTestForStudent(long ClassroomId, long StudentId) {
            return base.Channel.GetAllClassroomTestForStudent(ClassroomId, StudentId);
        }
        
        public System.Threading.Tasks.Task<System.Data.DataSet> GetAllClassroomTestForStudentAsync(long ClassroomId, long StudentId) {
            return base.Channel.GetAllClassroomTestForStudentAsync(ClassroomId, StudentId);
        }
        
        public bool DeleteMcqTestQuestion(long QuestionId) {
            return base.Channel.DeleteMcqTestQuestion(QuestionId);
        }
        
        public System.Threading.Tasks.Task<bool> DeleteMcqTestQuestionAsync(long QuestionId) {
            return base.Channel.DeleteMcqTestQuestionAsync(QuestionId);
        }
        
        public System.Data.DataSet GetAllAssignmentsForCourse(long CourseId) {
            return base.Channel.GetAllAssignmentsForCourse(CourseId);
        }
        
        public System.Threading.Tasks.Task<System.Data.DataSet> GetAllAssignmentsForCourseAsync(long CourseId) {
            return base.Channel.GetAllAssignmentsForCourseAsync(CourseId);
        }
        
        public bool DeleteTestOfCourse(long TestId) {
            return base.Channel.DeleteTestOfCourse(TestId);
        }
        
        public System.Threading.Tasks.Task<bool> DeleteTestOfCourseAsync(long TestId) {
            return base.Channel.DeleteTestOfCourseAsync(TestId);
        }
        
        public bool DeleteInpependentAssignment(long AssignmentId) {
            return base.Channel.DeleteInpependentAssignment(AssignmentId);
        }
        
        public System.Threading.Tasks.Task<bool> DeleteInpependentAssignmentAsync(long AssignmentId) {
            return base.Channel.DeleteInpependentAssignmentAsync(AssignmentId);
        }
        
        public bool DeleteIndepenetTest(long TestId) {
            return base.Channel.DeleteIndepenetTest(TestId);
        }
        
        public System.Threading.Tasks.Task<bool> DeleteIndepenetTestAsync(long TestId) {
            return base.Channel.DeleteIndepenetTestAsync(TestId);
        }
        
        public bool InsertSubjectiveAssignmentQuestion(long AssignmentId, string QuestionStatement, string Hint) {
            return base.Channel.InsertSubjectiveAssignmentQuestion(AssignmentId, QuestionStatement, Hint);
        }
        
        public System.Threading.Tasks.Task<bool> InsertSubjectiveAssignmentQuestionAsync(long AssignmentId, string QuestionStatement, string Hint) {
            return base.Channel.InsertSubjectiveAssignmentQuestionAsync(AssignmentId, QuestionStatement, Hint);
        }
        
        public bool DeleteSubjectiveAssignmentQuestion(long AssignmentId) {
            return base.Channel.DeleteSubjectiveAssignmentQuestion(AssignmentId);
        }
        
        public System.Threading.Tasks.Task<bool> DeleteSubjectiveAssignmentQuestionAsync(long AssignmentId) {
            return base.Channel.DeleteSubjectiveAssignmentQuestionAsync(AssignmentId);
        }
        
        public bool DeleteSubjectiveAssignmentOfCourse(long AssignmentId) {
            return base.Channel.DeleteSubjectiveAssignmentOfCourse(AssignmentId);
        }
        
        public System.Threading.Tasks.Task<bool> DeleteSubjectiveAssignmentOfCourseAsync(long AssignmentId) {
            return base.Channel.DeleteSubjectiveAssignmentOfCourseAsync(AssignmentId);
        }
        
        public bool UpdateSubjectiveAssignmentQuestion(long QuestionId, string QuestionStatement, string Hint) {
            return base.Channel.UpdateSubjectiveAssignmentQuestion(QuestionId, QuestionStatement, Hint);
        }
        
        public System.Threading.Tasks.Task<bool> UpdateSubjectiveAssignmentQuestionAsync(long QuestionId, string QuestionStatement, string Hint) {
            return base.Channel.UpdateSubjectiveAssignmentQuestionAsync(QuestionId, QuestionStatement, Hint);
        }
        
        public System.Data.DataSet GetAllQuestionsOfSubjectiveAssignment(long AssignmentId) {
            return base.Channel.GetAllQuestionsOfSubjectiveAssignment(AssignmentId);
        }
        
        public System.Threading.Tasks.Task<System.Data.DataSet> GetAllQuestionsOfSubjectiveAssignmentAsync(long AssignmentId) {
            return base.Channel.GetAllQuestionsOfSubjectiveAssignmentAsync(AssignmentId);
        }
        
        public bool RegisterNewStudent(string FirstName, string LastName, string UserId, string HashedPassword, string PhoneNo, string PhoneNoVerificationGuid, string EmailIdVerificationGuid) {
            return base.Channel.RegisterNewStudent(FirstName, LastName, UserId, HashedPassword, PhoneNo, PhoneNoVerificationGuid, EmailIdVerificationGuid);
        }
        
        public System.Threading.Tasks.Task<bool> RegisterNewStudentAsync(string FirstName, string LastName, string UserId, string HashedPassword, string PhoneNo, string PhoneNoVerificationGuid, string EmailIdVerificationGuid) {
            return base.Channel.RegisterNewStudentAsync(FirstName, LastName, UserId, HashedPassword, PhoneNo, PhoneNoVerificationGuid, EmailIdVerificationGuid);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        StudentDashboard.CPDataService.ValidateStudentLoginResponse StudentDashboard.CPDataService.ICpDataService.ValidateStudentLogin(StudentDashboard.CPDataService.ValidateStudentLoginRequest request) {
            return base.Channel.ValidateStudentLogin(request);
        }
        
        public bool ValidateStudentLogin(string UserId, string HashedPassword, ref long StudentId) {
            StudentDashboard.CPDataService.ValidateStudentLoginRequest inValue = new StudentDashboard.CPDataService.ValidateStudentLoginRequest();
            inValue.UserId = UserId;
            inValue.HashedPassword = HashedPassword;
            inValue.StudentId = StudentId;
            StudentDashboard.CPDataService.ValidateStudentLoginResponse retVal = ((StudentDashboard.CPDataService.ICpDataService)(this)).ValidateStudentLogin(inValue);
            StudentId = retVal.StudentId;
            return retVal.ValidateStudentLoginResult;
        }
        
        public System.Threading.Tasks.Task<StudentDashboard.CPDataService.ValidateStudentLoginResponse> ValidateStudentLoginAsync(StudentDashboard.CPDataService.ValidateStudentLoginRequest request) {
            return base.Channel.ValidateStudentLoginAsync(request);
        }
        
        public bool InsertActivityForStudent(string ActivityMessage, long StudentId) {
            return base.Channel.InsertActivityForStudent(ActivityMessage, StudentId);
        }
        
        public System.Threading.Tasks.Task<bool> InsertActivityForStudentAsync(string ActivityMessage, long StudentId) {
            return base.Channel.InsertActivityForStudentAsync(ActivityMessage, StudentId);
        }
        
        public bool JoinStudentToCourse(long CourseId, long StudentId) {
            return base.Channel.JoinStudentToCourse(CourseId, StudentId);
        }
        
        public System.Threading.Tasks.Task<bool> JoinStudentToCourseAsync(long CourseId, long StudentId) {
            return base.Channel.JoinStudentToCourseAsync(CourseId, StudentId);
        }
        
        public System.Data.DataSet SearchForCourse(string SerachString, int MaxRowToReturn, int NoOfRowsFetch, int SortType) {
            return base.Channel.SearchForCourse(SerachString, MaxRowToReturn, NoOfRowsFetch, SortType);
        }
        
        public System.Threading.Tasks.Task<System.Data.DataSet> SearchForCourseAsync(string SerachString, int MaxRowToReturn, int NoOfRowsFetch, int SortType) {
            return base.Channel.SearchForCourseAsync(SerachString, MaxRowToReturn, NoOfRowsFetch, SortType);
        }
        
        public System.Data.DataSet GetStudentDetails(long StudentId) {
            return base.Channel.GetStudentDetails(StudentId);
        }
        
        public System.Threading.Tasks.Task<System.Data.DataSet> GetStudentDetailsAsync(long StudentId) {
            return base.Channel.GetStudentDetailsAsync(StudentId);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        StudentDashboard.CPDataService.GetStudentIdFromUserIdResponse StudentDashboard.CPDataService.ICpDataService.GetStudentIdFromUserId(StudentDashboard.CPDataService.GetStudentIdFromUserIdRequest request) {
            return base.Channel.GetStudentIdFromUserId(request);
        }
        
        public bool GetStudentIdFromUserId(string UserId, ref long StudentId) {
            StudentDashboard.CPDataService.GetStudentIdFromUserIdRequest inValue = new StudentDashboard.CPDataService.GetStudentIdFromUserIdRequest();
            inValue.UserId = UserId;
            inValue.StudentId = StudentId;
            StudentDashboard.CPDataService.GetStudentIdFromUserIdResponse retVal = ((StudentDashboard.CPDataService.ICpDataService)(this)).GetStudentIdFromUserId(inValue);
            StudentId = retVal.StudentId;
            return retVal.GetStudentIdFromUserIdResult;
        }
        
        public System.Threading.Tasks.Task<StudentDashboard.CPDataService.GetStudentIdFromUserIdResponse> GetStudentIdFromUserIdAsync(StudentDashboard.CPDataService.GetStudentIdFromUserIdRequest request) {
            return base.Channel.GetStudentIdFromUserIdAsync(request);
        }
        
        public bool UpdateStudentDetails(string FirstName, string LastName, string AddressLine1, string AddressLine2, string PinCode, System.Nullable<int> StateId, System.Nullable<int> CityId, string Gender, long StudentId, string PhoneNo) {
            return base.Channel.UpdateStudentDetails(FirstName, LastName, AddressLine1, AddressLine2, PinCode, StateId, CityId, Gender, StudentId, PhoneNo);
        }
        
        public System.Threading.Tasks.Task<bool> UpdateStudentDetailsAsync(string FirstName, string LastName, string AddressLine1, string AddressLine2, string PinCode, System.Nullable<int> StateId, System.Nullable<int> CityId, string Gender, long StudentId, string PhoneNo) {
            return base.Channel.UpdateStudentDetailsAsync(FirstName, LastName, AddressLine1, AddressLine2, PinCode, StateId, CityId, Gender, StudentId, PhoneNo);
        }
        
        public bool UpdateStudentPassword(long StudentId, string OldHashedPassword, string NewHashedPassword) {
            return base.Channel.UpdateStudentPassword(StudentId, OldHashedPassword, NewHashedPassword);
        }
        
        public System.Threading.Tasks.Task<bool> UpdateStudentPasswordAsync(long StudentId, string OldHashedPassword, string NewHashedPassword) {
            return base.Channel.UpdateStudentPasswordAsync(StudentId, OldHashedPassword, NewHashedPassword);
        }
        
        public System.Data.DataSet SearchForTest(string SerachString, int MaxRowToReturn, long LastFetchedId) {
            return base.Channel.SearchForTest(SerachString, MaxRowToReturn, LastFetchedId);
        }
        
        public System.Threading.Tasks.Task<System.Data.DataSet> SearchForTestAsync(string SerachString, int MaxRowToReturn, long LastFetchedId) {
            return base.Channel.SearchForTestAsync(SerachString, MaxRowToReturn, LastFetchedId);
        }
        
        public System.Data.DataSet SearchForAssignment(string SerachString, int MaxRowToReturn, long LastFetchedId) {
            return base.Channel.SearchForAssignment(SerachString, MaxRowToReturn, LastFetchedId);
        }
        
        public System.Threading.Tasks.Task<System.Data.DataSet> SearchForAssignmentAsync(string SerachString, int MaxRowToReturn, long LastFetchedId) {
            return base.Channel.SearchForAssignmentAsync(SerachString, MaxRowToReturn, LastFetchedId);
        }
        
        public System.Data.DataSet SearchForInstructor(string SerachString, int MaxRowToReturn) {
            return base.Channel.SearchForInstructor(SerachString, MaxRowToReturn);
        }
        
        public System.Threading.Tasks.Task<System.Data.DataSet> SearchForInstructorAsync(string SerachString, int MaxRowToReturn) {
            return base.Channel.SearchForInstructorAsync(SerachString, MaxRowToReturn);
        }
        
        public System.Data.DataSet GetJoinedCoursesForStudent(long StudentId, string SearchString, int MaxRowCountToReturn) {
            return base.Channel.GetJoinedCoursesForStudent(StudentId, SearchString, MaxRowCountToReturn);
        }
        
        public System.Threading.Tasks.Task<System.Data.DataSet> GetJoinedCoursesForStudentAsync(long StudentId, string SearchString, int MaxRowCountToReturn) {
            return base.Channel.GetJoinedCoursesForStudentAsync(StudentId, SearchString, MaxRowCountToReturn);
        }
        
        public bool JoinStudentToInstructor(long StudentId, int InstructorId) {
            return base.Channel.JoinStudentToInstructor(StudentId, InstructorId);
        }
        
        public System.Threading.Tasks.Task<bool> JoinStudentToInstructorAsync(long StudentId, int InstructorId) {
            return base.Channel.JoinStudentToInstructorAsync(StudentId, InstructorId);
        }
        
        public System.Data.DataSet GetAllJoinedInstructorForStudent(long StudentId, string SearchString, int MaxRowCount) {
            return base.Channel.GetAllJoinedInstructorForStudent(StudentId, SearchString, MaxRowCount);
        }
        
        public System.Threading.Tasks.Task<System.Data.DataSet> GetAllJoinedInstructorForStudentAsync(long StudentId, string SearchString, int MaxRowCount) {
            return base.Channel.GetAllJoinedInstructorForStudentAsync(StudentId, SearchString, MaxRowCount);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        StudentDashboard.CPDataService.InsertAssignmentResponseResponse StudentDashboard.CPDataService.ICpDataService.InsertAssignmentResponse(StudentDashboard.CPDataService.InsertAssignmentResponseRequest request) {
            return base.Channel.InsertAssignmentResponse(request);
        }
        
        public bool InsertAssignmentResponse(long StudentId, long AssignmentId, System.DateTime AssignmentStartTime, System.DateTime AssignmentFinishTime, string Response, int PercentageScore, int TotalNoOfQuestions, ref long SubmissionId) {
            StudentDashboard.CPDataService.InsertAssignmentResponseRequest inValue = new StudentDashboard.CPDataService.InsertAssignmentResponseRequest();
            inValue.StudentId = StudentId;
            inValue.AssignmentId = AssignmentId;
            inValue.AssignmentStartTime = AssignmentStartTime;
            inValue.AssignmentFinishTime = AssignmentFinishTime;
            inValue.Response = Response;
            inValue.PercentageScore = PercentageScore;
            inValue.TotalNoOfQuestions = TotalNoOfQuestions;
            inValue.SubmissionId = SubmissionId;
            StudentDashboard.CPDataService.InsertAssignmentResponseResponse retVal = ((StudentDashboard.CPDataService.ICpDataService)(this)).InsertAssignmentResponse(inValue);
            SubmissionId = retVal.SubmissionId;
            return retVal.InsertAssignmentResponseResult;
        }
        
        public System.Threading.Tasks.Task<StudentDashboard.CPDataService.InsertAssignmentResponseResponse> InsertAssignmentResponseAsync(StudentDashboard.CPDataService.InsertAssignmentResponseRequest request) {
            return base.Channel.InsertAssignmentResponseAsync(request);
        }
        
        public bool InsertAssignmentFeedback(long SubmissionId, string FeedBack, int Rating) {
            return base.Channel.InsertAssignmentFeedback(SubmissionId, FeedBack, Rating);
        }
        
        public System.Threading.Tasks.Task<bool> InsertAssignmentFeedbackAsync(long SubmissionId, string FeedBack, int Rating) {
            return base.Channel.InsertAssignmentFeedbackAsync(SubmissionId, FeedBack, Rating);
        }
        
        public System.Data.DataSet GetAllAssignmentSubmissionsForStudent(long StudentId) {
            return base.Channel.GetAllAssignmentSubmissionsForStudent(StudentId);
        }
        
        public System.Threading.Tasks.Task<System.Data.DataSet> GetAllAssignmentSubmissionsForStudentAsync(long StudentId) {
            return base.Channel.GetAllAssignmentSubmissionsForStudentAsync(StudentId);
        }
        
        public System.Data.DataSet GetAssignmentResponse(long SubmissionId, long StudentId) {
            return base.Channel.GetAssignmentResponse(SubmissionId, StudentId);
        }
        
        public System.Threading.Tasks.Task<System.Data.DataSet> GetAssignmentResponseAsync(long SubmissionId, long StudentId) {
            return base.Channel.GetAssignmentResponseAsync(SubmissionId, StudentId);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        StudentDashboard.CPDataService.InsertTestResponseResponse StudentDashboard.CPDataService.ICpDataService.InsertTestResponse(StudentDashboard.CPDataService.InsertTestResponseRequest request) {
            return base.Channel.InsertTestResponse(request);
        }
        
        public bool InsertTestResponse(long StudentId, long TestId, System.DateTime TestStartTime, System.DateTime TestFinishTime, string Response, int PercentageScore, int TotalNoOfQuestions, ref long SubmissionId) {
            StudentDashboard.CPDataService.InsertTestResponseRequest inValue = new StudentDashboard.CPDataService.InsertTestResponseRequest();
            inValue.StudentId = StudentId;
            inValue.TestId = TestId;
            inValue.TestStartTime = TestStartTime;
            inValue.TestFinishTime = TestFinishTime;
            inValue.Response = Response;
            inValue.PercentageScore = PercentageScore;
            inValue.TotalNoOfQuestions = TotalNoOfQuestions;
            inValue.SubmissionId = SubmissionId;
            StudentDashboard.CPDataService.InsertTestResponseResponse retVal = ((StudentDashboard.CPDataService.ICpDataService)(this)).InsertTestResponse(inValue);
            SubmissionId = retVal.SubmissionId;
            return retVal.InsertTestResponseResult;
        }
        
        public System.Threading.Tasks.Task<StudentDashboard.CPDataService.InsertTestResponseResponse> InsertTestResponseAsync(StudentDashboard.CPDataService.InsertTestResponseRequest request) {
            return base.Channel.InsertTestResponseAsync(request);
        }
        
        public System.Data.DataSet GetTestResponse(long SubmissionId, long StudentId) {
            return base.Channel.GetTestResponse(SubmissionId, StudentId);
        }
        
        public System.Threading.Tasks.Task<System.Data.DataSet> GetTestResponseAsync(long SubmissionId, long StudentId) {
            return base.Channel.GetTestResponseAsync(SubmissionId, StudentId);
        }
        
        public System.Data.DataSet GetAllTestSubmissionsForStudent(long StudentId) {
            return base.Channel.GetAllTestSubmissionsForStudent(StudentId);
        }
        
        public System.Threading.Tasks.Task<System.Data.DataSet> GetAllTestSubmissionsForStudentAsync(long StudentId) {
            return base.Channel.GetAllTestSubmissionsForStudentAsync(StudentId);
        }
        
        public System.Data.DataSet GetStudentHomeDetails(long StudentId) {
            return base.Channel.GetStudentHomeDetails(StudentId);
        }
        
        public System.Threading.Tasks.Task<System.Data.DataSet> GetStudentHomeDetailsAsync(long StudentId) {
            return base.Channel.GetStudentHomeDetailsAsync(StudentId);
        }
        
        public System.Data.DataSet GetTestsOfCourse(long CourseId) {
            return base.Channel.GetTestsOfCourse(CourseId);
        }
        
        public System.Threading.Tasks.Task<System.Data.DataSet> GetTestsOfCourseAsync(long CourseId) {
            return base.Channel.GetTestsOfCourseAsync(CourseId);
        }
        
        public System.Data.DataSet GetAllTestSubmissions(long StudentId) {
            return base.Channel.GetAllTestSubmissions(StudentId);
        }
        
        public System.Threading.Tasks.Task<System.Data.DataSet> GetAllTestSubmissionsAsync(long StudentId) {
            return base.Channel.GetAllTestSubmissionsAsync(StudentId);
        }
        
        public System.Data.DataSet GetAllAssignmentsSubmissions(long AssignmentId) {
            return base.Channel.GetAllAssignmentsSubmissions(AssignmentId);
        }
        
        public System.Threading.Tasks.Task<System.Data.DataSet> GetAllAssignmentsSubmissionsAsync(long AssignmentId) {
            return base.Channel.GetAllAssignmentsSubmissionsAsync(AssignmentId);
        }
        
        public System.Data.DataSet GetStudentJoinedToCourse(long CourseId) {
            return base.Channel.GetStudentJoinedToCourse(CourseId);
        }
        
        public System.Threading.Tasks.Task<System.Data.DataSet> GetStudentJoinedToCourseAsync(long CourseId) {
            return base.Channel.GetStudentJoinedToCourseAsync(CourseId);
        }
        
        public System.Data.DataSet GetAllStudentsJoinedToInstructor(int InstructorId, int NoOfRowsFetched, string SearchString) {
            return base.Channel.GetAllStudentsJoinedToInstructor(InstructorId, NoOfRowsFetched, SearchString);
        }
        
        public System.Threading.Tasks.Task<System.Data.DataSet> GetAllStudentsJoinedToInstructorAsync(int InstructorId, int NoOfRowsFetched, string SearchString) {
            return base.Channel.GetAllStudentsJoinedToInstructorAsync(InstructorId, NoOfRowsFetched, SearchString);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        StudentDashboard.CPDataService.InsertNewCourseV2Response StudentDashboard.CPDataService.ICpDataService.InsertNewCourseV2(StudentDashboard.CPDataService.InsertNewCourseV2Request request) {
            return base.Channel.InsertNewCourseV2(request);
        }
        
        public bool InsertNewCourseV2(string CourseName, string CourseDescription, int InstructorId, string AboutCourse, string CourseImagePath, ref long CourseId) {
            StudentDashboard.CPDataService.InsertNewCourseV2Request inValue = new StudentDashboard.CPDataService.InsertNewCourseV2Request();
            inValue.CourseName = CourseName;
            inValue.CourseDescription = CourseDescription;
            inValue.InstructorId = InstructorId;
            inValue.AboutCourse = AboutCourse;
            inValue.CourseImagePath = CourseImagePath;
            inValue.CourseId = CourseId;
            StudentDashboard.CPDataService.InsertNewCourseV2Response retVal = ((StudentDashboard.CPDataService.ICpDataService)(this)).InsertNewCourseV2(inValue);
            CourseId = retVal.CourseId;
            return retVal.InsertNewCourseV2Result;
        }
        
        public System.Threading.Tasks.Task<StudentDashboard.CPDataService.InsertNewCourseV2Response> InsertNewCourseV2Async(StudentDashboard.CPDataService.InsertNewCourseV2Request request) {
            return base.Channel.InsertNewCourseV2Async(request);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        StudentDashboard.CPDataService.InsertNewIndexToV2CourseResponse StudentDashboard.CPDataService.ICpDataService.InsertNewIndexToV2Course(StudentDashboard.CPDataService.InsertNewIndexToV2CourseRequest request) {
            return base.Channel.InsertNewIndexToV2Course(request);
        }
        
        public bool InsertNewIndexToV2Course(long CourseId, string IndexName, string IndexContetHtml, ref long IndexId) {
            StudentDashboard.CPDataService.InsertNewIndexToV2CourseRequest inValue = new StudentDashboard.CPDataService.InsertNewIndexToV2CourseRequest();
            inValue.CourseId = CourseId;
            inValue.IndexName = IndexName;
            inValue.IndexContetHtml = IndexContetHtml;
            inValue.IndexId = IndexId;
            StudentDashboard.CPDataService.InsertNewIndexToV2CourseResponse retVal = ((StudentDashboard.CPDataService.ICpDataService)(this)).InsertNewIndexToV2Course(inValue);
            IndexId = retVal.IndexId;
            return retVal.InsertNewIndexToV2CourseResult;
        }
        
        public System.Threading.Tasks.Task<StudentDashboard.CPDataService.InsertNewIndexToV2CourseResponse> InsertNewIndexToV2CourseAsync(StudentDashboard.CPDataService.InsertNewIndexToV2CourseRequest request) {
            return base.Channel.InsertNewIndexToV2CourseAsync(request);
        }
        
        public bool InsertNewTopicToV2Course(long IndexId, string TopicName, string TopicHtml) {
            return base.Channel.InsertNewTopicToV2Course(IndexId, TopicName, TopicHtml);
        }
        
        public System.Threading.Tasks.Task<bool> InsertNewTopicToV2CourseAsync(long IndexId, string TopicName, string TopicHtml) {
            return base.Channel.InsertNewTopicToV2CourseAsync(IndexId, TopicName, TopicHtml);
        }
        
        public bool InsertNewAlertForInstructor(int InstructorId, string AlertMessage, int AlertTypeId, System.Nullable<long> EffectiveContentid, long StudentId) {
            return base.Channel.InsertNewAlertForInstructor(InstructorId, AlertMessage, AlertTypeId, EffectiveContentid, StudentId);
        }
        
        public System.Threading.Tasks.Task<bool> InsertNewAlertForInstructorAsync(int InstructorId, string AlertMessage, int AlertTypeId, System.Nullable<long> EffectiveContentid, long StudentId) {
            return base.Channel.InsertNewAlertForInstructorAsync(InstructorId, AlertMessage, AlertTypeId, EffectiveContentid, StudentId);
        }
        
        public System.Data.DataSet GetAllAlertForInstructor(int InstructorId) {
            return base.Channel.GetAllAlertForInstructor(InstructorId);
        }
        
        public System.Threading.Tasks.Task<System.Data.DataSet> GetAllAlertForInstructorAsync(int InstructorId) {
            return base.Channel.GetAllAlertForInstructorAsync(InstructorId);
        }
        
        public bool MarkAlertReadForInstructor(long AlertId) {
            return base.Channel.MarkAlertReadForInstructor(AlertId);
        }
        
        public System.Threading.Tasks.Task<bool> MarkAlertReadForInstructorAsync(long AlertId) {
            return base.Channel.MarkAlertReadForInstructorAsync(AlertId);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        StudentDashboard.CPDataService.GetInstructorIdByAssignmentIdResponse StudentDashboard.CPDataService.ICpDataService.GetInstructorIdByAssignmentId(StudentDashboard.CPDataService.GetInstructorIdByAssignmentIdRequest request) {
            return base.Channel.GetInstructorIdByAssignmentId(request);
        }
        
        public bool GetInstructorIdByAssignmentId(long AssignmentId, ref int InstructorId) {
            StudentDashboard.CPDataService.GetInstructorIdByAssignmentIdRequest inValue = new StudentDashboard.CPDataService.GetInstructorIdByAssignmentIdRequest();
            inValue.AssignmentId = AssignmentId;
            inValue.InstructorId = InstructorId;
            StudentDashboard.CPDataService.GetInstructorIdByAssignmentIdResponse retVal = ((StudentDashboard.CPDataService.ICpDataService)(this)).GetInstructorIdByAssignmentId(inValue);
            InstructorId = retVal.InstructorId;
            return retVal.GetInstructorIdByAssignmentIdResult;
        }
        
        public System.Threading.Tasks.Task<StudentDashboard.CPDataService.GetInstructorIdByAssignmentIdResponse> GetInstructorIdByAssignmentIdAsync(StudentDashboard.CPDataService.GetInstructorIdByAssignmentIdRequest request) {
            return base.Channel.GetInstructorIdByAssignmentIdAsync(request);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        StudentDashboard.CPDataService.GetInstructorIdByTestIdResponse StudentDashboard.CPDataService.ICpDataService.GetInstructorIdByTestId(StudentDashboard.CPDataService.GetInstructorIdByTestIdRequest request) {
            return base.Channel.GetInstructorIdByTestId(request);
        }
        
        public bool GetInstructorIdByTestId(long TestId, ref int InstructorId) {
            StudentDashboard.CPDataService.GetInstructorIdByTestIdRequest inValue = new StudentDashboard.CPDataService.GetInstructorIdByTestIdRequest();
            inValue.TestId = TestId;
            inValue.InstructorId = InstructorId;
            StudentDashboard.CPDataService.GetInstructorIdByTestIdResponse retVal = ((StudentDashboard.CPDataService.ICpDataService)(this)).GetInstructorIdByTestId(inValue);
            InstructorId = retVal.InstructorId;
            return retVal.GetInstructorIdByTestIdResult;
        }
        
        public System.Threading.Tasks.Task<StudentDashboard.CPDataService.GetInstructorIdByTestIdResponse> GetInstructorIdByTestIdAsync(StudentDashboard.CPDataService.GetInstructorIdByTestIdRequest request) {
            return base.Channel.GetInstructorIdByTestIdAsync(request);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        StudentDashboard.CPDataService.GetInstructorIdByCourseIdResponse StudentDashboard.CPDataService.ICpDataService.GetInstructorIdByCourseId(StudentDashboard.CPDataService.GetInstructorIdByCourseIdRequest request) {
            return base.Channel.GetInstructorIdByCourseId(request);
        }
        
        public bool GetInstructorIdByCourseId(long CourseId, ref int InstructorId) {
            StudentDashboard.CPDataService.GetInstructorIdByCourseIdRequest inValue = new StudentDashboard.CPDataService.GetInstructorIdByCourseIdRequest();
            inValue.CourseId = CourseId;
            inValue.InstructorId = InstructorId;
            StudentDashboard.CPDataService.GetInstructorIdByCourseIdResponse retVal = ((StudentDashboard.CPDataService.ICpDataService)(this)).GetInstructorIdByCourseId(inValue);
            InstructorId = retVal.InstructorId;
            return retVal.GetInstructorIdByCourseIdResult;
        }
        
        public System.Threading.Tasks.Task<StudentDashboard.CPDataService.GetInstructorIdByCourseIdResponse> GetInstructorIdByCourseIdAsync(StudentDashboard.CPDataService.GetInstructorIdByCourseIdRequest request) {
            return base.Channel.GetInstructorIdByCourseIdAsync(request);
        }
        
        public System.Data.DataSet SearchForCourseOfInstructor(string SerachString, int MaxRowToReturn, int InstructorId) {
            return base.Channel.SearchForCourseOfInstructor(SerachString, MaxRowToReturn, InstructorId);
        }
        
        public System.Threading.Tasks.Task<System.Data.DataSet> SearchForCourseOfInstructorAsync(string SerachString, int MaxRowToReturn, int InstructorId) {
            return base.Channel.SearchForCourseOfInstructorAsync(SerachString, MaxRowToReturn, InstructorId);
        }
        
        public System.Data.DataSet SearchForAssignmentOfInstructor(string SerachString, int MaxRowToReturn, int InstructorId) {
            return base.Channel.SearchForAssignmentOfInstructor(SerachString, MaxRowToReturn, InstructorId);
        }
        
        public System.Threading.Tasks.Task<System.Data.DataSet> SearchForAssignmentOfInstructorAsync(string SerachString, int MaxRowToReturn, int InstructorId) {
            return base.Channel.SearchForAssignmentOfInstructorAsync(SerachString, MaxRowToReturn, InstructorId);
        }
        
        public System.Data.DataSet SearchForTestOfInstructor(string SerachString, int MaxRowToReturn, int InstructorId) {
            return base.Channel.SearchForTestOfInstructor(SerachString, MaxRowToReturn, InstructorId);
        }
        
        public System.Threading.Tasks.Task<System.Data.DataSet> SearchForTestOfInstructorAsync(string SerachString, int MaxRowToReturn, int InstructorId) {
            return base.Channel.SearchForTestOfInstructorAsync(SerachString, MaxRowToReturn, InstructorId);
        }
        
        public System.Data.DataSet SearchForCourseForStudent(string SerachString, int MaxRowToReturn, int NoOfRowsFetch, int SortType, long StudentId) {
            return base.Channel.SearchForCourseForStudent(SerachString, MaxRowToReturn, NoOfRowsFetch, SortType, StudentId);
        }
        
        public System.Threading.Tasks.Task<System.Data.DataSet> SearchForCourseForStudentAsync(string SerachString, int MaxRowToReturn, int NoOfRowsFetch, int SortType, long StudentId) {
            return base.Channel.SearchForCourseForStudentAsync(SerachString, MaxRowToReturn, NoOfRowsFetch, SortType, StudentId);
        }
        
        public System.Data.DataSet CheckStudentHasJoinedTheCourse(long StudentId, long CourseId) {
            return base.Channel.CheckStudentHasJoinedTheCourse(StudentId, CourseId);
        }
        
        public System.Threading.Tasks.Task<System.Data.DataSet> CheckStudentHasJoinedTheCourseAsync(long StudentId, long CourseId) {
            return base.Channel.CheckStudentHasJoinedTheCourseAsync(StudentId, CourseId);
        }
        
        public System.Data.DataSet CheckStudentHasSubmittedTheAssignment(long StudentId, long AssignmentId) {
            return base.Channel.CheckStudentHasSubmittedTheAssignment(StudentId, AssignmentId);
        }
        
        public System.Threading.Tasks.Task<System.Data.DataSet> CheckStudentHasSubmittedTheAssignmentAsync(long StudentId, long AssignmentId) {
            return base.Channel.CheckStudentHasSubmittedTheAssignmentAsync(StudentId, AssignmentId);
        }
        
        public System.Data.DataSet CheckStudentHasSubmittedTheTest(long StudentId, long TestId) {
            return base.Channel.CheckStudentHasSubmittedTheTest(StudentId, TestId);
        }
        
        public System.Threading.Tasks.Task<System.Data.DataSet> CheckStudentHasSubmittedTheTestAsync(long StudentId, long TestId) {
            return base.Channel.CheckStudentHasSubmittedTheTestAsync(StudentId, TestId);
        }
        
        public System.Data.DataSet CheckAssignmentResponseIdExistsForStudent(long StudentId, long SubmissionId) {
            return base.Channel.CheckAssignmentResponseIdExistsForStudent(StudentId, SubmissionId);
        }
        
        public System.Threading.Tasks.Task<System.Data.DataSet> CheckAssignmentResponseIdExistsForStudentAsync(long StudentId, long SubmissionId) {
            return base.Channel.CheckAssignmentResponseIdExistsForStudentAsync(StudentId, SubmissionId);
        }
        
        public System.Data.DataSet CheckTestResponseIdExistsForStudent(long StudentId, long SubmissionId) {
            return base.Channel.CheckTestResponseIdExistsForStudent(StudentId, SubmissionId);
        }
        
        public System.Threading.Tasks.Task<System.Data.DataSet> CheckTestResponseIdExistsForStudentAsync(long StudentId, long SubmissionId) {
            return base.Channel.CheckTestResponseIdExistsForStudentAsync(StudentId, SubmissionId);
        }
        
        public System.Data.DataSet GetInstructorProfileDetails(int InstructorId) {
            return base.Channel.GetInstructorProfileDetails(InstructorId);
        }
        
        public System.Threading.Tasks.Task<System.Data.DataSet> GetInstructorProfileDetailsAsync(int InstructorId) {
            return base.Channel.GetInstructorProfileDetailsAsync(InstructorId);
        }
        
        public System.Data.DataSet CheckTestAccess(long TestId, string AccessCode) {
            return base.Channel.CheckTestAccess(TestId, AccessCode);
        }
        
        public System.Threading.Tasks.Task<System.Data.DataSet> CheckTestAccessAsync(long TestId, string AccessCode) {
            return base.Channel.CheckTestAccessAsync(TestId, AccessCode);
        }
        
        public System.Data.DataSet CheckAssignmentAccess(long AssignmentId, string AccessCode) {
            return base.Channel.CheckAssignmentAccess(AssignmentId, AccessCode);
        }
        
        public System.Threading.Tasks.Task<System.Data.DataSet> CheckAssignmentAccessAsync(long AssignmentId, string AccessCode) {
            return base.Channel.CheckAssignmentAccessAsync(AssignmentId, AccessCode);
        }
        
        public System.Data.DataSet GetIndependentAssignmentDetails(long AssignmentId) {
            return base.Channel.GetIndependentAssignmentDetails(AssignmentId);
        }
        
        public System.Threading.Tasks.Task<System.Data.DataSet> GetIndependentAssignmentDetailsAsync(long AssignmentId) {
            return base.Channel.GetIndependentAssignmentDetailsAsync(AssignmentId);
        }
        
        public System.Data.DataSet GetIndependentTestDetails(long TestId) {
            return base.Channel.GetIndependentTestDetails(TestId);
        }
        
        public System.Threading.Tasks.Task<System.Data.DataSet> GetIndependentTestDetailsAsync(long TestId) {
            return base.Channel.GetIndependentTestDetailsAsync(TestId);
        }
        
        public System.Data.DataSet GetTestDetailsWithAccessCode(long TestId, string AccessCode) {
            return base.Channel.GetTestDetailsWithAccessCode(TestId, AccessCode);
        }
        
        public System.Threading.Tasks.Task<System.Data.DataSet> GetTestDetailsWithAccessCodeAsync(long TestId, string AccessCode) {
            return base.Channel.GetTestDetailsWithAccessCodeAsync(TestId, AccessCode);
        }
        
        public System.Data.DataSet GetAssignmentDetailsWithAC(long AssignmentId, string AccessCode) {
            return base.Channel.GetAssignmentDetailsWithAC(AssignmentId, AccessCode);
        }
        
        public System.Threading.Tasks.Task<System.Data.DataSet> GetAssignmentDetailsWithACAsync(long AssignmentId, string AccessCode) {
            return base.Channel.GetAssignmentDetailsWithACAsync(AssignmentId, AccessCode);
        }
        
        public System.Data.DataSet GetWebsiteAboutDetails() {
            return base.Channel.GetWebsiteAboutDetails();
        }
        
        public System.Threading.Tasks.Task<System.Data.DataSet> GetWebsiteAboutDetailsAsync() {
            return base.Channel.GetWebsiteAboutDetailsAsync();
        }
        
        public string GetData(int value) {
            return base.Channel.GetData(value);
        }
        
        public System.Threading.Tasks.Task<string> GetDataAsync(int value) {
            return base.Channel.GetDataAsync(value);
        }
        
        public StudentDashboard.CPDataService.CompositeType GetDataUsingDataContract(StudentDashboard.CPDataService.CompositeType composite) {
            return base.Channel.GetDataUsingDataContract(composite);
        }
        
        public System.Threading.Tasks.Task<StudentDashboard.CPDataService.CompositeType> GetDataUsingDataContractAsync(StudentDashboard.CPDataService.CompositeType composite) {
            return base.Channel.GetDataUsingDataContractAsync(composite);
        }
        
        public bool RegisterNewUser(string FirstName, string LastName, string PhoneNo, string Email, string Password) {
            return base.Channel.RegisterNewUser(FirstName, LastName, PhoneNo, Email, Password);
        }
        
        public System.Threading.Tasks.Task<bool> RegisterNewUserAsync(string FirstName, string LastName, string PhoneNo, string Email, string Password) {
            return base.Channel.RegisterNewUserAsync(FirstName, LastName, PhoneNo, Email, Password);
        }
        
        public System.Data.DataSet ValidateLoginDetails(string Email, string Password) {
            return base.Channel.ValidateLoginDetails(Email, Password);
        }
        
        public System.Threading.Tasks.Task<System.Data.DataSet> ValidateLoginDetailsAsync(string Email, string Password) {
            return base.Channel.ValidateLoginDetailsAsync(Email, Password);
        }
        
        public bool RegisterNewInstructor(string FirstName, string LastName, string PhoneNo, string Email, string Password, string PhoneNoVerificationGuid, string EmailIdVerificationGuid) {
            return base.Channel.RegisterNewInstructor(FirstName, LastName, PhoneNo, Email, Password, PhoneNoVerificationGuid, EmailIdVerificationGuid);
        }
        
        public System.Threading.Tasks.Task<bool> RegisterNewInstructorAsync(string FirstName, string LastName, string PhoneNo, string Email, string Password, string PhoneNoVerificationGuid, string EmailIdVerificationGuid) {
            return base.Channel.RegisterNewInstructorAsync(FirstName, LastName, PhoneNo, Email, Password, PhoneNoVerificationGuid, EmailIdVerificationGuid);
        }
        
        public System.Data.DataSet ValidateInstructorLoginDetails(string Email, string Password) {
            return base.Channel.ValidateInstructorLoginDetails(Email, Password);
        }
        
        public System.Threading.Tasks.Task<System.Data.DataSet> ValidateInstructorLoginDetailsAsync(string Email, string Password) {
            return base.Channel.ValidateInstructorLoginDetailsAsync(Email, Password);
        }
        
        public System.Data.DataSet GetAllCountryDetails() {
            return base.Channel.GetAllCountryDetails();
        }
        
        public System.Threading.Tasks.Task<System.Data.DataSet> GetAllCountryDetailsAsync() {
            return base.Channel.GetAllCountryDetailsAsync();
        }
        
        public System.Data.DataSet GetAllCityDetailsOfState(int StateId) {
            return base.Channel.GetAllCityDetailsOfState(StateId);
        }
        
        public System.Threading.Tasks.Task<System.Data.DataSet> GetAllCityDetailsOfStateAsync(int StateId) {
            return base.Channel.GetAllCityDetailsOfStateAsync(StateId);
        }
        
        public System.Data.DataSet GetAllStateDetailsOfCountry(int CountryId) {
            return base.Channel.GetAllStateDetailsOfCountry(CountryId);
        }
        
        public System.Threading.Tasks.Task<System.Data.DataSet> GetAllStateDetailsOfCountryAsync(int CountryId) {
            return base.Channel.GetAllStateDetailsOfCountryAsync(CountryId);
        }
        
        public System.Data.DataSet CheckIsSchoolUserIdAlreadyExists(string SchoolUserIdToCheck) {
            return base.Channel.CheckIsSchoolUserIdAlreadyExists(SchoolUserIdToCheck);
        }
        
        public System.Threading.Tasks.Task<System.Data.DataSet> CheckIsSchoolUserIdAlreadyExistsAsync(string SchoolUserIdToCheck) {
            return base.Channel.CheckIsSchoolUserIdAlreadyExistsAsync(SchoolUserIdToCheck);
        }
        
        public bool InsertNewSchoolDetails(string SchoolName, string AddressLine1, string AddressLine2, int CityId, int PinCode, string SchoolUserId, string Password, string PhoneNo, string Email) {
            return base.Channel.InsertNewSchoolDetails(SchoolName, AddressLine1, AddressLine2, CityId, PinCode, SchoolUserId, Password, PhoneNo, Email);
        }
        
        public System.Threading.Tasks.Task<bool> InsertNewSchoolDetailsAsync(string SchoolName, string AddressLine1, string AddressLine2, int CityId, int PinCode, string SchoolUserId, string Password, string PhoneNo, string Email) {
            return base.Channel.InsertNewSchoolDetailsAsync(SchoolName, AddressLine1, AddressLine2, CityId, PinCode, SchoolUserId, Password, PhoneNo, Email);
        }
        
        public System.Data.DataSet ValidateSchoolLoginDetails(string Email, string Password) {
            return base.Channel.ValidateSchoolLoginDetails(Email, Password);
        }
        
        public System.Threading.Tasks.Task<System.Data.DataSet> ValidateSchoolLoginDetailsAsync(string Email, string Password) {
            return base.Channel.ValidateSchoolLoginDetailsAsync(Email, Password);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        StudentDashboard.CPDataService.InsertNewCourseResponse StudentDashboard.CPDataService.ICpDataService.InsertNewCourse(StudentDashboard.CPDataService.InsertNewCourseRequest request) {
            return base.Channel.InsertNewCourse(request);
        }
        
        public bool InsertNewCourse(string CourseName, string CourseDescription, string CourseImageUrl, string CourseThumbnailSmall, string CoursethumbnailMedium, int InstructorId, ref long CourseId) {
            StudentDashboard.CPDataService.InsertNewCourseRequest inValue = new StudentDashboard.CPDataService.InsertNewCourseRequest();
            inValue.CourseName = CourseName;
            inValue.CourseDescription = CourseDescription;
            inValue.CourseImageUrl = CourseImageUrl;
            inValue.CourseThumbnailSmall = CourseThumbnailSmall;
            inValue.CoursethumbnailMedium = CoursethumbnailMedium;
            inValue.InstructorId = InstructorId;
            inValue.CourseId = CourseId;
            StudentDashboard.CPDataService.InsertNewCourseResponse retVal = ((StudentDashboard.CPDataService.ICpDataService)(this)).InsertNewCourse(inValue);
            CourseId = retVal.CourseId;
            return retVal.InsertNewCourseResult;
        }
        
        public System.Threading.Tasks.Task<StudentDashboard.CPDataService.InsertNewCourseResponse> InsertNewCourseAsync(StudentDashboard.CPDataService.InsertNewCourseRequest request) {
            return base.Channel.InsertNewCourseAsync(request);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        StudentDashboard.CPDataService.InertNewCourseIndexResponse StudentDashboard.CPDataService.ICpDataService.InertNewCourseIndex(StudentDashboard.CPDataService.InertNewCourseIndexRequest request) {
            return base.Channel.InertNewCourseIndex(request);
        }
        
        public bool InertNewCourseIndex(string IndexName, string IndexDescription, long CourseId, ref long IndexId) {
            StudentDashboard.CPDataService.InertNewCourseIndexRequest inValue = new StudentDashboard.CPDataService.InertNewCourseIndexRequest();
            inValue.IndexName = IndexName;
            inValue.IndexDescription = IndexDescription;
            inValue.CourseId = CourseId;
            inValue.IndexId = IndexId;
            StudentDashboard.CPDataService.InertNewCourseIndexResponse retVal = ((StudentDashboard.CPDataService.ICpDataService)(this)).InertNewCourseIndex(inValue);
            IndexId = retVal.IndexId;
            return retVal.InertNewCourseIndexResult;
        }
        
        public System.Threading.Tasks.Task<StudentDashboard.CPDataService.InertNewCourseIndexResponse> InertNewCourseIndexAsync(StudentDashboard.CPDataService.InertNewCourseIndexRequest request) {
            return base.Channel.InertNewCourseIndexAsync(request);
        }
        
        public bool InsertNewTopic(string TopicName, string TopicDescription, string FileUploadPath, short FileUploadTypeId, long IndexId, string FileAttachmetPath) {
            return base.Channel.InsertNewTopic(TopicName, TopicDescription, FileUploadPath, FileUploadTypeId, IndexId, FileAttachmetPath);
        }
        
        public System.Threading.Tasks.Task<bool> InsertNewTopicAsync(string TopicName, string TopicDescription, string FileUploadPath, short FileUploadTypeId, long IndexId, string FileAttachmetPath) {
            return base.Channel.InsertNewTopicAsync(TopicName, TopicDescription, FileUploadPath, FileUploadTypeId, IndexId, FileAttachmetPath);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        StudentDashboard.CPDataService.InsertNewTestResponse StudentDashboard.CPDataService.ICpDataService.InsertNewTest(StudentDashboard.CPDataService.InsertNewTestRequest request) {
            return base.Channel.InsertNewTest(request);
        }
        
        public bool InsertNewTest(string TestName, string TestDescription, string FilePath, short FileTypeId, short TestType, ref long TestId) {
            StudentDashboard.CPDataService.InsertNewTestRequest inValue = new StudentDashboard.CPDataService.InsertNewTestRequest();
            inValue.TestName = TestName;
            inValue.TestDescription = TestDescription;
            inValue.FilePath = FilePath;
            inValue.FileTypeId = FileTypeId;
            inValue.TestType = TestType;
            inValue.TestId = TestId;
            StudentDashboard.CPDataService.InsertNewTestResponse retVal = ((StudentDashboard.CPDataService.ICpDataService)(this)).InsertNewTest(inValue);
            TestId = retVal.TestId;
            return retVal.InsertNewTestResult;
        }
        
        public System.Threading.Tasks.Task<StudentDashboard.CPDataService.InsertNewTestResponse> InsertNewTestAsync(StudentDashboard.CPDataService.InsertNewTestRequest request) {
            return base.Channel.InsertNewTestAsync(request);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        StudentDashboard.CPDataService.InsertNewAssignmentResponse StudentDashboard.CPDataService.ICpDataService.InsertNewAssignment(StudentDashboard.CPDataService.InsertNewAssignmentRequest request) {
            return base.Channel.InsertNewAssignment(request);
        }
        
        public bool InsertNewAssignment(string AssignmentName, string FilePath, short FileTypeId, short AssignmentType, string AssignmentDescription, ref long AssignmentId) {
            StudentDashboard.CPDataService.InsertNewAssignmentRequest inValue = new StudentDashboard.CPDataService.InsertNewAssignmentRequest();
            inValue.AssignmentName = AssignmentName;
            inValue.FilePath = FilePath;
            inValue.FileTypeId = FileTypeId;
            inValue.AssignmentType = AssignmentType;
            inValue.AssignmentDescription = AssignmentDescription;
            inValue.AssignmentId = AssignmentId;
            StudentDashboard.CPDataService.InsertNewAssignmentResponse retVal = ((StudentDashboard.CPDataService.ICpDataService)(this)).InsertNewAssignment(inValue);
            AssignmentId = retVal.AssignmentId;
            return retVal.InsertNewAssignmentResult;
        }
        
        public System.Threading.Tasks.Task<StudentDashboard.CPDataService.InsertNewAssignmentResponse> InsertNewAssignmentAsync(StudentDashboard.CPDataService.InsertNewAssignmentRequest request) {
            return base.Channel.InsertNewAssignmentAsync(request);
        }
        
        public bool InsertNewMcqAssignment(long AssignmentId, string QuestionStatement, string Option1, string Option2, string Option3, string Option4, short CorrectOption) {
            return base.Channel.InsertNewMcqAssignment(AssignmentId, QuestionStatement, Option1, Option2, Option3, Option4, CorrectOption);
        }
        
        public System.Threading.Tasks.Task<bool> InsertNewMcqAssignmentAsync(long AssignmentId, string QuestionStatement, string Option1, string Option2, string Option3, string Option4, short CorrectOption) {
            return base.Channel.InsertNewMcqAssignmentAsync(AssignmentId, QuestionStatement, Option1, Option2, Option3, Option4, CorrectOption);
        }
        
        public bool InsertNewMcqTestQuestion(long TestId, string QuestionStatement, string Option1, string Option2, string Option3, string Option4, short CorrectOption, int TimeForQuestionInSeconds, int Marks) {
            return base.Channel.InsertNewMcqTestQuestion(TestId, QuestionStatement, Option1, Option2, Option3, Option4, CorrectOption, TimeForQuestionInSeconds, Marks);
        }
        
        public System.Threading.Tasks.Task<bool> InsertNewMcqTestQuestionAsync(long TestId, string QuestionStatement, string Option1, string Option2, string Option3, string Option4, short CorrectOption, int TimeForQuestionInSeconds, int Marks) {
            return base.Channel.InsertNewMcqTestQuestionAsync(TestId, QuestionStatement, Option1, Option2, Option3, Option4, CorrectOption, TimeForQuestionInSeconds, Marks);
        }
        
        public bool InsertTestIdToIndex(long TestId, long IndexId) {
            return base.Channel.InsertTestIdToIndex(TestId, IndexId);
        }
        
        public System.Threading.Tasks.Task<bool> InsertTestIdToIndexAsync(long TestId, long IndexId) {
            return base.Channel.InsertTestIdToIndexAsync(TestId, IndexId);
        }
        
        public bool InsertAssignmentIdToIndex(long AssignmentId, long IndexId) {
            return base.Channel.InsertAssignmentIdToIndex(AssignmentId, IndexId);
        }
        
        public System.Threading.Tasks.Task<bool> InsertAssignmentIdToIndexAsync(long AssignmentId, long IndexId) {
            return base.Channel.InsertAssignmentIdToIndexAsync(AssignmentId, IndexId);
        }
        
        public System.Data.DataSet GetAllCourse(long InstructorId) {
            return base.Channel.GetAllCourse(InstructorId);
        }
        
        public System.Threading.Tasks.Task<System.Data.DataSet> GetAllCourseAsync(long InstructorId) {
            return base.Channel.GetAllCourseAsync(InstructorId);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        StudentDashboard.CPDataService.GetInstructorIdFromUserIdResponse StudentDashboard.CPDataService.ICpDataService.GetInstructorIdFromUserId(StudentDashboard.CPDataService.GetInstructorIdFromUserIdRequest request) {
            return base.Channel.GetInstructorIdFromUserId(request);
        }
        
        public bool GetInstructorIdFromUserId(string InstructorId, ref int Id) {
            StudentDashboard.CPDataService.GetInstructorIdFromUserIdRequest inValue = new StudentDashboard.CPDataService.GetInstructorIdFromUserIdRequest();
            inValue.InstructorId = InstructorId;
            inValue.Id = Id;
            StudentDashboard.CPDataService.GetInstructorIdFromUserIdResponse retVal = ((StudentDashboard.CPDataService.ICpDataService)(this)).GetInstructorIdFromUserId(inValue);
            Id = retVal.Id;
            return retVal.GetInstructorIdFromUserIdResult;
        }
        
        public System.Threading.Tasks.Task<StudentDashboard.CPDataService.GetInstructorIdFromUserIdResponse> GetInstructorIdFromUserIdAsync(StudentDashboard.CPDataService.GetInstructorIdFromUserIdRequest request) {
            return base.Channel.GetInstructorIdFromUserIdAsync(request);
        }
        
        public System.Data.DataSet GetIndexDetailsOfCourse(long CourseId) {
            return base.Channel.GetIndexDetailsOfCourse(CourseId);
        }
        
        public System.Threading.Tasks.Task<System.Data.DataSet> GetIndexDetailsOfCourseAsync(long CourseId) {
            return base.Channel.GetIndexDetailsOfCourseAsync(CourseId);
        }
        
        public System.Data.DataSet GetCourseDetails(long CourseId) {
            return base.Channel.GetCourseDetails(CourseId);
        }
        
        public System.Threading.Tasks.Task<System.Data.DataSet> GetCourseDetailsAsync(long CourseId) {
            return base.Channel.GetCourseDetailsAsync(CourseId);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        StudentDashboard.CPDataService.InsertNewIndependentAssignmentResponse StudentDashboard.CPDataService.ICpDataService.InsertNewIndependentAssignment(StudentDashboard.CPDataService.InsertNewIndependentAssignmentRequest request) {
            return base.Channel.InsertNewIndependentAssignment(request);
        }
        
        public bool InsertNewIndependentAssignment(int InstructorId, string AssignmentName, string AssignmentDescription, string FilePath, short FileTypeId, short AssignmentType, ref long AssignmentId) {
            StudentDashboard.CPDataService.InsertNewIndependentAssignmentRequest inValue = new StudentDashboard.CPDataService.InsertNewIndependentAssignmentRequest();
            inValue.InstructorId = InstructorId;
            inValue.AssignmentName = AssignmentName;
            inValue.AssignmentDescription = AssignmentDescription;
            inValue.FilePath = FilePath;
            inValue.FileTypeId = FileTypeId;
            inValue.AssignmentType = AssignmentType;
            inValue.AssignmentId = AssignmentId;
            StudentDashboard.CPDataService.InsertNewIndependentAssignmentResponse retVal = ((StudentDashboard.CPDataService.ICpDataService)(this)).InsertNewIndependentAssignment(inValue);
            AssignmentId = retVal.AssignmentId;
            return retVal.InsertNewIndependentAssignmentResult;
        }
        
        public System.Threading.Tasks.Task<StudentDashboard.CPDataService.InsertNewIndependentAssignmentResponse> InsertNewIndependentAssignmentAsync(StudentDashboard.CPDataService.InsertNewIndependentAssignmentRequest request) {
            return base.Channel.InsertNewIndependentAssignmentAsync(request);
        }
        
        public bool InsertActivityForInstructor(int InstructorId, string ActivityMessgae) {
            return base.Channel.InsertActivityForInstructor(InstructorId, ActivityMessgae);
        }
        
        public System.Threading.Tasks.Task<bool> InsertActivityForInstructorAsync(int InstructorId, string ActivityMessgae) {
            return base.Channel.InsertActivityForInstructorAsync(InstructorId, ActivityMessgae);
        }
        
        public bool UpdateTestDetails(long TestId, string TestName, string TestDescription, string FilePath, byte FileType) {
            return base.Channel.UpdateTestDetails(TestId, TestName, TestDescription, FilePath, FileType);
        }
        
        public System.Threading.Tasks.Task<bool> UpdateTestDetailsAsync(long TestId, string TestName, string TestDescription, string FilePath, byte FileType) {
            return base.Channel.UpdateTestDetailsAsync(TestId, TestName, TestDescription, FilePath, FileType);
        }
        
        public bool UpdateAssignmentDetails(long AssignmentId, string AssignmentName, string AssignmentDescription, string FilePath, byte FileType) {
            return base.Channel.UpdateAssignmentDetails(AssignmentId, AssignmentName, AssignmentDescription, FilePath, FileType);
        }
        
        public System.Threading.Tasks.Task<bool> UpdateAssignmentDetailsAsync(long AssignmentId, string AssignmentName, string AssignmentDescription, string FilePath, byte FileType) {
            return base.Channel.UpdateAssignmentDetailsAsync(AssignmentId, AssignmentName, AssignmentDescription, FilePath, FileType);
        }
        
        public bool UpdateIndexTopicDetails(long TopicId, string TopicName, string TopicDescription, string FilePath, byte FileType, string FileAttachmentPath) {
            return base.Channel.UpdateIndexTopicDetails(TopicId, TopicName, TopicDescription, FilePath, FileType, FileAttachmentPath);
        }
        
        public System.Threading.Tasks.Task<bool> UpdateIndexTopicDetailsAsync(long TopicId, string TopicName, string TopicDescription, string FilePath, byte FileType, string FileAttachmentPath) {
            return base.Channel.UpdateIndexTopicDetailsAsync(TopicId, TopicName, TopicDescription, FilePath, FileType, FileAttachmentPath);
        }
        
        public bool UpdateCourseIndexDetails(long IndexId, string IndexName, string IndexDescription) {
            return base.Channel.UpdateCourseIndexDetails(IndexId, IndexName, IndexDescription);
        }
        
        public System.Threading.Tasks.Task<bool> UpdateCourseIndexDetailsAsync(long IndexId, string IndexName, string IndexDescription) {
            return base.Channel.UpdateCourseIndexDetailsAsync(IndexId, IndexName, IndexDescription);
        }
        
        public bool UpdateCourseDetails(long CourseId, string CourseDescription) {
            return base.Channel.UpdateCourseDetails(CourseId, CourseDescription);
        }
        
        public System.Threading.Tasks.Task<bool> UpdateCourseDetailsAsync(long CourseId, string CourseDescription) {
            return base.Channel.UpdateCourseDetailsAsync(CourseId, CourseDescription);
        }
        
        public bool ActivateCourse(long CourseId, string ShareUrl, string AccessCode, int CourseJoiningFeeInPaise) {
            return base.Channel.ActivateCourse(CourseId, ShareUrl, AccessCode, CourseJoiningFeeInPaise);
        }
        
        public System.Threading.Tasks.Task<bool> ActivateCourseAsync(long CourseId, string ShareUrl, string AccessCode, int CourseJoiningFeeInPaise) {
            return base.Channel.ActivateCourseAsync(CourseId, ShareUrl, AccessCode, CourseJoiningFeeInPaise);
        }
        
        public bool DeleteCourse(long CourseId) {
            return base.Channel.DeleteCourse(CourseId);
        }
        
        public System.Threading.Tasks.Task<bool> DeleteCourseAsync(long CourseId) {
            return base.Channel.DeleteCourseAsync(CourseId);
        }
        
        public System.Data.DataSet GetAssignmentDetails(long AssignmentId) {
            return base.Channel.GetAssignmentDetails(AssignmentId);
        }
        
        public System.Threading.Tasks.Task<System.Data.DataSet> GetAssignmentDetailsAsync(long AssignmentId) {
            return base.Channel.GetAssignmentDetailsAsync(AssignmentId);
        }
        
        public System.Data.DataSet GetMcqAssignmentDetails(long AssignmentId) {
            return base.Channel.GetMcqAssignmentDetails(AssignmentId);
        }
        
        public System.Threading.Tasks.Task<System.Data.DataSet> GetMcqAssignmentDetailsAsync(long AssignmentId) {
            return base.Channel.GetMcqAssignmentDetailsAsync(AssignmentId);
        }
        
        public System.Data.DataSet GetInstructorDetails(int Id) {
            return base.Channel.GetInstructorDetails(Id);
        }
        
        public System.Threading.Tasks.Task<System.Data.DataSet> GetInstructorDetailsAsync(int Id) {
            return base.Channel.GetInstructorDetailsAsync(Id);
        }
        
        public bool UpdateInstructorDetails(string FirstName, string LastName, string PhoneNo, string Gender, string AddressLine1, string AddressLine2, System.Nullable<int> CityId, System.Nullable<int> StateId, string PinCode, int InstructorId) {
            return base.Channel.UpdateInstructorDetails(FirstName, LastName, PhoneNo, Gender, AddressLine1, AddressLine2, CityId, StateId, PinCode, InstructorId);
        }
        
        public System.Threading.Tasks.Task<bool> UpdateInstructorDetailsAsync(string FirstName, string LastName, string PhoneNo, string Gender, string AddressLine1, string AddressLine2, System.Nullable<int> CityId, System.Nullable<int> StateId, string PinCode, int InstructorId) {
            return base.Channel.UpdateInstructorDetailsAsync(FirstName, LastName, PhoneNo, Gender, AddressLine1, AddressLine2, CityId, StateId, PinCode, InstructorId);
        }
        
        public bool UpdateInstructorPassword(string Password, int InstructorId) {
            return base.Channel.UpdateInstructorPassword(Password, InstructorId);
        }
        
        public System.Threading.Tasks.Task<bool> UpdateInstructorPasswordAsync(string Password, int InstructorId) {
            return base.Channel.UpdateInstructorPasswordAsync(Password, InstructorId);
        }
        
        public System.Data.DataSet GetInstructorPostLoginDetails(int Id) {
            return base.Channel.GetInstructorPostLoginDetails(Id);
        }
        
        public System.Threading.Tasks.Task<System.Data.DataSet> GetInstructorPostLoginDetailsAsync(int Id) {
            return base.Channel.GetInstructorPostLoginDetailsAsync(Id);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        StudentDashboard.CPDataService.InsertNewIndependentTestResponse StudentDashboard.CPDataService.ICpDataService.InsertNewIndependentTest(StudentDashboard.CPDataService.InsertNewIndependentTestRequest request) {
            return base.Channel.InsertNewIndependentTest(request);
        }
        
        public bool InsertNewIndependentTest(int InstructorId, string TestName, string TestDescription, string FilePath, short FileTypeId, short TestType, ref long TestId) {
            StudentDashboard.CPDataService.InsertNewIndependentTestRequest inValue = new StudentDashboard.CPDataService.InsertNewIndependentTestRequest();
            inValue.InstructorId = InstructorId;
            inValue.TestName = TestName;
            inValue.TestDescription = TestDescription;
            inValue.FilePath = FilePath;
            inValue.FileTypeId = FileTypeId;
            inValue.TestType = TestType;
            inValue.TestId = TestId;
            StudentDashboard.CPDataService.InsertNewIndependentTestResponse retVal = ((StudentDashboard.CPDataService.ICpDataService)(this)).InsertNewIndependentTest(inValue);
            TestId = retVal.TestId;
            return retVal.InsertNewIndependentTestResult;
        }
        
        public System.Threading.Tasks.Task<StudentDashboard.CPDataService.InsertNewIndependentTestResponse> InsertNewIndependentTestAsync(StudentDashboard.CPDataService.InsertNewIndependentTestRequest request) {
            return base.Channel.InsertNewIndependentTestAsync(request);
        }
        
        public System.Data.DataSet GetInstructorTestDetails(int Id) {
            return base.Channel.GetInstructorTestDetails(Id);
        }
        
        public System.Threading.Tasks.Task<System.Data.DataSet> GetInstructorTestDetailsAsync(int Id) {
            return base.Channel.GetInstructorTestDetailsAsync(Id);
        }
        
        public System.Data.DataSet GetInstructorAssignmentDetails(int Id) {
            return base.Channel.GetInstructorAssignmentDetails(Id);
        }
        
        public System.Threading.Tasks.Task<System.Data.DataSet> GetInstructorAssignmentDetailsAsync(int Id) {
            return base.Channel.GetInstructorAssignmentDetailsAsync(Id);
        }
        
        public System.Data.DataSet GetInstructorActivityDetails(int Id) {
            return base.Channel.GetInstructorActivityDetails(Id);
        }
        
        public System.Threading.Tasks.Task<System.Data.DataSet> GetInstructorActivityDetailsAsync(int Id) {
            return base.Channel.GetInstructorActivityDetailsAsync(Id);
        }
        
        public bool ActivateTest(long TestId, string ShareCode, string TinyUrl) {
            return base.Channel.ActivateTest(TestId, ShareCode, TinyUrl);
        }
        
        public System.Threading.Tasks.Task<bool> ActivateTestAsync(long TestId, string ShareCode, string TinyUrl) {
            return base.Channel.ActivateTestAsync(TestId, ShareCode, TinyUrl);
        }
        
        public bool DeleteAssignmentOfCourse(long AssignmentId) {
            return base.Channel.DeleteAssignmentOfCourse(AssignmentId);
        }
        
        public System.Threading.Tasks.Task<bool> DeleteAssignmentOfCourseAsync(long AssignmentId) {
            return base.Channel.DeleteAssignmentOfCourseAsync(AssignmentId);
        }
        
        public bool ActivateAssignment(long AssignmentId, string ShareCode, string TinyUrl) {
            return base.Channel.ActivateAssignment(AssignmentId, ShareCode, TinyUrl);
        }
        
        public System.Threading.Tasks.Task<bool> ActivateAssignmentAsync(long AssignmentId, string ShareCode, string TinyUrl) {
            return base.Channel.ActivateAssignmentAsync(AssignmentId, ShareCode, TinyUrl);
        }
        
        public bool DeleteTest(long TestId) {
            return base.Channel.DeleteTest(TestId);
        }
        
        public System.Threading.Tasks.Task<bool> DeleteTestAsync(long TestId) {
            return base.Channel.DeleteTestAsync(TestId);
        }
        
        public bool InsertContactFormDetails(string Name, string Email, string PhoneNo, string Subject, string Message) {
            return base.Channel.InsertContactFormDetails(Name, Email, PhoneNo, Subject, Message);
        }
        
        public System.Threading.Tasks.Task<bool> InsertContactFormDetailsAsync(string Name, string Email, string PhoneNo, string Subject, string Message) {
            return base.Channel.InsertContactFormDetailsAsync(Name, Email, PhoneNo, Subject, Message);
        }
        
        public System.Data.DataSet GetIndexTopicDetails(long IndexId) {
            return base.Channel.GetIndexTopicDetails(IndexId);
        }
        
        public System.Threading.Tasks.Task<System.Data.DataSet> GetIndexTopicDetailsAsync(long IndexId) {
            return base.Channel.GetIndexTopicDetailsAsync(IndexId);
        }
        
        public System.Data.DataSet GetIndexDetails(long IndexId) {
            return base.Channel.GetIndexDetails(IndexId);
        }
        
        public System.Threading.Tasks.Task<System.Data.DataSet> GetIndexDetailsAsync(long IndexId) {
            return base.Channel.GetIndexDetailsAsync(IndexId);
        }
        
        public bool DeleteMcqQuestionOfAssignment(long QuestionId) {
            return base.Channel.DeleteMcqQuestionOfAssignment(QuestionId);
        }
        
        public System.Threading.Tasks.Task<bool> DeleteMcqQuestionOfAssignmentAsync(long QuestionId) {
            return base.Channel.DeleteMcqQuestionOfAssignmentAsync(QuestionId);
        }
        
        public bool UpdateMcqQuestionOfAssignment(long QuestionId, string QuestionStatement, string Option1, string Option2, string Option3, string Option4, byte CorrectOption) {
            return base.Channel.UpdateMcqQuestionOfAssignment(QuestionId, QuestionStatement, Option1, Option2, Option3, Option4, CorrectOption);
        }
        
        public System.Threading.Tasks.Task<bool> UpdateMcqQuestionOfAssignmentAsync(long QuestionId, string QuestionStatement, string Option1, string Option2, string Option3, string Option4, byte CorrectOption) {
            return base.Channel.UpdateMcqQuestionOfAssignmentAsync(QuestionId, QuestionStatement, Option1, Option2, Option3, Option4, CorrectOption);
        }
        
        public bool DeleteIndexTopic(long TopicId) {
            return base.Channel.DeleteIndexTopic(TopicId);
        }
        
        public System.Threading.Tasks.Task<bool> DeleteIndexTopicAsync(long TopicId) {
            return base.Channel.DeleteIndexTopicAsync(TopicId);
        }
        
        public bool UpdateIndexTopic(long TopicId, string TopicName, string TopicDescription, string FilePathMapToServer, System.Nullable<byte> FileTypeId) {
            return base.Channel.UpdateIndexTopic(TopicId, TopicName, TopicDescription, FilePathMapToServer, FileTypeId);
        }
        
        public System.Threading.Tasks.Task<bool> UpdateIndexTopicAsync(long TopicId, string TopicName, string TopicDescription, string FilePathMapToServer, System.Nullable<byte> FileTypeId) {
            return base.Channel.UpdateIndexTopicAsync(TopicId, TopicName, TopicDescription, FilePathMapToServer, FileTypeId);
        }
        
        public bool UpdateFullCourseDetails(long CourseId, string CourseName, string CourseDescription) {
            return base.Channel.UpdateFullCourseDetails(CourseId, CourseName, CourseDescription);
        }
        
        public System.Threading.Tasks.Task<bool> UpdateFullCourseDetailsAsync(long CourseId, string CourseName, string CourseDescription) {
            return base.Channel.UpdateFullCourseDetailsAsync(CourseId, CourseName, CourseDescription);
        }
        
        public bool DeleteIndex(long IndexId) {
            return base.Channel.DeleteIndex(IndexId);
        }
        
        public System.Threading.Tasks.Task<bool> DeleteIndexAsync(long IndexId) {
            return base.Channel.DeleteIndexAsync(IndexId);
        }
        
        public System.Data.DataSet GetMcqTestDetails(long TestId) {
            return base.Channel.GetMcqTestDetails(TestId);
        }
        
        public System.Threading.Tasks.Task<System.Data.DataSet> GetMcqTestDetailsAsync(long TestId) {
            return base.Channel.GetMcqTestDetailsAsync(TestId);
        }
        
        public System.Data.DataSet GetMcqtestQuestionDetails(long TestId) {
            return base.Channel.GetMcqtestQuestionDetails(TestId);
        }
        
        public System.Threading.Tasks.Task<System.Data.DataSet> GetMcqtestQuestionDetailsAsync(long TestId) {
            return base.Channel.GetMcqtestQuestionDetailsAsync(TestId);
        }
        
        public bool UpdateMcqTestDetails(long TestId, string TestName, string TestDescroption) {
            return base.Channel.UpdateMcqTestDetails(TestId, TestName, TestDescroption);
        }
        
        public System.Threading.Tasks.Task<bool> UpdateMcqTestDetailsAsync(long TestId, string TestName, string TestDescroption) {
            return base.Channel.UpdateMcqTestDetailsAsync(TestId, TestName, TestDescroption);
        }
        
        public bool UpdateMcqQuestionDetails(long Questionid, string QuestionStatement, string Option1, string Option2, string Option3, string Option4, byte CorrectOption, int iTimeForQuestion, int iMarksForQuestion) {
            return base.Channel.UpdateMcqQuestionDetails(Questionid, QuestionStatement, Option1, Option2, Option3, Option4, CorrectOption, iTimeForQuestion, iMarksForQuestion);
        }
        
        public System.Threading.Tasks.Task<bool> UpdateMcqQuestionDetailsAsync(long Questionid, string QuestionStatement, string Option1, string Option2, string Option3, string Option4, byte CorrectOption, int iTimeForQuestion, int iMarksForQuestion) {
            return base.Channel.UpdateMcqQuestionDetailsAsync(Questionid, QuestionStatement, Option1, Option2, Option3, Option4, CorrectOption, iTimeForQuestion, iMarksForQuestion);
        }
        
        public bool DeleteMcqTest(long TestId) {
            return base.Channel.DeleteMcqTest(TestId);
        }
        
        public System.Threading.Tasks.Task<bool> DeleteMcqTestAsync(long TestId) {
            return base.Channel.DeleteMcqTestAsync(TestId);
        }
        
        public bool InsertNewAssignmentToCourse(string AssignmentName, string AssignmentDescription, byte AssignmentTypeId, string FilePath, System.Nullable<byte> FileTypeId, long CourseId) {
            return base.Channel.InsertNewAssignmentToCourse(AssignmentName, AssignmentDescription, AssignmentTypeId, FilePath, FileTypeId, CourseId);
        }
        
        public System.Threading.Tasks.Task<bool> InsertNewAssignmentToCourseAsync(string AssignmentName, string AssignmentDescription, byte AssignmentTypeId, string FilePath, System.Nullable<byte> FileTypeId, long CourseId) {
            return base.Channel.InsertNewAssignmentToCourseAsync(AssignmentName, AssignmentDescription, AssignmentTypeId, FilePath, FileTypeId, CourseId);
        }
        
        public bool InsertNewTestToCourse(string TestName, string TestDescription, byte TestTypeId, string FilePath, System.Nullable<byte> FileTypeId, long CourseId) {
            return base.Channel.InsertNewTestToCourse(TestName, TestDescription, TestTypeId, FilePath, FileTypeId, CourseId);
        }
        
        public System.Threading.Tasks.Task<bool> InsertNewTestToCourseAsync(string TestName, string TestDescription, byte TestTypeId, string FilePath, System.Nullable<byte> FileTypeId, long CourseId) {
            return base.Channel.InsertNewTestToCourseAsync(TestName, TestDescription, TestTypeId, FilePath, FileTypeId, CourseId);
        }
    }
}
